version: 2.1

commands:
  deploy:
    description: Deployment of server
    parameters:
      hostname:
        type: string
        default: "ssh.staging.openchs.org"
    steps:
    - attach_workspace:
        at: ~/artifacts

    - run: sudo apt-get install make openssl

    - run:
        name: Install dependencies
        command: |
          sudo apt-get -y -qq update
          sudo apt-get -y -qq install python3-pip
          sudo pip3 install awscli --upgrade

    - run:
        name: Copy build to server
        command: |
          scp -o StrictHostKeyChecking=no ~/artifacts/avni-server-*.noarch.rpm ec2-user@<< parameters.hostname >>:/tmp/avni-server.rpm

    - run:
        name: Deploy server
        command: |
          ssh -o StrictHostKeyChecking=no ec2-user@<< parameters.hostname >> \<< EOF
          sudo service openchs stop 2>&1 >/dev/null
          sleep 5
          sudo yum clean all 2>&1 >/dev/null
          sudo rm -rf /var/cache/yum 2>&1 >/dev/null
          sudo yum -y updateinfo 2>&1 >/dev/null
          sudo yum -y remove avni-server openchs-server java-1.7.0-openjdk 2>&1 >/dev/null
          sudo yum -y install /tmp/avni-server.rpm 2>&1 >/dev/null
          sudo service openchs start 2>&1 >/dev/null
          sleep 20
          sudo rm -rf /tmp/avni-server.rpm
          EOF

jobs:
  test:
    docker:
    - image: circleci/openjdk:8-jdk

    - image: circleci/postgres:12.7
      environment:
      - POSTGRES_USER: openchs
      - POSTGRES_DB: openchs_test
      - POSTGRES_PASSWORD: password

    working_directory: ~/avni-server

    environment:
      MAVEN_OPTS: -Xmx3200m

    steps:
    - checkout

    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle" }}-{{ checksum "avni-server-api/build.gradle" }}
        - v1-dependencies-

    - run: sudo apt-get update

    - run: sudo apt-get install make postgresql-client

    - run: make ci-test

    - save_cache:
        paths:
        - ~/.m2
        - ~/.gradle
        - ~/avni-server/.gradle
        key: v1-dependencies--{{ checksum "build.gradle" }}-{{ checksum "avni-server-api/build.gradle" }}

    - store_artifacts:
        path: avni-server-api/build/reports/tests/test
        destination: testReports
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    resource_class: medium

    working_directory: ~/avni-server

    environment:
      MAVEN_OPTS: -Xmx3200m

    steps:
    - checkout

    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "build.gradle" }}-{{ checksum "avni-server-api/build.gradle" }}
        - v1-dependencies-

    - run: sudo apt-get install make openssl

    - run: make build_server

    - save_cache:
        paths:
        - ~/.m2
        - ~/.gradle
        - ~/avni-server/.gradle
        key: v1-dependencies--{{ checksum "build.gradle" }}-{{ checksum "avni-server-api/build.gradle" }}

    - run: mkdir -p ~/artifacts;

    # - run: cp minor_version ~/artifacts/minor_version;

    # - run: cp major_version ~/artifacts/major_version;

    # - run: cp ~/avni-server/avni-server-api/build/distributions/avni-server-*.noarch.rpm ~/artifacts/;

    - run: cp ~/avni-server/avni-server-api/build/libs/avni-server-*.jar ~/artifacts/;

    - persist_to_workspace:
        root: ~/artifacts
        paths:
        - minor_version
        - major_version
        - avni-server-*.noarch.rpm
        - avni-server-*.jar

    - store_artifacts:
        path: ~/artifacts

  build_docker_image:
    docker:
      - image: docker:latest
    resource_class: medium
    working_directory: ~/avni-server
    steps:
      - checkout
      - attach_workspace:
          at: ~/artifacts

      - setup_remote_docker

      - run: mkdir -p ~/avni-server/avni-server-api/build/libs/

      - run: cp ~/artifacts/avni-server-*.jar ~/avni-server/avni-server-api/build/libs/

      - run:
          name: Determine Docker Tags
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              DOCKER_TAG="latest"
            elif [ -n "$CIRCLE_TAG" ]; then
              DOCKER_TAG="$CIRCLE_TAG"
            else
              echo "No valid tag found. Exiting."
              exit 1
            fi
            echo "export DOCKER_TAG=$DOCKER_TAG" >> $BASH_ENV
          shell: /bin/sh

      - run:
          name: Authenticate with Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Build Multi-Platform Docker Image
          command: |
            source $BASH_ENV
            docker buildx create --use
            docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/avni-server:${DOCKER_TAG}" --push -f Dockerfile .
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              SHORT_CIRCLE_SHA=$(echo "$CIRCLE_SHA1" | cut -c1-6)
              docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/avni-server:${SHORT_CIRCLE_SHA}" --push -f Dockerfile .
            fi
  
  STAGING_deploy:
    docker:
    - image: circleci/openjdk:8-jdk
    working_directory: ~/
    steps:
    - deploy:
        hostname: "ssh.staging.openchs.org"

  UAT_deploy:
    docker:
    - image: circleci/openjdk:8-jdk
    working_directory: ~/
    steps:
    - deploy:
        hostname: "ssh.uat.openchs.org"

  PRERELEASE_deploy:
    docker:
    - image: circleci/openjdk:8-jdk
    working_directory: ~/
    steps:
    - deploy:
        hostname: "ssh.prerelease.openchs.org"

  PERF_deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.perf.avniproject.org"

  PROD_deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.prod.avniproject.org"
          
tags_filter: &tags_filter
  filters:
    tags:
      only: /.*/
workflows:
  version: 2
  test_and_build_and_deploy:
    jobs:
    - test:
        <<: *tags_filter
    - build:
        <<: *tags_filter
        requires:
          - test     
    - build_docker_image:
        requires:
          - build
        filters:
          tags:
            only: /.*/
          branches:
            only: master
    - STAGING_approve:
        type: approval
        requires:
          - build
    - STAGING_deploy:
        context: non-prod-deploy
        requires:
          - STAGING_approve
    - UAT_approve:
        type: approval
        requires:
        - build
    - UAT_deploy:
        context: non-prod-deploy
        requires:
        - UAT_approve
    - PRERELEASE_approve:
        type: approval
        requires:
        - build
    - PRERELEASE_deploy:
        context: non-prod-deploy
        requires:
        - PRERELEASE_approve
    - PERF_approve:
        type: approval
        requires:
          - build
    - PERF_deploy:
        context: non-prod-deploy
        requires:
          - PERF_approve
    - PROD_approve:
        type: approval
        requires:
          - build
    - PROD_deploy:
        context: prod-deploy
        requires:
          - PROD_approve
notify:
  webhooks:
  - url: https://webhooks.gitter.im/e/0fdffde721194986f2a0

