---
openapi: 3.0.0
info:
  title: Avni API
  description: This is for API consumers of Avni
  contact:
    email: avniproject@googlegroups.com
  license:
    name: AGPL 3.0
    url: https://opensource.org/licenses/AGPL-3.0
  version: 1.0.0
servers:
  - url: https://app.avniproject.org/
    description: Samanvay hosted production server (example)
  - url: https://staging.avniproject.org/
    description: Samanvay hosted staging server (example)
tags:
  - name: Subject
paths:
  /api/subjects:
    get:
      tags:
        - Subject
      summary: Get paged list of subjects
      description: |
        By passing in the appropriate options, you can get the subjects in set of pages
      operationId: subjects
      parameters:
        - name: lastModifiedDateTime
          in: query
          description: "date-time in ISO datetime format. All the subjects which have been updated since this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\"."
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: subjectTypeName
          in: query
          description: subject type
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: concepts
          in: query
          description: "Allows to search by concepts. Remember that '{' and '}' are not valid in a url, and need to be escaped with %7B and %7D respectively."
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: "{\"Diagnosis\": \"Diabetes\", \"Blood Group\": \"B+\"}"
        - name: locationIds
          in: query
          description: comma seperated location names from higher level to lower level
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: "successful, a page of subjects"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: bad input parameter
  /api/subject/{ID}:
    get:
      tags:
        - Subject
      summary: Get a specific subject by ID or External ID
      description: |
        Provide the ID of the subject. The ID is in UUID format, the external id used by Avni.
        OR provide the ExternalID of the Subject. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        "400":
          description: bad input parameter
    put:
      tags:
        - Subject
      summary: Updates all attributes of an existing subject. If no value is specified for an attribute then it would be updated to null/undefined.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
    patch:
      tags:
        - Subject
      summary: Updates subject with only the values provided in the request. If no value is specified for an attribute then it would be left unchanged.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
    delete:
      tags:
        - Subject
      summary: Delete a specific subject by ID or External ID
      description: |
        Provide the ID of the subject. The ID is in UUID format, the external id used by Avni.
        OR provide the ExternalID of the Subject. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
        "400":
          description: bad input parameter
        "404":
          description: entity not found
  /api/subject:
    post:
      tags:
        - Subject
      summary: Creates a new subject
      parameters:
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
  /api/programEnrolments:
    get:
      tags:
        - Program Enrolment
      summary: Get paged list of program enrolments
      description: |
        By passing in the appropriate options, you can get the program enrolments in set of pages. There are three use cases supported, get a list of all enrolments, get a list of all enrolments within a program, and get a list of enrolments for a subject and program.
      parameters:
        - name: lastModifiedDateTime
          in: query
          description: "date-time in ISO datetime format. All the program enrolments which have been updated since this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\". It is mandatory unless subject and programs are are specified"
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: program
          in: query
          description: program name. mandatory if subject is specified.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: subject
          in: query
          description: external id of the subject
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: "successful, a page of program enrolments"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: bad input parameter
  /api/programEnrolment/{ID}:
    get:
      tags:
        - Program Enrolment
      summary: Get a specific program enrolment by ID or External ID
      description: |
        Provide the ID of the program enrolment. The ID is in UUID format, the external id used by Avni
        OR provide the ExternalID of the Program Enrolment. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrolment'
        "400":
          description: bad input parameter
    put:
      tags:
        - Program Enrolment
      summary: Updates an existing program enrolment
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramEnrolmentBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrolment'
    delete:
      tags:
        - Program Enrolment
      summary: Delete a specific program enrolment by ID or External ID
      description: |
        Provide the ID of the program enrolment. The ID is in UUID format, the external id used by Avni
        OR provide the ExternalID of the Program Enrolment. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrolment'
        "400":
          description: bad input parameter
        "404":
          description: entity not found
  /api/programEnrolment:
    post:
      tags:
        - Program Enrolment
      summary: Creates a new program enrolment
      parameters:
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramEnrolmentBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEnrolment'
  /api/programEncounters:
    get:
      tags:
        - Program Encounter
      summary: Get paged list of program encounters
      description: |
        By passing in the appropriate options, you can get the program encounters in set of pages
      parameters:
        - name: lastModifiedDateTime
          in: query
          description: "date-time in ISO datetime format. All the program encounters which have been updated since this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\"."
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: encounter type
          in: query
          description: program encounter type name
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: programEnrolmentId
          in: query
          description: ID of program enrolment
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: "successful, a page of program encounters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: bad input parameter
  /api/programEncounter/{ID}:
    get:
      tags:
        - Program Encounter
      summary: Get a specific program encounter by ID or External ID
      description: |
        Provide the ID of the program encounter. The ID is in UUID format, the external id used by Avni
        OR provide the ExternalID of the program encounter. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEncounter'
        "400":
          description: bad input parameter
    put:
      tags:
        - Program Encounter
      summary: Updates an existing program encounter
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramEncounterBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEncounter'
    delete:
      tags:
        - Program Encounter
      summary: Delete a specific program encounter by ID or External ID
      description: |
        Provide the ID of the program encounter. The ID is in UUID format, the external id used by Avni
        OR provide the ExternalID of the program encounter. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEncounter'
        "400":
          description: bad input parameter
        "404":
          description: entity not found
  /api/programEncounter:
    post:
      tags:
        - Program Encounter
      summary: Creates a new program encounter
      parameters:
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProgramEncounterBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramEncounter'
  /api/encounters:
    get:
      tags:
        - Subject Encounter
      summary: Get paged list of subject encounters
      description: |
        By passing in the appropriate options, you can get the subject encounters in set of pages.
      parameters:
        - name: lastModifiedDateTime
          in: query
          description: "date-time in ISO datetime format. All the subject encounters which have been updated since this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\"."
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: encounter type
          in: query
          description: subject encounter type name
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: subjectId
          in: query
          description: ID of the subject
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
        - name: concepts
          in: query
          description: "Allows to search by concepts. Remember that '{' and '}' are not valid in a url, and need to be escaped with %7B and %7D respectively."
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: "{\"Diagnosis\": \"Diabetes\", \"Blood Group\": \"B+\"}"
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: "successful, a page of subject encounters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: bad input parameter
  /api/encounter/{ID}:
    get:
      tags:
        - Subject Encounter
      summary: Get a specific subject encounter by ID or External ID
      description: |
        Provide the ID of the subject encounter. The ID is in UUID format, the external id used by Avni
        OR provide the ExternalID of the program encounter. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encounter'
        "400":
          description: bad input parameter
    put:
      tags:
        - Subject Encounter
      summary: Updates all attributes of an existing encounter. If no value is specified for an attribute then it would be updated to null/undefined.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncounterBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encounter'
    patch:
      tags:
        - Subject Encounter
      summary: Updates subject with only the values provided in the request. If no value is specified for an attribute then it would be left unchanged.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncounterBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encounter'
    delete:
      tags:
        - Subject Encounter
      summary: Delete a specific subject encounter by ID or External ID
      description: |
        Provide the ID of the subject encounter. The ID is in UUID format, the external id used by Avni
        OR provide the ExternalID of the Subject Encounter. Legacy ID set by the external integrating system.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encounter'
        "400":
          description: bad input parameter
        "404":
          description: entity not found
  /api/encounter:
    post:
      tags:
        - Subject Encounter
      summary: Creates a new encounter
      parameters:
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncounterBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encounter'
  /api/groupSubjects:
    get:
      tags:
        - Group Subject
      summary: Get paged list of group subject
      description: |
        By passing in the appropriate options, you can get the group subjects in set of pages.
      parameters:
        - name: lastModifiedDateTime
          in: query
          description: "date-time in ISO datetime format. All the group subject which have been updated since this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\"."
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: groupSubjectId
          in: query
          description: ID of the group subject
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
        - name: memberSubjectId
          in: query
          description: ID of the member subject
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: "successful, a page of group subject"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: bad input parameter
  /api/task:
    post:
      tags:
        - Task
      summary: Creates a new task
      parameters:
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskBody'
        required: true
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
  /api/locations:
    get:
      tags:
        - Location
      summary: Get paged list of locations
      description: |
        By passing in the appropriate options, you can get the locations in set of pages.
      parameters:
        - name: lastModifiedDateTime
          in: query
          description: "date-time in ISO datetime format. All the locations which have been updated since this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\"."
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: "successful, a page of locations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_locations'
        "400":
          description: bad input parameter
  /api/location/{ID}:
    get:
      tags:
        - Location
      summary: Get a specific location by ID
      description: |
        Provide the ID of the location. The ID is in UUID format.
      parameters:
        - name: ID
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        "400":
          description: bad input parameter
  /api/subjectMigration/bulk:
    post:
      tags:
        - Subject, Subject Migration, Program Encounter, Program Enrolment, Encounter, Group Subject
      summary: Migrate subjects and its descendant data (like encounter etc) from one location to another, belonging to specified subject types. If you have a lot of addresses then the request may timeout, but the server will continue to process the API. Each source to destination mapping for each subject type, will be done in its own transaction. So for the example request given there will be 6 transactions (3 address mapping multiplied by 2 subject types).
      parameters:
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSubjectMigrationBody'
            example: >
              {
                  "destinationAddresses": {
                      "330785": "330856",
                      "334657": "335043",
                      "331106": "331466"
                  },
                  "subjectTypeIds": [
                      672,
                      671
                  ]
              }
        required: true
      responses:
        "200":
          description: successful
  /api/subjectTree:
    delete:
      tags:
        - Subject, Subject Migration, Program Encounter, Program Enrolment, Encounter, Group Subject
      summary: Void Subjects and its descendants that match the criteria provided. It currently supports taking id of locations. All subject and descendants belonging to that location will get voided. This API should not be used to update more than 10,000 records of each entity type.
      parameters:
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidSubjectCriteriaBody'
            example: >
              {
                "addressIds": [20, 30]
              }
        required: true
      responses:
        "200":
          description: successful
  /api/approvalStatuses:
    get:
      tags:
        - Entity Approval Status
      summary: Get paged list of entity approval statues
      description: |
        By passing in the appropriate options, you can get the entity approval statuses in set of pages
      operationId: entityApprovalStatuses
      parameters:
        - name: lastModifiedDateTime
          in: query
          description: "date-time in ISO datetime format. All the entity approval statuses which have been updated since this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\". Defaults to \"1900-01-01T00:00:00.000Z\"."
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: now
          in: query
          description: "date-time in ISO datetime format. All the entity approval statuses which have been updated till this time will be returned. The value should be specified in the following format - yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g. \"2000-10-31T01:30:00.000Z\". Defaults to current time."
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: entityType
          in: query
          description: "Allows filtering results by entity type name"
          required: false
          style: form
          explode: true
          schema:
            type: string
            nullable: true
            enum: [ Subject,ProgramEnrolment,ProgramEncounter,Encounter,ChecklistItem ]
        - name: entityTypeId
          in: query
          description: "Allows filtering results by entity type id"
          required: false
          style: form
          explode: true
          schema:
            type: string
          example: 1e9afb68-7e64-4295-8865-dbe7c433823e
        - name: auth-token
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
            description: token provided by cognito/keycloak
        - name: version
          in: query
          description: "Version of the API to be called"
          required: false
          explode: false
          schema:
            type: string
            default: 1
      responses:
        "200":
          description: "successful, a page of entity approval statuses"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_eas'
        "400":
          description: bad input parameter
components:
  schemas:
    Subject:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        External ID:
          type: string
          description: "External ID, present when subject is created by an external integrating system. This field is optional."
        Voided:
          type: boolean
        Subject type:
          type: string
          description: returned only when subject type is not provided in the request
        Registration location:
          $ref: '#/components/schemas/GeoLocation'
        Registration date:
          type: string
          format: date
          example: 2016-08-29
        location:
          type: object
          additionalProperties:
            type: string
          description: "full hierarchy of location is provided, each one as key-value pair"
          example: "{\"Village\": \"Ganks\", \"Block\": \"Ynaos\"}"
        Location ID:
          type: string
          format: uuid
          description: Unique identifier of the lowest location/address at which the subject is registered
        relatives:
          type: array
          items:
            $ref: '#/components/schemas/SubjectRelationship'
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts). Note that first name, last name and middle name (if allowed on subject type comes here)"
          example:
            Phone number: 9801010101
            Medical problems:
              - Asthama
              - Diabetes
            Marriage date: 1994-08-29
        encounters:
          type: array
          items:
            type: string
            format: uuid
        enrolments:
          type: array
          items:
            type: string
            format: uuid
        audit:
          $ref: '#/components/schemas/Audit'
    SubjectBody:
      type: object
      properties:
        External ID:
          type: string
          description: "External ID, present when subject is created by an external integrating system. This field is optional."
        Subject type:
          type: string
          example: Individual
        Address:
          type: string
          description: Complete address of the subject
          example: "India, Uttarakhand, Dehradun"
        Location ID:
          type: string
          format: uuid
          description: Unique identifier of the lowest location/address at which the subject is registered
        Date of birth:
          type: string
          description: Applicable only for Person type subject
          format: date
        Gender:
          type: string
          description: Applicable only for Person type subject
          example: Male
        Registration date:
          type: string
          description: Registration date
          format: date
        First name:
          type: string
        Middle name:
          type: string
          description: only applicable is subject type allows middle name
        Last name:
          type: string
        Registration location:
          $ref: '#/components/schemas/GeoLocation'
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Profile picture:
          type: string
        Voided:
          type: boolean
    SubjectRelationship:
      type: object
      properties:
        Voided:
          type: boolean
        Relationship type:
          type: string
          example: Daughter
        Relative ID:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        Relative external ID:
          type: string
          description: "Relative's Legacy ID set by the external integrating system, this field is optional."
        Enter date:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        Exit date:
          type: string
          format: date-time
          example: 2017-11-14T17:34:28Z
    ProgramEnrolment:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        External ID:
          type: string
          description: "External ID, present when enrolment is created by an external integrating system. This field is optional."
        Voided:
          type: boolean
        Subject ID:
          type: string
          format: uuid
        Subject external ID:
          type: string
          description: "Subject's external ID, present when its subject is created by an external integrating system. This field is optional."
        Subject type:
          type: string
        Program:
          type: string
          example: Pregnancy
        Enrolment datetime:
          type: string
          format: date-time
        Enrolment location:
          $ref: '#/components/schemas/GeoLocation'
        Exit datetime:
          type: string
          format: date-time
        Exit location:
          $ref: '#/components/schemas/GeoLocation'
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        exitObservations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        encounters:
          type: array
          items:
            type: string
            format: uuid
        audit:
          $ref: '#/components/schemas/Audit'
    ProgramEncounter:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        External ID:
          type: string
          description: "External ID, present when program encounter is created by an external integrating system. This field is optional."
        Voided:
          type: boolean
        Subject ID:
          type: string
          description: id of the subject
          format: uuid
        Subject external ID:
          type: string
          description: "Subject's external ID, present when subject is created by an external integrating system. This field is optional."
        Subject type:
          type: string
          description: "name of the subject type to which this encounter belongs, same as subject type in the subject resource"
        Enrolment ID:
          type: string
          description: id of the program enrolment
          format: uuid
        Enrolment external ID:
          type: string
          description: "Enrolment's external ID, present when enrolment is created by an external integrating system. This field is optional."
        Program:
          type: string
          description: "name of the program of the enrolment to which this encounter belongs, same as program in the program enrolment resource"
        Encounter type:
          type: string
          example: Monthly Visit
        Encounter location:
          $ref: '#/components/schemas/GeoLocation'
        Encounter date time:
          type: string
          format: date-time
        Earliest scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        Max scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Cancel location:
          $ref: '#/components/schemas/GeoLocation'
        Cancel datetime:
          type: string
          description: available only for cancelled encounters
          format: date-time
        cancelObservations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        audit:
          $ref: '#/components/schemas/Audit'
    ProgramEncounterBody:
      type: object
      properties:
        External ID:
          type: string
          description: "External ID, present when program encounter is created by an external integrating system. This field is optional."
        Enrolment ID:
          type: string
          description: id of the program enrolment
          format: uuid
        Enrolment external ID:
          type: string
          description: "Enrolment's external ID, present when enrolment is created by an external integrating system. This field is optional."
        Program:
          type: string
          description: "name of the program of the enrolment to which this encounter belongs, same as program in the program enrolment resource"
        Encounter type:
          type: string
          example: Monthly Visit
        Encounter location:
          $ref: '#/components/schemas/GeoLocation'
        Encounter date time:
          type: string
          format: date-time
        Earliest scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        Max scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Cancel location:
          $ref: '#/components/schemas/GeoLocation'
        Cancel datetime:
          type: string
          description: available only for cancelled encounters
          format: date-time
        cancelObservations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Voided:
          type: boolean
    Encounter:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        External ID:
          type: string
          description: "External ID, present when encounter is created by an external integrating system. This field is optional."
        Voided:
          type: boolean
        Encounter type:
          type: string
          example: Monthly Visit
        Subject ID:
          type: string
          description: id of the subject
          format: uuid
        Subject external ID:
          type: string
          description: "Subject's external ID, present when subject is created by an external integrating system. This field is optional."
        Subject type:
          type: string
          description: "name of the subject type to which this encounter belongs, same as subject type in the subject resource"
        Encounter location:
          $ref: '#/components/schemas/GeoLocation'
        Encounter date time:
          type: string
          format: date-time
        Earliest scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        Max scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Cancel location:
          $ref: '#/components/schemas/GeoLocation'
        Cancel datetime:
          type: string
          description: available only for cancelled encounters
          format: date-time
        cancelObservations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        audit:
          $ref: '#/components/schemas/Audit'
    ProgramEnrolmentBody:
      type: object
      properties:
        External ID:
          type: string
          description: "External ID, present when enrolment is created by an external integrating system. This field is optional."
        Program:
          type: string
          example: ANC program
        Subject ID:
          type: string
          description: id of the subject
          format: uuid
        Subject external ID:
          type: string
          description: "Subject's external ID, present when enrolment is created by an external integrating system. This field is optional."
        Enrolment location:
          $ref: '#/components/schemas/GeoLocation'
        Exit location:
          $ref: '#/components/schemas/GeoLocation'
        Enrolment datetime:
          type: string
          format: date-time
        Exit datetime:
          type: string
          format: date-time
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        exitObservations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Voided:
          type: boolean
    EncounterBody:
      type: object
      properties:
        External ID:
          type: string
          description: "External ID, present when encounter is created by an external integrating system. This field is optional."
        Encounter type:
          type: string
          example: Monthly Visit
        Subject ID:
          type: string
          description: id of the subject
          format: uuid
        Subject external ID:
          type: string
          description: "Subject's external ID, present when subject is created by an external integrating system. This field is optional."
        Encounter location:
          $ref: '#/components/schemas/GeoLocation'
        Encounter date time:
          type: string
          format: date-time
        Earliest scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        Max scheduled date:
          type: string
          description: available only for scheduled encounters
          format: date
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Cancel location:
          $ref: '#/components/schemas/GeoLocation'
        Cancel datetime:
          type: string
          description: available only for cancelled encounters
          format: date-time
        cancelObservations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts)"
        Voided:
          type: boolean
    Location:
      type: object
      properties:
        ID:
          type: string
          format: uuid
        External ID:
          type: string
          description: "External ID, present when location is created by an external integrating system. This field is optional."
        Title:
          type: string
        Type:
          type: string
        Level:
          type: number
          description: "Level of the location in the hierarchy"
        GPS Coordinates:
          $ref: '#/components/schemas/GeoLocation'
        Parent:
          $ref: '#/components/schemas/Location'
        Voided:
          type: boolean
        audit:
          $ref: '#/components/schemas/Audit'
    GeoLocation:
      type: object
      properties:
        X:
          type: number
          example: 19.1253108
        "Y":
          type: number
          example: 74.7364501
      description: Available if the location is enabled by the user for transactional data
    Audit:
      type: object
      properties:
        Created at:
          type: string
          format: date-time
          example: 2016-07-21T17:32:28Z
        Last modified at:
          type: string
          format: date-time
          example: 2018-07-21T17:32:28Z
        Created by:
          type: string
          description: Username which the user uses for login
          example: narayan@jnpct
        Last modified by:
          type: string
          description: Username which the user uses for login
          example: sheela@jnpct
    ResponsePage:
      type: object
      properties:
        totalElements:
          type: integer
          description: Number of entities (like subject) in all the pages put together
          example: 1226
        totalPages:
          type: integer
          description: Total number of pages
          example: 13
        pageSize:
          type: integer
          description: Number of entities in each page
          example: 100
    Task:
      type: object
      properties:
        ID:
          type: string
          description: Unique ID for the Task created by Avni
    TaskBody:
      type: object
      properties:
        External ID:
          type: string
          description: Any additional identifier the calling system can provide which Avni will save along with the task. Optional field.
        Voided:
          type: boolean
          description: Optional field
        Task type:
          type: string
          description: The name of task type present in Avni for which this task should be created
        Task status:
          type: string
          description: The name of task status setup in Avni in which the task should be created
        Name:
          type: string
        Scheduled on:
          type: string
          description: Optional field
          format: date-time
        Completed on:
          type: string
          description: Optional field
          format: date-time
        Assigned to:
          type: string
          description: The login username of the user to which the task should be assigned
        metadata:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts"
          example:
            Contact number: "9801010101"
            Preferred time of day: Day
        observations:
          type: object
          description: "as key value pairs. key is string and value of type (date, string, number or array of string of name of concepts"
          example:
            Duration of talk: 25
        Subject ID:
          type: string
          description: The unique Avni's ID of the subject for which this task is to be done
        Subject External ID:
          type: string
          description: The ID of the calling system for the subject for which this task is to be done
    BulkSubjectMigrationBody:
      type: object
      properties:
        destinationAddresses:
          type: object
          description: "as key value pairs. key is string and value is of type string. key is source address id and value is destination address id"
        subjectTypeIds:
          type: array
          description: "array of numeric values. each item in array is the id of subject type"
          items:
            type: number
    VoidSubjectCriteriaBody:
      type: object
      properties:
        addressIds:
          type: array
          description: "id of locations"
          items:
            type: number
    EntityApprovalStatusBody:
      type: object
      properties:
        Entity ID:
          type: string
          description: ID of the entity for which the approval action was done.
        Entity type:
          type: string
          description: Type of the entity which the approval action was done.
        Entity type ID:
          type: string
          description: ID of the entity type of the entity for which the approval action was done. This will be the ID of the subject type, program, or encounter type - for the entity for which approval action was taken.
        Approval status:
          type: string
          description: Approval status for the entity
        Approval status comment:
          type: string
          description: Comments on the approval status for the entity
        Status date time:
          type: string
          description: Date/Time when the approval status was set
        audit:
          $ref: '#/components/schemas/Audit'
    inline_response_200:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
    inline_response_200_1:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProgramEnrolment'
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
    inline_response_200_2:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProgramEncounter'
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
    inline_response_200_3:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Encounter'
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
    inline_response_200_4:
      allOf:
        - $ref: '#/components/schemas/Task'
        - $ref: '#/components/schemas/TaskBody'
    inline_response_200_locations:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Location'
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
    inline_response_200_eas:
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/EntityApprovalStatusBody'
      allOf:
        - $ref: '#/components/schemas/ResponsePage'
