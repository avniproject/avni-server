{
  "name" : "Diabetes Followup",
  "uuid" : "7182bd8f-006a-49e4-ba2b-0996f4da1df4",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "b4dd115b-554f-4bb2-a7a0-3465d380e24f",
    "name" : "Place",
    "displayOrder" : 1.0,
    "display" : "Place",
    "formElements" : [ {
      "name" : "Place of follow up",
      "uuid" : "72aa4443-7a7f-4dd1-a63b-2a38d864fd70",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Followup not done" ]
      } ],
      "concept" : {
        "name" : "Place of follow up",
        "uuid" : "5b570434-5ef2-4933-8dc7-0e809dbdc2fd",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Ganiyari Hospital",
          "uuid" : "e9a08867-baca-43ea-85ac-34c06811190b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Followup not done",
          "uuid" : "84c5f730-0152-4974-8105-ede182f82dae",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Subcenter OPD",
          "uuid" : "352c714d-0a55-4e46-81ee-c14159dbb636",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Home",
          "uuid" : "1a4f9d04-3dfd-4851-8dfa-62a83f6cf169",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Mobile clinic",
          "uuid" : "b2802bbd-ebc7-4002-a8d8-c068f5eb22da",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "PSG Meeting",
          "uuid" : "a9ed1d6e-fec3-4bc1-b9c6-946688f1e2cb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "4561fdf1-92db-47d5-9658-6c109e606bb0",
    "name" : "Anthropometry",
    "displayOrder" : 2.0,
    "display" : "Anthropometry",
    "formElements" : [ {
      "name" : "Height",
      "uuid" : "f2a04a57-046e-4f2e-b905-1e654bff8b70",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Height",
        "uuid" : "23bcad9f-ec16-46ec-92f5-e144411e5dec",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 21.0,
        "highAbsolute" : 300.0,
        "lowNormal" : 30.0,
        "highNormal" : 200.0,
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    let visibility = false;\n    let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n    if (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n        let lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'Height');\n\n        if (lastEncounterWithConcept)\n            lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\n    }\n    let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n    if (lastConceptDataCollected >= 12)\n        visibility = true;\n\n\n    statusBuilder.show().whenItem(visibility).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Weight",
      "uuid" : "2ff0ce48-474a-493f-bdb1-c8f60184267a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Weight",
        "uuid" : "8d947379-7a1d-48b2-8760-88fff6add987",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 300.0,
        "lowNormal" : 1.0,
        "highNormal" : 100.0,
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n\tconst programEncounter = params.entity;\n\tconst formElement = params.formElement;\n\tconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\tlet visibility = false;\n\tlet lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n\tif (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n\t\tlet lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'Weight');\n\n\t\tif (lastEncounterWithConcept) {\n\t\t\tlastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\t\t}\n\t}\n\tlet lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n\t\t.diff(imports.moment(lastEncounterDateTime), 'months', true)\n\tif (lastConceptDataCollected >= 12) {\n\t\tvisibility = true;\n\t}\n\n\n\tstatusBuilder.show().whenItem(visibility).is.truthy;\n\treturn statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "BMI",
      "uuid" : "41fbdd78-8d55-491d-8827-3b05b922969c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "BMI",
        "uuid" : "a205563d-0ac2-4955-93ac-e2e7adebb56e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 18.5,
        "highNormal" : 24.9,
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const _ = imports.lodash;\n    \nlet height = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Height\", programEncounter);\nlet weight = programEncounter.findObservation(\"Weight\");\n        height = height && height.getValue();\n        weight = weight && weight.getValue();\n        console.log('height',height);\n        console.log('weight',weight);\n        let value = '';\n        if (_.isFinite(weight) && _.isFinite(height)) {\n         value = imports.common.calculateBMI(weight, height);\n       }\n       \n       \n       let visibility = false;\n\tlet lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n\tif (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n\t\tlet lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'BMI');\n\n\t\tif (lastEncounterWithConcept) {\n\t\t\tlastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\t\t}\n\t}\n\tlet lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n\t\t.diff(imports.moment(lastEncounterDateTime), 'months', true)\n\tif (lastConceptDataCollected >= 12) {\n\t\tvisibility = true;\n\t}\n\n       \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, visibility, value);\n  };",
      "mandatory" : false
    }, {
      "name" : "Waist measurement",
      "uuid" : "3573b743-18d7-49bf-8d73-91ee0ff948b8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Waist circumference",
        "uuid" : "64427511-b331-495d-81eb-8f8e51e5b5e8",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n\tconst programEncounter = params.entity;\n\tconst formElement = params.formElement;\n\tconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\tlet visibility = false;\n\tlet lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n\tif (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n\t\tlet lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'Waist circumference');\n\n\t\tif (lastEncounterWithConcept) {\n\t\t\tlastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\t\t}\n\t}\n\tlet lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n\t\t.diff(imports.moment(lastEncounterDateTime), 'months', true)\n\tif (lastConceptDataCollected >= 12) {\n\t\tvisibility = true;\n\t}\n\n\n\tstatusBuilder.show().whenItem(visibility).is.truthy;\n\treturn statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Waist hip ratio",
      "uuid" : "3caf8628-6b87-45b0-ad91-f8f2d76b80b3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Waist hip ratio",
        "uuid" : "3a4b0a77-1d36-43de-aee2-29802a2ce5d3",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    let visibility = false;\n    let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n    if (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n        let lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'Waist hip ratio');\n\n        if (lastEncounterWithConcept)\n            lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\n    }\n    let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n    if (lastConceptDataCollected >= 12)\n        visibility = true;\n        \n        \n    let waist = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Waist circumference\", programEncounter);\n    let hip = programEncounter.programEnrolment.findObservation(\"Hip Measurement\");\n    let value = '';\n    waist = waist && waist.getValue();\n    hip = hip && hip.getValue();\n    console.log('waist',waist);\n    console.log('hip',hip);\n    \n    if(waist && hip ){\n       value = (waist/hip).toFixed(2);       \n    }\n\n\n     return new imports.rulesConfig.FormElementStatus(formElement.uuid, visibility, value);\n};",
      "mandatory" : false
    }, {
      "name" : "Blood Pressure (systolic)",
      "uuid" : "5d40a2fb-da58-4d0f-ad9d-431de7f2a2c8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Blood Pressure (systolic)",
        "uuid" : "6874d48e-8c2f-4009-992c-1d3ca1678cc6",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 20.0,
        "highAbsolute" : 190.0,
        "lowNormal" : 90.0,
        "highNormal" : 140.0,
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : true
    }, {
      "name" : "Blood Pressure (Diastolic)",
      "uuid" : "5a55d928-478a-4602-8c04-071ec14c92b5",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Blood Pressure (Diastolic)",
        "uuid" : "da871f6c-cef0-4191-b307-6751b31ac9ec",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 10.0,
        "highAbsolute" : 120.0,
        "lowNormal" : 50.0,
        "highNormal" : 90.0,
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "10225fc9-e406-45f9-93ff-32c61d03788b",
    "name" : "History",
    "displayOrder" : 3.0,
    "display" : "History",
    "formElements" : [ {
      "name" : "Doing well?",
      "uuid" : "391ac9d0-be91-4f93-806e-53bc5c72f66a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Doing well?",
        "uuid" : "e4721a46-8949-4268-bb29-8cf8a91b7599",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Any new complaint?",
      "uuid" : "97ec3f0e-d7d3-48ab-bb57-0a58ebb64944",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Any new complaint",
        "uuid" : "7b9129a5-b168-4afb-91f4-4eacefcb3a90",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "If yes, what complaint?",
      "uuid" : "48ddb9c2-e31e-4ec0-a0f7-3598ae67e3b2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Diabetes existing complications",
        "uuid" : "656a6817-b193-4964-8286-36b4abc1a05c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "TB",
          "uuid" : "7943642f-c96f-4de6-a470-b9cb0b45feb0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "Retinopathy",
          "uuid" : "6f051f8d-876e-4be4-8896-374f774381c6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Diabetic foot",
          "uuid" : "28bfec4f-5a47-4a46-9f85-6e41f731eb40",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Cardiomyopathy",
          "uuid" : "914b2bc6-fc13-40e8-8376-f37c9740c036",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Gastropathy",
          "uuid" : "e17eab12-23fa-4514-a628-989074cf8ea0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "MI",
          "uuid" : "a7227284-3384-413c-b6a9-57c3bba2ec29",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Neuropathy",
          "uuid" : "0425d34f-f8c2-4cab-bf1b-1fec69fd4e7f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Nepropathy",
          "uuid" : "7737167f-f770-4662-ba9d-e58c223ec796",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "CVA (Stroke)",
          "uuid" : "5c0585f8-632d-4639-91f2-d08331ada0a9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Infection",
          "uuid" : "e668ceed-92ee-4b2f-8714-72838f11264b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "HTN",
          "uuid" : "b718b8ed-f794-430f-a9e9-f7296cfb054b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "active" : true
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "unique" : true,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Any new complaint').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "If yes, what complaint?",
      "uuid" : "dd0824ff-8910-4250-90b9-844e19a41e73",
      "keyValues" : [ ],
      "concept" : {
        "name" : "If yes, what complaint",
        "uuid" : "fb34a579-8778-4ea4-a04c-56d5bd61758a",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Any new complaint').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Specify other",
      "uuid" : "39217e4f-1690-4212-b9c5-f40689987288",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Specify other complaint",
        "uuid" : "cf1d3e53-58b2-4e65-97fe-fa1ea03262fb",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes existing complications').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "No.of days medicine taken previous month",
      "uuid" : "bfc3c423-4de5-4e04-bfb3-6faa78940afc",
      "keyValues" : [ ],
      "concept" : {
        "name" : "No.of days medicine taken previous month",
        "uuid" : "9a839d5e-b113-4168-83a8-f47b76bff0cb",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 31.0,
        "lowNormal" : 0.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Compliance of previous month",
      "uuid" : "f3d98a79-4087-41a3-b2bf-955f0d631fb7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aadhaar ID",
        "uuid" : "681fce2b-ea38-4651-a0b8-2cddd307ade7",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n\n    let days = programEncounter.findObservation(\"No.of days medicine taken previous month\");\n           \n       console.log('define----->',days);\n        console.log('visibilyty----->',days === undefined);\n        let value='Poor';\n        if (days >= 20) {\n         value = 'Good';\n       }\n       \n   \n       \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n  };",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Compliance of previous month",
      "uuid" : "e60bbeba-a271-4d27-8c15-d90e8d60e08c",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Compliance of previous month",
        "uuid" : "e32c3092-b22c-4320-95aa-3fcd51a3e5d3",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n\n    let days = programEncounter.getObservationReadableValue(\"No.of days medicine taken previous month\");\n\n    const visibility = days != undefined;\n    let value = 'Poor';\n    if (days >= 20) {\n        value = 'Good';\n    }\n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, visibility, value);\n};",
      "mandatory" : false
    }, {
      "name" : "Reasons for not taking medicines",
      "uuid" : "cb058e48-a411-4cfb-a88b-a48e57adbff3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Reasons for not taking medicines",
        "uuid" : "455f8f23-7e78-45b1-97d2-b0a6bb048f3d",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Side effects of drug",
          "uuid" : "8efb4e0c-2344-4947-a056-267b9f9499f8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Forgotten to take medicines",
          "uuid" : "07421483-1b84-49a4-8ea2-2c86474f2f45",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Wrong drug",
          "uuid" : "3862f257-f4a9-480e-8c14-6bd9b1be1e6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Not answered",
          "uuid" : "ae021fdc-9767-4fae-9b17-410e7d32e218",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Wrong dose",
          "uuid" : "92ea2630-f541-4080-a21d-d6d506b5afd3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Taking medicine from traditional healer",
          "uuid" : "e377c779-96ff-4277-8e6f-a6370462847e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Patient dont want to continue medicines from JSS",
          "uuid" : "146cc7de-d124-4e6f-9715-25553adef09f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        }, {
          "name" : "Taking medicine from govt/private hospital/dispensary",
          "uuid" : "7dfb6b50-46ed-4de0-ba3b-ea4271c27fb2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Wrong timing",
          "uuid" : "270e752f-71a8-4d9c-a71b-29d92ba3a869",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 9.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('No.of days medicine taken previous month').is.lessThan(20);\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Specify other reasons for not taking medicines",
      "uuid" : "da6c3c07-0132-4e4f-a68c-189c1fdd8165",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other reasons for not taking medicines",
        "uuid" : "09cc4da8-3b67-42dc-88b4-ebd91bc495ea",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Reasons for not taking medicines').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Side effects of drugs?",
      "uuid" : "b9fbb87b-d907-466a-946d-82fd4095f9c8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "side effects of drugs",
        "uuid" : "b2591025-2991-4b02-a08d-65c617e4d95a",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Itching",
          "uuid" : "89bfc53e-c08f-4840-aac8-4ef07e0f5597",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Swelling in ankle",
          "uuid" : "73dcfc64-3f62-4ca6-8f26-35ddce0e811d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Fatigue",
          "uuid" : "30666d16-4520-4fe9-9478-b4c6f25200cb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Diarrhoea",
          "uuid" : "d4b0f920-e3d4-4ae5-9339-6d466f409c9b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "Vomitting",
          "uuid" : "95f7244f-cbfc-4234-8530-cd102551d6b6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Dizziness",
          "uuid" : "2a29c737-9c73-46d5-8a15-32ea9eab7b58",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 17.0,
          "active" : true
        }, {
          "name" : "Tiredness",
          "uuid" : "0c700710-b2fc-4c41-af31-9a711aa73e06",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Weight gain",
          "uuid" : "7d8cae17-b590-47e1-8b96-a78ad2bb1fa7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Swelling",
          "uuid" : "21a6f265-7bcd-4fc6-a8c8-3bf363df0c83",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 14.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Skin rash",
          "uuid" : "01a6094e-6180-4aba-b254-41d1cb68d1fd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Loss of appettite",
          "uuid" : "60ddd128-dbb9-470a-86e6-71b54228453a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 13.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Gas",
          "uuid" : "62a01c4d-f5d7-4a04-ad2f-c53c4ef33fb2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 16.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Metal taste",
          "uuid" : "f470e80d-854c-4893-97cb-968de6c5dc00",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Swelling in legs",
          "uuid" : "8342a5f6-9446-4eec-9803-d530c160622d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Shortness of breath",
          "uuid" : "0808c90e-4a84-439a-b852-71506788e3fc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 15.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Nausea",
          "uuid" : "2e7bdc81-eb3c-4a31-a909-d02159c4ec76",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 11.0,
      "type" : "MultiSelect",
      "mandatory" : false
    }, {
      "name" : "Compliance of previous month",
      "uuid" : "03572d86-8cfa-43af-a1fe-fde2a9284abc",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Compliance of previous month",
        "uuid" : "e32c3092-b22c-4320-95aa-3fcd51a3e5d3",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 12.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Compliance of previous month",
      "uuid" : "7b1c17c3-f585-4b0d-a53b-e8e347754654",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Complian (voided~68956)",
        "uuid" : "adf212d8-d497-4a48-95ee-093d8601ae54",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Good",
          "uuid" : "f28aa90b-d8ae-49d4-91dd-d89d229a80b5",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Poor",
          "uuid" : "9e2ad15a-663b-4e52-b934-d5edf167f811",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true,
        "keyValues" : [ ],
        "voided" : true
      },
      "displayOrder" : 13.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n\n    let days = programEncounter.findObservation(\"No.of days medicine taken previous month\");\n       \n        let value='Poor';\n        if (days >= 20) {\n         value = 'Good';\n       }\n       \n       const visibility=programEncounter.findObservation(\"No.of days medicine taken previous month\");\n       console.log('define----->',visibility);\n        console.log('visibilyty----->',visibility === undefined);\n       \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n  };",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Specify  other side effects",
      "uuid" : "5970f876-2747-4721-94d4-fcd92e3a0116",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other side effects of drugs",
        "uuid" : "cf66bd9d-1a74-47b6-8af8-cbaed18a03b7",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 14.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('side effects of drugs').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Are you taking medicines correctly?",
      "uuid" : "1774e843-a147-4ca1-a191-f73148e0c20d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Taking medicine correctly?",
        "uuid" : "122dc41e-4de9-47fd-8342-beb572cc1ab1",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 15.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "If not taking medicine correctly, why?",
      "uuid" : "62c05ead-c01d-40e7-b3bd-0565f679df30",
      "keyValues" : [ ],
      "concept" : {
        "name" : "If not taking medicine correctly, why?",
        "uuid" : "f9370248-89cc-4528-b41e-6a44bbb4708b",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Wrong drug",
          "uuid" : "3862f257-f4a9-480e-8c14-6bd9b1be1e6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Wrong dose",
          "uuid" : "92ea2630-f541-4080-a21d-d6d506b5afd3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Wrong timing",
          "uuid" : "270e752f-71a8-4d9c-a71b-29d92ba3a869",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 16.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Taking medicine correctly?').containsAnswerConceptName('No');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Specify other problem",
      "uuid" : "23634b98-d9c1-41c2-9f9b-e83f5562584e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Specify other problem for not taking medicines correctly",
        "uuid" : "f3995f52-bd72-48ec-9e35-052a9b9c52ce",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 17.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n   statusBuilder.show().when.valueInEncounter('If not taking medicine correctly, why?').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Hypoglycemia episode?",
      "uuid" : "8bc27931-178e-4adf-8fdd-f0adefd266b0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Hypoglycemia episode",
        "uuid" : "d7113820-5412-41d8-92f7-a6b2f6728fa0",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 18.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "If yes, timing",
      "uuid" : "5b26a01c-d171-4009-892e-f0495086738f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "If yes, timing",
        "uuid" : "33572744-c4c6-4f3c-bcce-af016efc61d4",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Pm",
          "uuid" : "5fb7a078-d901-4191-9d62-e80f8ebcfd11",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Am",
          "uuid" : "bc35536c-f6ee-4f36-8e8d-18f7db884cd6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 19.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Hypoglycemia episode').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Patient treatment status",
      "uuid" : "a52d0414-524a-465d-a13b-6d4f56910a05",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Patient Treatment Status",
        "uuid" : "39bac4c9-d312-490d-8e1c-2c42da978fea",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 20.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    let displayText = 'Can not calculate yet';\n\n    const encounters = programEncounter.programEnrolment.getEncountersOfType('Diabetes Followup');\n\n\n    let enc1 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .nth(0)\n        .value();\n\n    let enc2 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .filter((enc) => !_.isNil(enc.encounterDateTime))\n        .nth(1)\n        .value();\n\n\n    let enc1Value = -1, enc2Value = -1;\n    let enc1ComplianceValue, enc2ComplianceValue;\n\n    if (enc1) {\n        enc1Value = enc1.getObservationReadableValue('No.of days medicine taken previous month');\n    }\n    if (enc2) {\n        enc2Value = enc2.getObservationReadableValue('No.of days medicine taken previous month');\n    }\n\n    if (enc1) {\n        enc1ComplianceValue = enc1.getObservationReadableValue('Compliance with previous month');\n    }\n    if (enc2) {\n        enc2ComplianceValue = enc2.getObservationReadableValue('Compliance with previous month');\n    }\n\n    console.log(`'enc1==>' ${enc1Value} 'enc 2 ==>' ${enc2Value} `);\n\n\n    if (enc1Value >= 0 && enc2Value >= 0 ) {\n        if (enc1Value == 0 && enc2Value == 0 ) {\n            displayText = 'Default';\n        }\n    }\n\n    //  else if (enc1Value < 20 &&  enc2Value < 20 &&  enc3Value < 20) {\n    //    displayText = 'Break in treatment';\n    //   }\n    // else if ( enc1Value > 20 &&  enc2Value > 20 &&  enc3Value > 20){\n    //     displayText = 'Treatment not breaking';\n    //   }\n    // }\n    if (enc1ComplianceValue !== undefined && enc2ComplianceValue !== undefined ) {\n\n        if (_.isEqual(enc1ComplianceValue, 'Poor') && _.isEqual(enc2ComplianceValue, 'Poor'))\n            displayText = 'Break in treatment';\n        else if (!_.isEqual(enc1ComplianceValue, 'Poor') && !_.isEqual(enc2ComplianceValue, 'Poor'))\n            displayText = 'Treatment not breaking';\n\n    }\n\n\n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Patient treatment status",
      "uuid" : "339953e0-82f1-4f34-aa3d-4e8ad664f8d6",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Patients treatment status",
        "uuid" : "77a5d630-7c66-4880-94f0-b552b4e8a7d7",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Can not calculate yet",
          "uuid" : "2c93fb82-d24f-4a59-95b4-78b0eda0b926",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Default",
          "uuid" : "01de3d31-cdc7-48da-8d6d-6409e74a452a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Treatment not breaking",
          "uuid" : "f5384dac-296c-46c1-b957-294d998f6f5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Break in treatment",
          "uuid" : "10275692-2613-4c3a-adea-ad922dee199a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 21.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const _ = imports.lodash;\n    let displayText = 'Can not calculate yet';\n\n   const encounters = programEncounter.programEnrolment.getEncountersOfType('Diabetes Followup');\n\n   let enc1 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .nth(0)\n        .value();\n\n    let enc2 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .filter((enc) => !_.isNil(enc.encounterDateTime))\n        .nth(1)\n        .value();\n\n\n    let enc1Value = -1, enc2Value = -1;\n    let enc1ComplianceValue, enc2ComplianceValue;\n\n    if (enc1) {\n        enc1Value = enc1.getObservationReadableValue('No.of days medicine taken previous month');\n    }\n    if (enc2) {\n        enc2Value = enc2.getObservationReadableValue('No.of days medicine taken previous month');\n    }\n    \n   if (enc1) {\n        enc1ComplianceValue = enc1.getObservationReadableValue('Compliance of previous month');\n    }\n    if (enc2) {\n        enc2ComplianceValue = enc2.getObservationReadableValue('Compliance of previous month');\n    }\n\n    if (enc1Value >= 0 && enc2Value >= 0 ) {\n        if (enc1Value == 0 && enc2Value == 0 ) {\n            displayText = 'Default';\n        }\n    }\n\n    if (enc1ComplianceValue !== undefined && enc2ComplianceValue !== undefined ) {\n        if (_.isEqual(enc1ComplianceValue, 'Poor') || _.isEqual(enc2ComplianceValue, 'Poor')){\n            displayText = 'Break in treatment';            \n        }else if (!_.isEqual(enc1ComplianceValue, 'Poor') && !_.isEqual(enc2ComplianceValue, 'Poor')){\n            displayText = 'Treatment not breaking';          \n        }\n    }\n\n  \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false
    }, {
      "name" : "Tobacco/Alcohol intake of previous month",
      "uuid" : "43f3675c-8517-41be-a897-64fa2e9de80a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Tobacco/Alcohol intake of previous month",
        "uuid" : "2dec74fc-a96c-452d-acc4-47bccfbf1e3b",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Same as before",
          "uuid" : "a1e8ad8d-cccc-4c49-b6c2-e74b8db75f21",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Started alcohol",
          "uuid" : "b17897c7-35cb-4662-860c-e2be21b78456",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "No tobacco",
          "uuid" : "fbdd0942-cda1-42e5-9e7d-a4204184b52b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Decreased",
          "uuid" : "dd14086c-77ca-47d0-9593-d1a1bbfde905",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "No alcohol  intake",
          "uuid" : "2739370e-a76b-4908-bd86-9fd3dad62b74",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "Started tobacco",
          "uuid" : "5f3730d9-060d-41af-bded-4160d38c012e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Increased",
          "uuid" : "f9001edc-0f9a-4eb3-949c-3238ee8adecb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 22.0,
      "type" : "MultiSelect",
      "mandatory" : false
    }, {
      "name" : "Side effects of drugs?",
      "uuid" : "dbc71a6e-cc85-4a3f-80b4-5ae033bd864a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Having any side effects of drug",
        "uuid" : "6b662df4-c8c9-483f-b46c-e89f98f8766f",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 23.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Habit",
      "uuid" : "e1a775c6-4f09-4228-a101-e57ebe1e4821",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Habit",
        "uuid" : "4a7fd949-ba3b-4dd3-aee1-ba44ac940150",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "NA",
          "uuid" : "7efbfba4-66d1-4510-9024-aaaedf439392",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 24.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Type of habit",
      "uuid" : "7e9b57b7-5743-4125-b0fc-fc9149d196ec",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Type of habit",
        "uuid" : "1ab949d4-6ee4-4b0e-a82e-22a584982db8",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Tobacco",
          "uuid" : "8d607aa8-c8a8-4fcd-9fc7-06d83c323b3a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Alcohol",
          "uuid" : "cfa99d0a-ae0e-410f-8475-3d9d6674d8dc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 25.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Habit').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Type of habit",
      "uuid" : "a4bb97a2-d2ec-4d65-bdd6-41f88b52efb1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Addiction",
        "uuid" : "fc01f8b8-0c05-4bea-b740-c55571353272",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Others",
          "uuid" : "f3ef9337-b2d9-4e33-9a69-e7692b66f045",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Bidi",
          "uuid" : "0e425d00-d6b4-4564-ace6-7ec6ef0e83bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Cigarette",
          "uuid" : "1dc73953-f93c-4cd8-93d7-950c1c3aaaac",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Tobacco",
          "uuid" : "8d607aa8-c8a8-4fcd-9fc7-06d83c323b3a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Alcohol",
          "uuid" : "cfa99d0a-ae0e-410f-8475-3d9d6674d8dc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Ganja",
          "uuid" : "e22c2842-b1f0-45d9-9192-000e21b486f6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 26.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Habit').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Type of habit",
      "uuid" : "4e73a544-1629-41d6-8ef8-c52315bf4efb",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Type of habit",
        "uuid" : "1ab949d4-6ee4-4b0e-a82e-22a584982db8",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Tobacco",
          "uuid" : "8d607aa8-c8a8-4fcd-9fc7-06d83c323b3a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Alcohol",
          "uuid" : "cfa99d0a-ae0e-410f-8475-3d9d6674d8dc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 27.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Habit').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "97248794-a4fd-4150-a5c1-b54602ff282d",
    "name" : "Physical examination",
    "displayOrder" : 4.0,
    "display" : "Physical examination",
    "formElements" : [ {
      "name" : "Eye status",
      "uuid" : "85969f61-53ad-42cb-b878-bfd46b58c1af",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Eye status",
        "uuid" : "72700872-c2ee-4e7e-8d9c-7ba874dd34df",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Mild nonproliferative diabetic retinopathy",
          "uuid" : "1cc7ecf9-098b-4a54-a9d4-43ff1a3f453e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Clinically significant macular edema",
          "uuid" : "bccf099f-cf47-4521-a2b3-cf8197f1f569",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Severe prolifertive diabetic retinopathy",
          "uuid" : "5e3ca7cd-a454-498a-907d-cee6c9a971b1",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Normal vision (Rt eye)",
          "uuid" : "f340c218-3038-469a-8ce3-7499eacc0e60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Moderate nonproliferative diabetic retinopathy",
          "uuid" : "ccb6dbf2-fa91-4aa2-a375-e15296e761ce",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Severe nonproliferative diabetic retinopathy",
          "uuid" : "883d2a8f-7ee4-40a8-bd6a-e07b2d04acbc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Normal vision (Lt eye)",
          "uuid" : "3955a4b0-5c45-44e4-8ff7-1e11c606dd51",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Normal vision (Left and Right eye)",
          "uuid" : "aa16ec9d-909c-42a2-bbf1-95f656cc9c87",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Abnormal vision (Rt. eye)",
          "uuid" : "6efc5566-4bf5-4687-bf75-431660d3ff4a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Abnormal vision (Lt. eye)",
          "uuid" : "3f944a3f-d72d-4085-a1dd-6a530c8e7d12",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "High-risk prolifertive diabetic retinopathy",
          "uuid" : "9eef6b0e-66e8-4ddc-948d-b4ac27481800",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "active" : true
        }, {
          "name" : "Early prolifertive diabetic retinopathy",
          "uuid" : "7f048c87-e138-4361-b589-6e434116a2e3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Eye status');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Teeth Status",
      "uuid" : "8eca2e4d-fae4-485b-b4de-50f0e6586ffd",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Followup teeth status",
        "uuid" : "5b562ece-02c0-4979-805f-e4cea5e6dea8",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Normal",
          "uuid" : "ec89cb1f-491b-46de-95c1-3009effa9041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Gum swelling",
          "uuid" : "416132ec-d498-484d-987a-a27410aaed6f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Ulcer/Lesion",
          "uuid" : "a6c88583-c758-435d-a458-0f620b2c70fc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Caries",
          "uuid" : "17335e01-a950-456d-bbdf-b4ae62386041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Followup teeth status');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Nail Status",
      "uuid" : "04f67b17-cde7-4f13-8114-6d10a70d71da",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nail Status",
        "uuid" : "5eec64bb-3cfb-4d9e-bd59-4e8344fd9be0",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Normal",
          "uuid" : "ec89cb1f-491b-46de-95c1-3009effa9041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Ingrown nail",
          "uuid" : "ff1710e0-66ed-4761-a383-e045a595fe56",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "fungle infection",
          "uuid" : "5f17189a-c21d-4547-92f9-e28340e24db7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Abscess",
          "uuid" : "5db21d9a-6ca7-4102-a72e-9e8b4f3dc3c0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Nail Status');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Radial, dorsalis pedis",
      "uuid" : "a2c85677-f6c0-49ca-b791-595bee04d4ca",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Radial, dorsalis pedis",
        "uuid" : "5f904bfd-c71f-42f3-9ce0-c985ecd54cc6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Not equal",
          "uuid" : "53c08a7b-d82e-4517-85da-2bef7c79773c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Equal",
          "uuid" : "585b3af1-f6e1-498b-a762-dd227064bb36",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "unique" : true,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Absent",
          "uuid" : "4d6cf097-ea82-4b4d-ba8f-2bd51132f04d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Radial, dorsalis pedis');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Sensory charting",
      "uuid" : "93748326-2fd9-4509-9804-9db00052b29b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Sensory charting",
        "uuid" : "b9364c46-9f4b-45e3-8c49-997c5e1ce168",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Normal",
          "uuid" : "ec89cb1f-491b-46de-95c1-3009effa9041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Sensory neuropathy",
          "uuid" : "a0933188-ad82-4c3c-b292-ccc6cd1ce9ac",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Sensory charting');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Foot",
      "uuid" : "6ec05c65-f13f-4dd0-904b-c30819da23b4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Foot",
        "uuid" : "2bf7f201-58d9-4fe0-8d2a-a958a650cef9",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Normal",
          "uuid" : "ec89cb1f-491b-46de-95c1-3009effa9041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Callosities",
          "uuid" : "ded8542f-d84d-4351-91ca-138b41703058",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Cracks",
          "uuid" : "d27bdeb2-9f13-4653-8951-942c00936e69",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Ulcer",
          "uuid" : "99bbb17e-375f-46ee-bc55-a9ff1971cf5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Foot');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Specify other",
      "uuid" : "f702a99d-5507-4984-a60e-3ccb3e21cf6d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Foot specify other",
        "uuid" : "9c80f8fb-784f-4a33-8c0e-ecadd372a2b5",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Foot').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "ECG Findings",
      "uuid" : "475c7572-d6f4-4c95-8f38-828b52059b09",
      "keyValues" : [ ],
      "concept" : {
        "name" : "ECG findings",
        "uuid" : "04e08029-0676-42a4-808a-f8767fceb52c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "ECG not done",
          "uuid" : "82ce9872-d147-41ef-a413-d451b8f61530",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Normal",
          "uuid" : "ec89cb1f-491b-46de-95c1-3009effa9041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Abnormal",
          "uuid" : "6d2136fe-6561-45c0-936e-37bcb316277a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "abnormal" : true,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    let visibility = false;\n    let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n    if (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n        let lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'ECG findings');\n\n        if (lastEncounterWithConcept)\n            lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\n    }\n    let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n    if (lastConceptDataCollected >= 12)\n        visibility = true;\n\n\n    statusBuilder.show().whenItem(visibility).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Any heart condition?",
      "uuid" : "de56a296-9e09-4b95-aad1-8fa3944b2420",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Heart condition",
        "uuid" : "09101b0e-d0a1-4ba6-8f05-9d0c90e4565f",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "CHD",
          "uuid" : "6c97b195-9898-4013-8619-a94bb1bd99c1",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Left ventricular hypertrophy (LVH)",
          "uuid" : "bb1ebc6b-1003-42c5-be9a-f52479d387f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Other heart condition",
          "uuid" : "48df3bdb-28e5-4d3a-a5f9-d75fd7116606",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "IHD",
          "uuid" : "be72a069-c521-4bd0-9b1c-49e4f2f127b7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Heart failure",
          "uuid" : "4c2d8a76-f84e-47b5-a974-860c9f860637",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Arrhythmia",
          "uuid" : "19adc2c2-c535-4890-ae78-7e0564ff8947",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('ECG findings').containsAnswerConceptName('Abnormal');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Specify other heart condition",
      "uuid" : "803de815-4c1c-4f8e-80a4-46575cbc11d5",
      "keyValues" : [ ],
      "concept" : {
        "name" : "other heart condition",
        "uuid" : "b6114ce6-41a5-44a6-9f05-e42db0ab682b",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Heart condition').containsAnswerConceptName('Other heart condition');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "ec6270f8-cfec-404a-b1e8-95237ba156dc",
    "name" : "Labs and other investigations",
    "displayOrder" : 5.0,
    "display" : "Labs and other investigations",
    "formElements" : [ {
      "name" : "RBS",
      "uuid" : "4e9caa99-77ad-428d-9095-fe146c9e3ac7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "RBS",
        "uuid" : "6926107f-5793-4ef8-98e1-4a3cc1e2725f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 60.0,
        "highNormal" : 160.0,
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "FBS",
      "uuid" : "08f0add5-299d-4605-bab4-a972a05d5906",
      "keyValues" : [ ],
      "concept" : {
        "name" : "FBS",
        "uuid" : "eb771b86-8c5b-461f-a9f4-4a4815ebeeb3",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 80.0,
        "highNormal" : 120.0,
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "RBS",
      "uuid" : "211263d9-934a-41b0-af8f-41b6d6918254",
      "keyValues" : [ ],
      "concept" : {
        "name" : "RBS",
        "uuid" : "6926107f-5793-4ef8-98e1-4a3cc1e2725f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 60.0,
        "highNormal" : 160.0,
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "PP2BS",
      "uuid" : "96935f04-5d71-4672-b97f-2e7aeacb6e75",
      "keyValues" : [ ],
      "concept" : {
        "name" : "PP2BS",
        "uuid" : "04806ab3-426b-4909-b2c0-65b590f8250c",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 120.0,
        "highNormal" : 150.0,
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Urine albumin",
      "uuid" : "689241d1-06c5-4a25-a5aa-dec0ee78793d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Urin albumin",
        "uuid" : "974fac7b-1294-4e29-bc30-56444e7f3619",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "+2",
          "uuid" : "aa1fb88e-faa6-40ad-adb1-1e1a49d31c62",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Trace",
          "uuid" : "ae92d882-9ca4-448b-9cbf-f7459548bd55",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "+3",
          "uuid" : "f9636cd1-4dcb-4739-b378-83e9c56990e2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "+1",
          "uuid" : "4340f289-e3e6-4877-97e5-278152076dde",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "0",
          "uuid" : "e4588a0c-c75a-4580-83d1-8fe3a20d4b00",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "lowNormal" : 20.0,
        "highNormal" : 120.0,
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    let visibility = false;\n    let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n    if (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n        let lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'Urin albumin');\n\n        if (lastEncounterWithConcept)\n            lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\n    }\n    let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n    if (lastConceptDataCollected >= 12)\n        visibility = true;\n\n\n    statusBuilder.show().whenItem(visibility).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "ECG",
      "uuid" : "4d5ac031-8492-490c-99f8-f0a2119d5de5",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "ECG not done" ]
      } ],
      "concept" : {
        "name" : "ECG findings",
        "uuid" : "04e08029-0676-42a4-808a-f8767fceb52c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "ECG not done",
          "uuid" : "82ce9872-d147-41ef-a413-d451b8f61530",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Normal",
          "uuid" : "ec89cb1f-491b-46de-95c1-3009effa9041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Abnormal",
          "uuid" : "6d2136fe-6561-45c0-936e-37bcb316277a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "abnormal" : true,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n    let visibility = false;\n    let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n    if (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes Followup')) {\n\n        let lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'ECG findings');\n\n        if (lastEncounterWithConcept)\n            lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n\n    }\n    let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n    if (lastConceptDataCollected >= 12)\n        visibility = true;\n\n\n    statusBuilder.show().whenItem(visibility).is.truthy;\n    return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "ECG changes text",
      "uuid" : "fcf40a1d-5e51-4cd5-9c5b-28e7b592cffe",
      "keyValues" : [ ],
      "concept" : {
        "name" : "ECG changes",
        "uuid" : "ac6e0e0b-d71f-4a3a-9fbb-719085e49944",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('ECG findings').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "634f1795-d859-4cc6-a620-248d6c3de12c",
    "name" : "Assessment",
    "displayOrder" : 6.0,
    "display" : "Assessment",
    "formElements" : [ {
      "name" : "Sugar control 2",
      "uuid" : "32107bb2-5f50-47fa-9046-a0c8bce33586",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Sugar control 2 not",
        "uuid" : "2cea3285-928d-4635-8f01-220d51203dda",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : false
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n\n    const fbs = programEncounter.getObservationReadableValue('FBS');\n    let value = '';\n      if (fbs <= 110) {\n        value = 'Good control';\n    } else if (fbs >= 111 && fbs <= 125) {\n        value = 'Partial controlled'\n    } else if(fbs > 125) {\n        value = 'Uncontrolled'\n    }\n    \n     return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Sugar Control 2",
      "uuid" : "3d189b7f-cc9f-40ba-a43f-ab7a65321c5e",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      }, {
        "key" : "ExcludedAnswers",
        "value" : [ "Not calculated" ]
      } ],
      "concept" : {
        "name" : "Sugar Control 2",
        "uuid" : "1060c24d-e75a-43b0-9834-142b5961fb32",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Good control",
          "uuid" : "2a23cbe4-798b-4d4b-a642-9298aa126a8d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Not calculated",
          "uuid" : "430d741d-d449-497b-8c52-21314ebad717",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Uncontrolled",
          "uuid" : "bead2101-7dc0-4106-a5aa-3023e16798f1",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Partial controlled",
          "uuid" : "7183a5b5-d084-4d57-91e6-bebfaf787c42",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n\n    const fbs = programEncounter.getObservationReadableValue('FBS');\n    let value = '';\n      if (fbs <= 110) {\n        value = 'Good control';\n    } else if (fbs >= 111 && fbs <= 125) {\n        value = 'Partial controlled'\n    } else if(fbs > 125) {\n        value = 'Uncontrolled'\n    }\n    \n     return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n\n};",
      "mandatory" : false
    }, {
      "name" : "Sugar control 3",
      "uuid" : "fe35cc08-153b-4247-9578-d4990a982495",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Sugar control 3.",
        "uuid" : "8846cf0d-fd52-4721-a8dd-ccb2e4a28d12",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n\n    const pp = programEncounter.getObservationReadableValue('PP2BS');\n    let value = '';\n      if (pp <= 140) {\n        value = 'Good control';\n    } else if (pp >= 141 && pp <= 180) {\n        value = 'Partial controlled'\n    } else if(pp > 180) {\n        value = 'Uncontrolled'\n    }\n    \n     return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Sugar Control 3",
      "uuid" : "65b1e7c1-58b1-427c-bedc-f8c6706fceed",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      }, {
        "key" : "ExcludedAnswers",
        "value" : [ "Not calculated" ]
      } ],
      "concept" : {
        "name" : "Sugar Control 3",
        "uuid" : "e084770e-6395-488f-9488-63a0d415c9cf",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Partial controlled",
          "uuid" : "7183a5b5-d084-4d57-91e6-bebfaf787c42",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Uncontrolled",
          "uuid" : "bead2101-7dc0-4106-a5aa-3023e16798f1",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Good control",
          "uuid" : "2a23cbe4-798b-4d4b-a642-9298aa126a8d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Not calculated",
          "uuid" : "430d741d-d449-497b-8c52-21314ebad717",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n\n    const pp = programEncounter.getObservationReadableValue('PP2BS');\n    let value = '';\n      if (pp <= 140) {\n        value = 'Good control';\n    } else if (pp >= 141 && pp <= 180) {\n        value = 'Partial controlled'\n    } else if(pp > 180) {\n        value = 'Uncontrolled'\n    }\n    \n     return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n\n};",
      "mandatory" : false
    }, {
      "name" : "Any new complications?",
      "uuid" : "1ce91968-c97d-4b6c-99c1-b48676e139be",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Any new complications",
        "uuid" : "a3d1ac72-9dde-44af-8c6f-60f5c9a58345",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Neuropathy",
          "uuid" : "0425d34f-f8c2-4cab-bf1b-1fec69fd4e7f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Gastropathy",
          "uuid" : "e17eab12-23fa-4514-a628-989074cf8ea0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Infection",
          "uuid" : "e668ceed-92ee-4b2f-8714-72838f11264b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "TB",
          "uuid" : "7943642f-c96f-4de6-a470-b9cb0b45feb0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "Cardiomyopathy",
          "uuid" : "914b2bc6-fc13-40e8-8376-f37c9740c036",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "MI",
          "uuid" : "a7227284-3384-413c-b6a9-57c3bba2ec29",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "CVA (Stroke)",
          "uuid" : "5c0585f8-632d-4639-91f2-d08331ada0a9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Diabetic foot",
          "uuid" : "28bfec4f-5a47-4a46-9f85-6e41f731eb40",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Nepropathy",
          "uuid" : "7737167f-f770-4662-ba9d-e58c223ec796",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "active" : true
        }, {
          "name" : "HTN",
          "uuid" : "b718b8ed-f794-430f-a9e9-f7296cfb054b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Retinopathy",
          "uuid" : "6f051f8d-876e-4be4-8896-374f774381c6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "MultiSelect",
      "mandatory" : false
    }, {
      "name" : "Specify other",
      "uuid" : "3f972de3-f305-4140-9204-f0a82cabf4d4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other complications",
        "uuid" : "629ae5db-a6bb-45a6-bd8a-383fe209af95",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Any new complications').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "ace18514-fc93-40ce-8c67-5700d24451b7",
    "name" : "Medicine",
    "displayOrder" : 7.0,
    "display" : "Medicine",
    "formElements" : [ {
      "name" : "Medicine status",
      "uuid" : "6c1f0056-d8fe-4228-8dba-4b2e3e937d47",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Medicine status",
        "uuid" : "b7d1d14e-bd83-4b46-b087-c2bec4a27ab5",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Continue same medicines",
          "uuid" : "63eb4339-92a9-4a11-9767-2a8e3dc76674",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Change in medicine",
          "uuid" : "3cfed9a0-8e3d-4092-8af9-54313a322e9a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Medicine",
      "uuid" : "f3818dde-aa9a-4476-91f4-d1d15e1a5a1b",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Omeprazole" ]
      } ],
      "concept" : {
        "name" : "Diabetes medicines",
        "uuid" : "39e2c825-b2e8-41dc-842c-4009fe5ac2bd",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Aspirin",
          "uuid" : "d9692956-c0b9-443c-9dbc-d51e5a04973a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true
        }, {
          "name" : "Calcium",
          "uuid" : "a90a1a76-c5fe-4020-924e-0e0e9f5b0f9f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 20.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "glipizide",
          "uuid" : "498836b3-9f98-4070-99d5-5b20a80232d6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Becadex (multivitamin)",
          "uuid" : "74182b4d-b305-4621-b0fa-2bde06295f50",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 15.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Atorvastatin",
          "uuid" : "f86acb3f-53d2-44a7-a55b-1ef91914a997",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "active" : true
        }, {
          "name" : "Famotidin",
          "uuid" : "ff34199b-db41-444d-828a-d30a779446fc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 21.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "metformin",
          "uuid" : "38341ce8-9797-4fc8-be7a-fed00e347d03",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Enalapril",
          "uuid" : "43a75fca-4064-4cf6-b214-506c3665ea89",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "active" : true
        }, {
          "name" : "Spironolactone",
          "uuid" : "7ad5a4ad-2f6b-48b4-a340-ba37c513bbdd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 19.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "pyoglitazone",
          "uuid" : "9ee73b61-99f6-4851-b1bc-4734a0c44601",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Linagliptin",
          "uuid" : "b3f0d313-f4de-4d12-b35b-db624c1cc35f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 24.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "paracetamol",
          "uuid" : "956c10a2-907b-429e-9ed2-4db66f1c8d70",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 17.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "B-complex",
          "uuid" : "26d436dc-96a3-4db4-9b36-183d68094e8c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 14.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "glibenclamide",
          "uuid" : "69d02e53-7590-4dea-9249-4b1f585bd146",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "gliclazide",
          "uuid" : "b45199c3-0a88-4b71-9e8e-47b58a8c980c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Iron (Fersifol)",
          "uuid" : "1a86c03c-416e-4603-a0d0-2407bc837253",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 16.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "nateglinide",
          "uuid" : "9df60333-8ca4-495c-bbdd-5141f114f5f4",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "rosiglitazone",
          "uuid" : "82b1a12b-b5a0-45f5-a118-ae4104f8c8fb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Omeprazole",
          "uuid" : "54323fc3-e6e7-45c8-ac2b-cabc4e2140d5",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 25.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "ripaglinide",
          "uuid" : "6bb7bb07-f88b-4bd0-86d1-5158a2c1725d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "glimeperide",
          "uuid" : "18e18724-82bb-4867-90c3-920d1d7e3327",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Furoseide",
          "uuid" : "836ac756-fdc6-4249-87b8-f24bda9daf47",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 18.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "tolbutamide",
          "uuid" : "1d003b60-7759-4472-a24f-5b57956a8b4c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Saxagliptin",
          "uuid" : "59e7e22a-117f-4f7a-874b-65873b9cdee7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 23.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Sitagliptin",
          "uuid" : "42967a86-0842-4a82-9f86-318ec0b4732a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 22.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "losartan",
          "uuid" : "c1568e82-86e3-419d-90fa-2bc25a8e8694",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 13.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicine status').containsAnswerConceptName('Change in medicine');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Metformin",
      "uuid" : "f0a7fbc8-646e-4f11-bee8-aae64b50b55f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Metformin",
        "uuid" : "d0fbc4d4-943f-46ac-9175-3500245d2a5c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "2000",
          "uuid" : "7f84416a-c344-40d9-900a-dce4a10b2fda",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "1500",
          "uuid" : "d7a64d5c-48b7-4f5f-82bb-20155f42a232",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "1000",
          "uuid" : "a24f9bfc-9674-4a6f-841a-c47b32e911fa",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "500",
          "uuid" : "5ea0a3dc-0078-40b8-9b7c-6696cc017ed3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"metformin\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Metformin tablet for how many times a day",
      "uuid" : "0d451c26-1116-4b73-bb38-565959f4e7da",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Metformin tablet for how many times a day",
        "uuid" : "41c27748-f777-43ca-87b3-10551ed560bd",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"metformin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Metformin tablet for how many days",
      "uuid" : "5a69fca7-dc94-4c0b-807f-8d584be3b499",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Metformin tablet for how many days",
        "uuid" : "783b44ef-be94-4f67-930e-80793adeec7b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"metformin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Glipizide",
      "uuid" : "d0a13079-8bb1-4c01-8568-c4cc357a0a78",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glipizide",
        "uuid" : "1fc97791-4ee1-4ece-952f-d7aefd740c2f",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "5",
          "uuid" : "05ebb004-c21c-4c41-933d-9c2e8b164fea",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "20",
          "uuid" : "89c21517-4fed-4abc-afee-79d9b18e5fa7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "10",
          "uuid" : "c5aff454-4e9d-46bd-a91f-5d098ecbba40",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "15",
          "uuid" : "0b1a26c5-f32b-4ec0-aa95-341cdd6459a3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glipizide\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Glipizide tablet for how many times a day",
      "uuid" : "c574b461-59d9-47cf-9e4e-c23083283070",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glipizide tablet for how many times a day",
        "uuid" : "17d3ca96-f549-4889-99be-87fee2aec17f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glipizide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Glipizide tablet for how many days",
      "uuid" : "d7cb803d-579b-4146-8ef0-6436a5914958",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glipizide tablet for how many days",
        "uuid" : "01a78d61-5cde-4b37-bb99-fdc1d58e1af1",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glipizide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Tolbutamide",
      "uuid" : "4e0486b4-6e4f-4bac-b005-8272ea4900c2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Tolbutamide",
        "uuid" : "4b6fd526-bd98-4131-b642-2fabb3ead8a4",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "0.5",
          "uuid" : "1ed70bfd-37b8-4d1b-8fb5-102e3a9daf83",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "1.5",
          "uuid" : "f4c5cdb7-8c76-410f-837e-52a0e7bcf198",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "2",
          "uuid" : "d35bbce2-8ed3-4512-a9e7-74a8e878b87a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "2.5",
          "uuid" : "12b57dab-12de-4020-b22c-68605e2b40cf",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "1",
          "uuid" : "89c74357-1f8f-40bf-b090-e34a991cf49a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"tolbutamide\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Tolbutamide tablet for how many times a day",
      "uuid" : "9bba3c17-0bcb-4658-a9c6-34ed99f98acb",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Tolbutamide tablet for how many times a day",
        "uuid" : "a180507a-03aa-40bb-bd52-8ba15c197737",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"tolbutamide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Tolbutamide tablet for how many days",
      "uuid" : "625755b4-1d4e-4abf-a0d6-e7a24facf18e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Tolbutamide tablet for how many days",
        "uuid" : "a73e120f-86b1-4cb9-9a04-4733b734c8ec",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 11.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"tolbutamide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Gliclazide",
      "uuid" : "41184a7b-c5ef-4024-bd97-a002cf9d5977",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Gliclazide",
        "uuid" : "7ce80a12-333c-4aee-82ab-79c94e008738",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "120",
          "uuid" : "9d32c9fe-f35f-4a9d-989a-3a278ab28fc4",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "80",
          "uuid" : "49fa1ba5-ba22-430a-bd06-84ad89e63440",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "40",
          "uuid" : "27a77c0b-7b0e-4b6d-9315-c912a5030d7b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "280",
          "uuid" : "53e49652-9b3d-4c5f-a511-abb2cb72f9e4",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "240",
          "uuid" : "43302348-9258-40c1-9fcf-bd30df26b0c5",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "160",
          "uuid" : "6176ac66-f887-4ffb-87b2-dde576aa8e58",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "200",
          "uuid" : "82aeaa0e-2f45-448c-a705-ff41eafe251c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "2000",
          "uuid" : "7f84416a-c344-40d9-900a-dce4a10b2fda",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 12.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"gliclazide\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Gliclazide tablet for how many times a day",
      "uuid" : "243041fd-9e5e-4659-abb5-858580e2211c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Gliclazide tablet for how many times a day",
        "uuid" : "6fa57b52-ab30-4ec4-be2e-4f1d324cb3a1",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 13.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"gliclazide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Gliclazide tablet for how many days",
      "uuid" : "b4f226ca-cfbe-420f-9d4b-e3f9fd95b956",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Gliclazide tablet for how many days",
        "uuid" : "77fe272b-9dd1-4593-bd91-7fbe70f6c9e4",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 14.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"gliclazide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Glibenclamide",
      "uuid" : "e7328bd3-8c27-4208-a958-983d63cfaeb6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glibenclamide",
        "uuid" : "01fc8c9d-af91-41ce-9df1-5819acded3e9",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "10",
          "uuid" : "c5aff454-4e9d-46bd-a91f-5d098ecbba40",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "20",
          "uuid" : "89c21517-4fed-4abc-afee-79d9b18e5fa7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "15",
          "uuid" : "0b1a26c5-f32b-4ec0-aa95-341cdd6459a3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "5",
          "uuid" : "05ebb004-c21c-4c41-933d-9c2e8b164fea",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 15.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glibenclamide\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Glibenclamide tablet for how many times a day",
      "uuid" : "9200423b-10a4-485b-b8f4-2abcbb099836",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glibenclamide tablet for how many times a day",
        "uuid" : "36cf7448-d3a6-410f-91f1-f7d8c66395dc",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 16.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glibenclamide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Glibenclamide tablet for how many days",
      "uuid" : "54d88ff4-ffb0-4747-8734-cf58469a1f01",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glibenclamide tablet for how many days",
        "uuid" : "26f7e262-0db8-4eca-8129-69db3f8b726c",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 17.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glibenclamide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Glimeperide",
      "uuid" : "18fe955a-4a8e-478e-9ed9-60d2167016a0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glimeperide",
        "uuid" : "eb58f9d3-f7aa-43bc-ba22-aa81959e0c28",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "2",
          "uuid" : "d35bbce2-8ed3-4512-a9e7-74a8e878b87a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "6",
          "uuid" : "97e8482b-8884-4683-a59c-a0f90ba7720b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "3",
          "uuid" : "1985c593-f9b7-4367-b4d9-77cb65b2ae13",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "5",
          "uuid" : "05ebb004-c21c-4c41-933d-9c2e8b164fea",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "1",
          "uuid" : "89c74357-1f8f-40bf-b090-e34a991cf49a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "4",
          "uuid" : "7aaf3d11-fa64-403e-b7be-ba8f106f0414",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 18.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glimeperide\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Glimeperide tablet for how many times a day",
      "uuid" : "9974473c-8f31-421e-87d8-b3a65c657c9d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glimeperide tablet for how many times a day",
        "uuid" : "ec0e7aad-d67e-44c4-a6eb-a37f7ceddc59",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 19.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glimeperide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Glimeperide tablet for how many days",
      "uuid" : "be0c72f9-36f2-4f28-b8ee-03d4a2acd1b7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Glimeperide tablet for how many days",
        "uuid" : "3c569e77-d6df-4e91-bbc0-45a4f07c208b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 20.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"glimeperide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Pyoglitazone",
      "uuid" : "2cc32add-7ec2-4e8e-874c-b42c19151b81",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Pyoglitazone",
        "uuid" : "893f5c62-6a60-40ce-a9e1-4184a9f3fe26",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "60",
          "uuid" : "6fceafad-d106-479b-827f-8f991ad93246",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "30",
          "uuid" : "aceb0588-506a-4341-8cc9-697d41982b37",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "45",
          "uuid" : "a3b9df18-1aca-41ec-9829-8fec3f69d2ad",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "15",
          "uuid" : "0b1a26c5-f32b-4ec0-aa95-341cdd6459a3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 21.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"pyoglitazone\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Pyoglitazone tablet for how many times a day",
      "uuid" : "34925be6-98b1-4b76-9e68-963404d23fa7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Pyoglitazone tablet for how many times a day",
        "uuid" : "8875748b-f3d0-4087-af72-829f2835a078",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 22.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"pyoglitazone\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Pyoglitazone tablet for how many days",
      "uuid" : "1f32eb8f-5762-451d-b374-da361bdb8e5e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Pyoglitazone tablet for how many days",
        "uuid" : "8d39dc3f-2d89-4e1f-a2d9-8b7ef0881857",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 23.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"pyoglitazone\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Rosiglitazone",
      "uuid" : "00c15faf-735e-41c8-a09c-c7fb7bb0662b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Rosiglitazone",
        "uuid" : "ed22e195-218b-486c-9789-d0686e0c9f3f",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "12",
          "uuid" : "0985bbe3-3803-4f38-801c-5d2fc8abef39",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "16",
          "uuid" : "6a5497d3-c523-49da-b22b-402efdc0a8e6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "8",
          "uuid" : "563e3ba2-6749-48ec-b3f2-23c06e85a4ee",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "4",
          "uuid" : "7aaf3d11-fa64-403e-b7be-ba8f106f0414",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 24.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"rosiglitazone\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Rosiglitazone tablet for how many times a day",
      "uuid" : "806611a4-b5c0-4169-85b0-4835bc748602",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Rosiglitazone tablet for how many times a day",
        "uuid" : "1f7bca76-2e88-434d-84d4-41b66cdcba84",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 25.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"rosiglitazone\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Rosiglitazone tablet for how many days",
      "uuid" : "64a86cfb-4bb3-43a0-8699-eadc0dd709f0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Rosiglitazone tablet for how many days",
        "uuid" : "9ebe6fc3-10e0-4669-b8c0-ac2c6109b223",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 26.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"rosiglitazone\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Ripaglinide",
      "uuid" : "6527a295-4bb9-452d-ac06-6e916ee4c9b4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Ripaglinide",
        "uuid" : "02ed08ca-ff74-44b0-9f59-018c2776b401",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "6",
          "uuid" : "97e8482b-8884-4683-a59c-a0f90ba7720b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "8",
          "uuid" : "563e3ba2-6749-48ec-b3f2-23c06e85a4ee",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "4.5",
          "uuid" : "00357415-f1cf-4ca0-982c-e83f15238854",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "1.5",
          "uuid" : "f4c5cdb7-8c76-410f-837e-52a0e7bcf198",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "3",
          "uuid" : "1985c593-f9b7-4367-b4d9-77cb65b2ae13",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 27.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"ripaglinide\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Ripaglinide tablet for how many times a day",
      "uuid" : "5b277ef2-b834-41bb-8df4-1c3c41c2090c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Ripaglinide tablet for how many times a day",
        "uuid" : "15fd7ab6-7c71-4265-b2c2-a504ace84758",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 28.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"ripaglinide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Ripaglinide tablet for how many days",
      "uuid" : "01f48bf0-e0e6-4a03-b06c-0970738a18b2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Ripaglinide tablet for how many days",
        "uuid" : "f5dfe184-1cd7-4193-8a54-6a90119e5254",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 29.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"ripaglinide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Nateglinide",
      "uuid" : "232d79e5-6af6-46ae-8bf7-cb22861bb112",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nateglinide",
        "uuid" : "d477aa49-db1a-4e62-9a1f-def41e29adda",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "420",
          "uuid" : "4fdd5bc6-547f-4a68-989d-2a1f1cb603f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "480",
          "uuid" : "53fd8ce6-f65d-4a75-8f40-7ae78e9c8756",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "180",
          "uuid" : "8252783e-dd50-4bff-b682-90b2ae01968a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "360",
          "uuid" : "6c11a8cf-c920-4a75-9995-8af6e2d4ca4d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 30.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"nateglinide\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Nateglinide tablet for how many times a day",
      "uuid" : "06f39c1f-8354-4159-b127-625f06347060",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nateglinide tablet for how many times a day",
        "uuid" : "9cdc9acd-a385-4513-8652-a4ee09408c28",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 31.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"nateglinide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Nateglinide tablet for how many days",
      "uuid" : "abd57843-6dd8-4140-a851-e76d5312bc5e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nateglinide tablet for how many days",
        "uuid" : "4a2eae52-229d-4e15-a4eb-908303120f3e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 32.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"nateglinide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Aspirin",
      "uuid" : "5ba7133b-6275-4dd4-8297-bff44a72fb5b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Diabetes aspirin",
        "uuid" : "56d918dc-bb81-48b9-8a7d-f40794e14b96",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "75",
          "uuid" : "21a93891-2945-4f69-997e-471523a86caf",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "100",
          "uuid" : "5f2817b2-4cf1-4dec-870a-2f89667c1b8c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "125",
          "uuid" : "c6897acc-cedd-43bf-9e23-bdc8e548b273",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "150",
          "uuid" : "15a1472b-9182-40b4-bbc2-70c16704d07f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "175",
          "uuid" : "468cdc42-2cbf-41d4-919d-32b741917554",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "200",
          "uuid" : "82aeaa0e-2f45-448c-a705-ff41eafe251c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "50",
          "uuid" : "e34bdde2-e78a-4a14-975f-32a52157e32f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "25",
          "uuid" : "0987b8e1-6e8b-4475-9533-5da712db88c4",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 33.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Aspirin\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Aspirin tablet for how many times a day",
      "uuid" : "1e3284d6-4ce1-4e0e-9447-2306c2cd2739",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin tablet for how many times a day",
        "uuid" : "12f07672-2062-4c14-9a50-71b80bf4f1d2",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 34.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Aspirin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Aspirin tablet for how many days",
      "uuid" : "d138f935-99ef-4a9f-be67-61c337d04da8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin tablet for how many days",
        "uuid" : "35c8047b-2a33-49ff-a784-2bbd8262c593",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 35.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Aspirin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Atorvastatin",
      "uuid" : "19b4833a-1af4-48a8-b659-8b8195a09122",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Diabetes atorvastatin",
        "uuid" : "eaec610c-2bfb-4029-b67d-ea962d7254ce",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "80",
          "uuid" : "49fa1ba5-ba22-430a-bd06-84ad89e63440",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "60",
          "uuid" : "6fceafad-d106-479b-827f-8f991ad93246",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "30",
          "uuid" : "aceb0588-506a-4341-8cc9-697d41982b37",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "20",
          "uuid" : "89c21517-4fed-4abc-afee-79d9b18e5fa7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "40",
          "uuid" : "27a77c0b-7b0e-4b6d-9315-c912a5030d7b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "70",
          "uuid" : "ed244f32-0c35-4f94-ad6f-e85376dfc484",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "50",
          "uuid" : "e34bdde2-e78a-4a14-975f-32a52157e32f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "10",
          "uuid" : "c5aff454-4e9d-46bd-a91f-5d098ecbba40",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 36.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Atorvastatin\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Atorvastatin tablet for how many times a day",
      "uuid" : "6164bf74-2111-4d75-9283-3160fb814bcb",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin tablet for how many times a day",
        "uuid" : "bb565c11-6734-4fa8-b414-7f380a81505a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 37.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Atorvastatin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Atorvastatin tablet for how many days",
      "uuid" : "0b540fc7-5e0e-43de-8187-4cfff991886e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin tablet for how many days",
        "uuid" : "7c8f1f32-c436-428b-bd9d-1f7ea47d010e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 38.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Atorvastatin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Enalapril",
      "uuid" : "8cd050e6-2f04-4f0d-a579-b4e73f21e227",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Diabetes enalapril",
        "uuid" : "c3ba40f2-2b52-4088-a490-7d3e0e8f6230",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "20",
          "uuid" : "89c21517-4fed-4abc-afee-79d9b18e5fa7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "10",
          "uuid" : "c5aff454-4e9d-46bd-a91f-5d098ecbba40",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "5",
          "uuid" : "05ebb004-c21c-4c41-933d-9c2e8b164fea",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "2.5",
          "uuid" : "12b57dab-12de-4020-b22c-68605e2b40cf",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 39.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Enalapril\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Enalapril tablet for how many times a day",
      "uuid" : "a7f1439b-8748-4c0f-a511-7e9e1cd06a66",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enalapril tablet for how many times a day",
        "uuid" : "a798eba4-1913-46c1-a7dd-a637c72b6dec",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 40.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Enalapril\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Enalapril tablet for how many days",
      "uuid" : "bb280ab5-42d0-41a1-b06d-4b08a6849b89",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enalapril tablet for how many days",
        "uuid" : "6f7f693c-c892-4cc1-b40a-328b61043e84",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 41.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Enalapril\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Losartan",
      "uuid" : "95b7919d-b0f6-446b-b53b-1a4ecacd4af1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Losartan",
        "uuid" : "d0b906ec-8922-42fd-a6f7-53b2008db3da",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "75",
          "uuid" : "21a93891-2945-4f69-997e-471523a86caf",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "25",
          "uuid" : "0987b8e1-6e8b-4475-9533-5da712db88c4",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "100",
          "uuid" : "5f2817b2-4cf1-4dec-870a-2f89667c1b8c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "50",
          "uuid" : "e34bdde2-e78a-4a14-975f-32a52157e32f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 42.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"losartan\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Losartan tablet how many times a day",
      "uuid" : "b551f21d-a2fd-40c6-af8d-ab8e7677f6ce",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Losartan tablet how many times a day",
        "uuid" : "a1ed40d7-08f0-44c4-ba1e-d0f2f92986eb",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 43.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"losartan\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Losartan tablet for how many days",
      "uuid" : "0840065f-7015-483f-9f34-e9b9fd2e5a64",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Losartan tablet for how many days",
        "uuid" : "fd6f2d07-04f0-4a4b-b04d-402f14da636b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 44.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"losartan\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Insulin needed",
      "uuid" : "b822bc1d-a5f4-45f0-9ca1-0b1aa037cea0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Insulin needed",
        "uuid" : "8c7c621d-caed-4f7f-bd05-88645881714c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 45.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Type of Insuline",
      "uuid" : "7676f650-02f6-4faf-96c7-a27f9c3924ac",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Type of Insuline",
        "uuid" : "28435511-5d28-476b-8683-22781974cc9a",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Plain",
          "uuid" : "54b5a865-3b06-483d-9487-b8173bdb945a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Mixtard",
          "uuid" : "a3e5439e-d918-4378-95a0-7a4d170f61e7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 46.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Insulin needed').containsAnswerConceptName(\"Yes\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Frequency of Insulin dose",
      "uuid" : "e32a12aa-1ef6-4176-b97d-9d963458dbb3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Frequency of Insulin dose",
        "uuid" : "e92e55b8-c4fe-49b7-a3d9-28c2b86c7c3a",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Twice a day",
          "uuid" : "377ba051-ce74-41ec-86f0-e1ef45392048",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Once a day",
          "uuid" : "8aeda69b-1fce-49f8-b6f3-91a4358f652d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 47.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Insulin needed').containsAnswerConceptName(\"Yes\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Insuline (One time a day)",
      "uuid" : "f8b175ba-60ae-48c4-b921-7634199ac4b6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "1st dose of Insuline",
        "uuid" : "bb9f5b14-8887-4247-8f8c-a848310e86f7",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 48.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Frequency of Insulin dose').containsAnyAnswerConceptName(\"Once a day\",\"Twice a day\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Insuline (Two time a day)",
      "uuid" : "038a1665-9f1b-462c-b973-b2b09c89d41c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "2nd dose of Insuline",
        "uuid" : "c98962c7-ec44-407f-8d07-e4513ff09fb1",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 49.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Frequency of Insulin dose').containsAnswerConceptName(\"Twice a day\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "B-complex Strength",
      "uuid" : "40174250-f541-4685-bff2-150469d3a80e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "B-complex Strength",
        "uuid" : "a5ed1d52-4b5a-4c79-974b-0adf2bf9ccb5",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "1",
          "uuid" : "89c74357-1f8f-40bf-b090-e34a991cf49a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 50.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"B-complex\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "B-complex tablet for how times per day",
      "uuid" : "0a82dd06-55e8-46ba-b7d3-a60249505266",
      "keyValues" : [ ],
      "concept" : {
        "name" : "B-complex tablet for how times per day",
        "uuid" : "8d0a9149-a1a6-4deb-89b9-dcbdfa21fa04",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 51.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"B-complex\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "B-complex tablet for how many days",
      "uuid" : "92bd031e-f159-4668-8842-074c774f849a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "B-complex tablet for how many days",
        "uuid" : "e4fcbd27-8b23-46ba-a59e-1aed275f690b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 52.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"B-complex\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Becadex (multivitamin) Strength",
      "uuid" : "908259bb-b53e-4ae2-b5d4-5ec26d709e0f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Becadex (multivitamin) Strength",
        "uuid" : "6e96f709-dc8e-4e10-a79f-e908a790d719",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "1",
          "uuid" : "89c74357-1f8f-40bf-b090-e34a991cf49a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 53.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Becadex (multivitamin)\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Becadex (multivitamin) tablet for how times per day",
      "uuid" : "70acf0a0-c328-4aa8-aa35-c750ba16804d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Becadex (multivitamin) tablet for how times per day",
        "uuid" : "9b8e1c45-8286-4ad3-b20e-bfae7d3e212e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 54.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Becadex (multivitamin)\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Becadex (multivitamin) tablet for how many days",
      "uuid" : "686b9cd4-2cf0-498a-b55e-935cc36eb7c3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Becadex (multivitamin) tablet for how many days",
        "uuid" : "5bd89916-3af1-4af7-a79e-9fc795a7c475",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 55.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Becadex (multivitamin)\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Iron (Fersifol) Strength",
      "uuid" : "be3a3d89-4c43-45f7-ba3b-6d1bc128f92c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Iron (Fersifol) Strength",
        "uuid" : "524abcfb-d2b0-46e4-9c18-c5c380adb862",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "150 mg",
          "uuid" : "7ed903d7-4766-46e4-ae90-3cc00683ee53",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "160 mg",
          "uuid" : "b2279a5c-4a97-4348-bca8-3a040c1d185a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "360 mg",
          "uuid" : "46360e77-0cae-4b03-aa2a-5390ecb56f0d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "200 mg",
          "uuid" : "42521250-beb8-4407-8a54-591736c499e7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "60 mg",
          "uuid" : "95c823e7-27e0-454e-8e51-fc5362c573bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 56.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Iron (Fersifol)\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Iron (Fersifol) tablet for how times per day",
      "uuid" : "8a4766b6-c12b-4afc-8c94-5339d4fa7bef",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Iron (Fersifol) tablet for how times per day",
        "uuid" : "2e827b9e-76cb-45bd-8207-a85653d6f4af",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 57.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Iron (Fersifol)\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Iron (Fersifol) tablet for how many days",
      "uuid" : "9eda476d-8f4e-420e-b5ae-836d202af0aa",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Iron (Fersifol) tablet for how many days",
        "uuid" : "c74fd564-30b7-4b4b-a7e7-b93cb189f359",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 58.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Iron (Fersifol)\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Paracetamol Strength",
      "uuid" : "7b616582-5e5b-43cf-89ec-197e423a4a15",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Paracetamol Strength",
        "uuid" : "6b3c1744-f643-499d-8581-8b0b4a4017bd",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "500 mg",
          "uuid" : "814dd7c5-9945-4be1-84a0-14f6577698c6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "250 mg",
          "uuid" : "a8194f24-bbfd-4af2-b8e0-323b0fa37b12",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "1000 mg",
          "uuid" : "f52b5de1-63a5-4665-9fa2-be0ff018122a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 59.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"paracetamol\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Paracetamol tablet for how times per day",
      "uuid" : "8095fa20-6746-4f8c-8ccc-f353a9f34646",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Paracetamol tablet for how times per day",
        "uuid" : "f91a06d7-69c5-443f-b97e-60bb981afca7",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 60.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"paracetamol\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Paracetamol tablet for how many days",
      "uuid" : "3ea008a7-a91a-4943-bd7e-7d95e041bad4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Paracetamol tablet for how many days",
        "uuid" : "4aab6b40-dfc4-4bcb-b413-36689b651a42",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 61.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"paracetamol\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Furosemide Strength",
      "uuid" : "cac18e4c-d7b6-4958-bd87-a5773f05444b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Furosemide Strength",
        "uuid" : "feec4205-8f1e-4b8e-929f-f8c0664e34d4",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "60 mg",
          "uuid" : "95c823e7-27e0-454e-8e51-fc5362c573bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "40 mg",
          "uuid" : "39efffa4-84ab-4551-9bd8-527d262ff469",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "80 mg",
          "uuid" : "d4e7f96f-ad03-4a39-85da-92ccd8baaab0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 62.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Furoseide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Furosemide tablet for how times per day",
      "uuid" : "4ca3e7e6-e871-4044-8867-c63937107348",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Furosemide tablet for how times per day",
        "uuid" : "42c7dc3a-8600-4a56-90b6-09d66ae06c8a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 63.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Furoseide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Furosemide tablet for how many days",
      "uuid" : "bf97a9b7-543b-40f8-bff0-da1c31e2b6af",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Furosemide tablet for how many days",
        "uuid" : "8e7106bd-d9ab-48e4-8200-60707101f34f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 64.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Furoseide\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Spironolactone Strength",
      "uuid" : "00466535-d361-4d04-8385-12eb2534573e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Spironolactone Strength",
        "uuid" : "43ee5933-ba92-4a53-8d51-95423a293302",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "75 mg",
          "uuid" : "534aae61-ef77-4bd0-8fd4-8d6aefd4ec5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 65.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Spironolactone\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Spironolactone tablet for how times per day",
      "uuid" : "93306a2f-52cc-499d-8701-4361f1b8f74e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Spironolactone tablet for how times per day",
        "uuid" : "0da77abb-d8ab-4aa1-9b4d-34ec2e81d14a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 66.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Spironolactone\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Spironolactone tablet for how many days",
      "uuid" : "4396b079-2a16-4866-a05e-853db002646c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Spironolactone tablet for how many days",
        "uuid" : "b3ae0b19-a4b1-4a80-aba4-510bef92fc6b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 67.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Spironolactone\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Calcium Strength",
      "uuid" : "3bbea365-ea5b-4448-8875-8152f05e5831",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Calcium Strength",
        "uuid" : "d6e1be9d-0937-4708-869f-19c816c11d7c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "1000 mg",
          "uuid" : "f52b5de1-63a5-4665-9fa2-be0ff018122a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "500 mg",
          "uuid" : "814dd7c5-9945-4be1-84a0-14f6577698c6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 68.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Calcium\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Calcium tablet for how times per day",
      "uuid" : "e38e09f7-1f52-41ca-af4c-4af24878cb3d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Calcium tablet for how times per day",
        "uuid" : "d38544e2-77f3-4f83-ac43-db76e38593b6",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 69.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Calcium\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Calcium tablet for how many days",
      "uuid" : "91c21e73-3a78-40ba-ad19-8ee5bec2b28a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Calcium tablet for how many days",
        "uuid" : "95ca8c1b-c012-428b-83d8-c9a210e19d57",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 70.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes medicines').containsAnswerConceptName(\"Calcium\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Sitagliptin Strength",
      "uuid" : "547d5366-2ee1-4ffa-a9aa-cf44510aa59f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Sitagliptin Strength",
        "uuid" : "93a77494-4a97-4bd7-8bb1-560f0abd7c2d",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "400 mg",
          "uuid" : "a437d78f-e5f3-4b96-9ed4-8b2b7e5a5a74",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "200 mg",
          "uuid" : "42521250-beb8-4407-8a54-591736c499e7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "300 mg",
          "uuid" : "f278101f-69f6-4c34-aca1-52b7af0daecd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "150 mg",
          "uuid" : "7ed903d7-4766-46e4-ae90-3cc00683ee53",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 71.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Sitagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Sitagliptin tablet for how times per day",
      "uuid" : "9638d953-f9e5-4a00-8a2c-f12af75eeda7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Sitagliptin tablet for how times per day",
        "uuid" : "a173836e-a0f8-4210-bc02-06aeebef2e8b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 72.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Sitagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Sitagliptin tablet for how many days",
      "uuid" : "cb41b12a-b587-4656-b4ef-51333049aefc",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Sitagliptin tablet for how many days",
        "uuid" : "5cd8d685-030c-45c8-aa20-cd169ea0dd6f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 73.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Sitagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Saxagliptin Strength",
      "uuid" : "14050dd3-ea5c-4e76-8649-17f0d70bc859",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Saxagliptin Strength",
        "uuid" : "5016912d-5d2e-4bee-82f3-0c4f08fbd0b6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "2.5 mg",
          "uuid" : "4c184f2c-a390-4a64-a999-95aae33078ee",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "40 mg",
          "uuid" : "39efffa4-84ab-4551-9bd8-527d262ff469",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "7.5 mg",
          "uuid" : "010f90ef-b346-46fb-9f7b-63c98e5efd79",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "5 mg",
          "uuid" : "e6bf6a8e-3c1a-430f-8f09-a9ada7adaf3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 74.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Saxagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Saxagliptin tablet for how times per day",
      "uuid" : "94d2e008-7055-47e3-8c8d-3b4a826e2610",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Saxagliptin tablet for how times per day",
        "uuid" : "2b22c914-d355-49b0-833e-21125ab0c430",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 75.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Saxagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Saxagliptin tablet for how many days",
      "uuid" : "919aa987-8aa9-441d-8c06-54e1215cf949",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Saxagliptin tablet for how many days",
        "uuid" : "95b86823-329e-4cc8-8d97-d477d7fc0cc0",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 76.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Saxagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Linagliptin Strength",
      "uuid" : "734adbee-dcb6-4126-abcd-e40bd43badbd",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Linagliptin Strength",
        "uuid" : "6ad0f77b-6a81-4b68-987c-8e291c1e067a",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "5 mg",
          "uuid" : "e6bf6a8e-3c1a-430f-8f09-a9ada7adaf3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "15 mg",
          "uuid" : "cca549ff-e217-4cfd-a4b6-d045ef33972c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 77.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Linagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Linagliptin tablet for how times per day",
      "uuid" : "50f43a69-9a6f-4762-8ee8-d347db526011",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Linagliptin tablet for how times per day",
        "uuid" : "174b4a7a-4922-4ddf-bac3-2df700791320",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 78.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Linagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Linagliptin tablet for how many days",
      "uuid" : "fd1f2de7-bb87-468c-9c13-29a0a79bfa5d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Linagliptin tablet for how many days",
        "uuid" : "744a2050-a0f0-4018-86df-60aec8dbdf04",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 79.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Diabetes medicines').containsAnswerConceptName(\"Linagliptin\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Other medicine",
      "uuid" : "c1c4daaa-1fc9-43cc-bd72-39d082f2d314",
      "keyValues" : [ ],
      "concept" : {
        "name" : "specify other medicine",
        "uuid" : "88d9c947-6dfb-4a6c-97ab-fbf24a71d086",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 80.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Current Complications",
      "uuid" : "17b57cc3-797f-4ebd-98c8-3232b6d92b46",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Current Complications",
        "uuid" : "501dff76-be14-4339-846f-cf02206ba20d",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 81.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    const _ = imports.lodash;\n\n\n    let complication = programEncounter.getObservationReadableValue(\"Any new complications\");\n    let eye = programEncounter.getObservationReadableValue(\"Eye status\");\n    let charting = programEncounter.getObservationReadableValue(\"Sensory charting\");\n    let foot = programEncounter.getObservationReadableValue(\"Foot\");\n    let bpSys = programEncounter.getObservationReadableValue(\"Blood Pressure (systolic)\");\n    let bpDia = programEncounter.getObservationReadableValue(\"Blood Pressure (Diastolic)\");\n\n\n    var allComplication = [];\n    if (_.includes(complication, 'CVA (Stroke)')) {\n        allComplication.push('CVA (Stroke)');\n    }\n    if (_.includes(complication, 'Cardiomyopathy')) {\n        allComplication.push('Cardiomyopathy');\n    }\n    if (_.includes(complication, 'Gastropathy')) {\n        allComplication.push('Gastropathy');\n    }\n    if (_.includes(complication, 'MI')) {\n        allComplication.push('MI');\n    }\n    if (_.includes(complication, 'Infection')) {\n        allComplication.push('Infection');\n    }\n    if (_.includes(complication, 'Nepropathy')) {\n        allComplication.push('Nepropathy');\n    }\n    if (bpSys > 140 || bpDia > 120) {\n        allComplication.push('HTN');\n    }\n    if (_.includes(eye, 'Abnormal vision (Lt. eye)') || _.includes(eye, 'Abnormal vision (Rt. eye)')) {\n        allComplication.push('Retinopathy');\n    }\n    if (_.includes(charting, 'Sensory neuropathy') && _.includes(foot, 'Ulcer')) {\n        allComplication.push('Diabetic food');\n    }\n    const value = allComplication.toString();\n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n};",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "fba77db3-966e-43cf-a44e-e4b545728d08",
    "name" : "Assessment",
    "displayOrder" : 8.0,
    "display" : "Assessment",
    "formElements" : [ {
      "name" : "Sugar control 1",
      "uuid" : "fada1a4b-89c6-4876-8bf3-9d71f9b433cf",
      "keyValues" : [ ],
      "concept" : {
        "name" : "sugar  1",
        "uuid" : "8df5671b-1f60-48b8-ad33-69969c23aae2",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Controlled",
          "uuid" : "6c5c489f-0d19-4207-aea2-08fd5c4dc7d9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Not controlled",
          "uuid" : "f1f315f7-7a1f-4e6e-9eae-8ae950b5ba86",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Partially controlled",
          "uuid" : "4e9fab77-33cf-4c68-86e2-02ed30abbd14",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Sugar control 2",
      "uuid" : "5183afe3-ac64-46f7-ab90-5dc4deec9ec0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Sugar  2",
        "uuid" : "e378c1d9-076d-4cba-a4dc-42defaae8e95",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Controlled",
          "uuid" : "6c5c489f-0d19-4207-aea2-08fd5c4dc7d9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Not controlled",
          "uuid" : "f1f315f7-7a1f-4e6e-9eae-8ae950b5ba86",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Partially controlled",
          "uuid" : "4e9fab77-33cf-4c68-86e2-02ed30abbd14",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Sugar control 3",
      "uuid" : "4d7d071e-ce82-466f-b189-ac754b13743b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Sugar 3",
        "uuid" : "0d9123c6-0af4-4e44-9cb2-a953ebf2955f",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Controlled",
          "uuid" : "6c5c489f-0d19-4207-aea2-08fd5c4dc7d9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Not controlled",
          "uuid" : "f1f315f7-7a1f-4e6e-9eae-8ae950b5ba86",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Partially controlled",
          "uuid" : "4e9fab77-33cf-4c68-86e2-02ed30abbd14",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    } ],
    "voided" : true,
    "timed" : false
  }, {
    "uuid" : "290f7548-e933-48fe-b53c-d79ece86f8c7",
    "name" : "Counselling",
    "displayOrder" : 9.0,
    "display" : "Counselling",
    "formElements" : [ {
      "name" : "Diabetes enrolment counselling points",
      "uuid" : "4990c7cb-8d53-433c-a980-e44951ab0765",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Yes" ]
      } ],
      "concept" : {
        "name" : "Counselling points of diabetes enrolment",
        "uuid" : "670d4217-bba4-4a2f-be76-ab387f688c8f",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Counselling done",
      "uuid" : "93dce7f3-bb96-4bd8-bf9a-802f6668ae6d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Counselling Done",
        "uuid" : "fa031cca-7264-420a-b657-0d3d5fc58a9c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "807bebc4-9384-4fa1-ab2b-7640063f221c",
    "name" : "Referral",
    "displayOrder" : 10.0,
    "display" : "Referral",
    "formElements" : [ {
      "name" : "Does patient require referral?",
      "uuid" : "7e613317-c72e-4ab9-88ee-c58f8d5e2262",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Does patient require referral",
        "uuid" : "7583d0ca-15c6-4e4a-9cd3-acfaca7e7b6d",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Place of referral",
      "uuid" : "1de1cfd8-9089-489e-b235-93de96caba11",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Place of referral for NCD",
        "uuid" : "75b9819a-0725-4c7e-94c2-5b5e72e2a2e3",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Community Health Centre",
          "uuid" : "9699d4fd-a67f-4f45-8d3c-df491f27db60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "District Hospital",
          "uuid" : "602e1362-0c44-49d8-ac94-42a741c6273b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Ganiyari Hospital",
          "uuid" : "e9a08867-baca-43ea-85ac-34c06811190b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Medical college",
          "uuid" : "3ab10f93-7267-4469-b81d-1f3d6c6bdc99",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "JSS subcenter",
          "uuid" : "b704eaf7-3cfb-4016-a884-456e1f0b7e62",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "JSS Mobile clinic",
          "uuid" : "af7205fb-a2c5-45cd-8738-5baec4c02c98",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "PHC",
          "uuid" : "43449534-1e2b-45de-8a5d-d99d13f3321f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Does patient require referral').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Place of referral",
      "uuid" : "ec352fcb-9028-4271-b4dc-6e1fdcfd12e2",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "VHW", "SHW" ]
      } ],
      "concept" : {
        "name" : "Place of referral",
        "uuid" : "80fccb06-a62f-43e8-92eb-358bdb600079",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        }, {
          "name" : "Community Health Centre",
          "uuid" : "9699d4fd-a67f-4f45-8d3c-df491f27db60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Ganiyari",
          "uuid" : "41f067f3-48a0-4f95-aee5-dcee95a8b9de",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Sub Center",
          "uuid" : "31a0f7f1-7b23-4436-ae0a-0a982c11077c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Medical college",
          "uuid" : "3ab10f93-7267-4469-b81d-1f3d6c6bdc99",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "VHW",
          "uuid" : "355143bf-b812-4ec8-93e6-6795fe4f7dc9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "SHW",
          "uuid" : "7ac0d9a2-ff82-41e6-9f38-134904d476f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "District Hospital",
          "uuid" : "602e1362-0c44-49d8-ac94-42a741c6273b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Does patient require referral').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Other place of referral",
      "uuid" : "09a31112-28ea-4138-b783-a5dc09ded613",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other place of referral",
        "uuid" : "d169efa9-49af-4c84-ae09-b1b7296c62da",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Place of referral for NCD').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Referral reason",
      "uuid" : "8f15c081-a3a2-47d5-a194-edb9f166540a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Diabetes followup referral reason",
        "uuid" : "3a824c43-648c-42ff-b553-b995f38ea1ee",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Annual check",
          "uuid" : "d8e670a1-55e2-4ea0-9a8e-73f1034fb947",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Consultation with specialist",
          "uuid" : "da91746d-cc9b-4112-801f-ec3fec719886",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Lab and other investigation work up",
          "uuid" : "f02354c0-780a-4996-bb37-9cfbaa0fe931",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Doctors consultation",
          "uuid" : "6aa41619-2316-4f1a-b908-c07c04008f4d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Admission",
          "uuid" : "397c8d3a-9711-4750-88cf-f709b54f8da8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Does patient require referral').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Specify other",
      "uuid" : "db3b686f-8a8b-4566-be5b-a65e7bf3961e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other referral reason",
        "uuid" : "e048675e-eb86-41c2-a47b-aecfa9a3bb8c",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Diabetes followup referral reason').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "c9f5b55d-02d0-41f5-b0c4-6448a5180b68",
    "name" : "Next visit",
    "displayOrder" : 11.0,
    "display" : "Next visit",
    "formElements" : [ {
      "name" : "Notes",
      "uuid" : "c213ea52-93aa-45c6-af63-16a6edbd1523",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Notes for diabetes follow up",
        "uuid" : "d6192f3b-eb60-4ad6-b8e9-0b8ff91a615c",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Date of next visit (Support or Mobile)",
      "uuid" : "36ddd0a0-73c5-4269-9cc3-3c37dd79e985",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Date of next visit",
        "uuid" : "7a1d6893-f96b-4647-b274-bb78fd369185",
        "dataType" : "Date",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const moment = imports.moment;\n  const formElement = params.formElement;\n  const _ = imports.lodash;\n  let visibility = true;\n  let value = null;\n  let answersToSkip = [];\n  let validationErrors = [];\n  \n  const condition11 = new imports.rulesConfig.RuleCondition({programEncounter, formElement}).when.valueInEncounter(\"7a1d6893-f96b-4647-b274-bb78fd369185\").lessThan(moment().startOf('day').toDate()).matches();\n  \n  if(condition11 ){\n    validationErrors.push(\"Date cannot be in the past\");  \n}\n  \n  return new imports.rulesConfig.FormElementStatus(formElement.uuid, visibility, value, answersToSkip, validationErrors);\n};",
      "mandatory" : true
    } ],
    "timed" : false
  } ],
  "decisionRule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const decisions = params.decisions;\n    const medComplicationsBuilder = new imports.rulesConfig.complicationsBuilder({\n        programEncounter: programEncounter,\n        complicationsConcept: 'Diabetes medicines'\n    });\n\n    const latestCompComplicationsBuilder = new imports.rulesConfig.complicationsBuilder({\n        programEncounter: programEncounter,\n        complicationsConcept: 'Diabetes latest complications'\n    });\n\n    const newComplications = programEncounter.getObservationReadableValue('Any new complications');\n    const lastComplications = programEncounter.programEnrolment.findLatestObservationFromPreviousEncounters('Any new complications', programEncounter);\n\n    var compArr = [];\n    if (!_.isEmpty(lastComplications) && !_.includes(lastComplications.getReadableValue(), 'None')) {\n        if (lastComplications.getReadableValue()) {\n            compArr = _.uniq(_.concat(newComplications, lastComplications.getReadableValue()));\n        }\n    } else {\n        compArr = newComplications;\n    }\n\n    _.forEach(compArr, comp => {\n        latestCompComplicationsBuilder.addComplication(comp);\n    });\n    decisions.encounterDecisions.push(latestCompComplicationsBuilder.getComplications());\n\n    function addConceptValueToDecision(conceptName) {\n        let observationValue;\n        if (medicalStatus === 'Continue same medicines') {\n            observationValue = programEncounter.programEnrolment.findObservationValueInEntireEnrolment(conceptName, false);\n            observationValue = observationValue ? observationValue.value : undefined;\n        } else {\n            observationValue = programEncounter.observations.filter(obj => obj.concept.name === conceptName)[0]\n            observationValue = observationValue ? observationValue.getReadableValue() : undefined;\n        }\n        if (!_.isEmpty(observationValue)) {\n            decisions.encounterDecisions.push({name: conceptName, value: observationValue})\n        }\n    }\n    \n    let medicalStatus = programEncounter.observations.filter(obj => obj.concept.name === 'Medicine status')[0].getReadableValue();\n    \n    const medTakenDecisionConceptMap = {\n        'metformin': ['Metformin', 'Metformin tablet for how many times a day', 'Metformin tablet for how many days'],\n        'glipizide': ['Glipizide', 'Glipizide tablet for how many times a day', 'Glipizide tablet for how many days'],\n        'tolbutamide': ['Tolbutamide', 'Tolbutamide tablet for how many times a day', 'Tolbutamide tablet for how many days'],\n        'gliclazide': ['Gliclazide', 'Gliclazide tablet for how many times a day', 'Gliclazide tablet for how many days'],\n        'glibenclamide': ['Glibenclamide', 'Glibenclamide tablet for how many times a day', 'Glibenclamide tablet for how many days'],\n        'glimeperide': ['Glimeperide', 'Glimeperide tablet for how many times a day', 'Glimeperide tablet for how many days'],\n        'pyoglitazone': ['Pyoglitazone', 'Pyoglitazone tablet for how many times a day', 'Pyoglitazone tablet for how many days'],\n        'rosiglitazone': ['Rosiglitazone', 'Rosiglitazone tablet for how many times a day', 'Rosiglitazone tablet for how many days'],\n        'ripaglinide': ['Ripaglinide', 'Ripaglinide tablet for how many times a day', 'Ripaglinide tablet for how many days'],\n        'nateglinide': ['Nateglinide', 'Nateglinide tablet for how many times a day', 'Nateglinide tablet for how many days'],\n        'Aspirin': ['Diabetes aspirin', 'Aspirin tablet for how many times a day', 'Aspirin tablet for how many days'],\n        'Atorvastatin': ['Diabetes atorvastatin', 'Atorvastatin tablet for how many times a day', 'Atorvastatin tablet for how many days'],\n        'Enalapril': ['Diabetes enalapril', 'Enalapril tablet for how many times a day', 'Enalapril tablet for how many days'],\n        'losartan': ['Losartan', 'Losartan tablet how many times a day', 'Losartan tablet for how many days'],\n        'B-complex': ['B-complex Strength', 'B-complex tablet for how times per day', 'B-complex tablet for how many days'],\n        'Becadex (multivitamin)': ['Becadex (multivitamin) Strength', 'Becadex (multivitamin) tablet for how times per day', 'Becadex (multivitamin) tablet for how many days'],\n        'Iron (Fersifol)': ['Iron (Fersifol) Strength', 'Iron (Fersifol) tablet for how times per day', 'Iron (Fersifol) tablet for how many days'],\n        'Paracetamol': ['Paracetamol Strength', 'Paracetamol tablet for how times per day', 'Paracetamol tablet for how many days'],\n        'Furoseide': ['Furosemide Strength', 'Furosemide tablet for how times per day', 'Furosemide tablet for how many days'],\n        'Spironolactone': ['Spironolactone Strength', 'Spironolactone tablet for how times per day', 'Spironolactone tablet for how many days'],\n        'Calcium': ['Calcium Strength', 'Calcium tablet for how times per day', 'Calcium tablet for how many days'],\n        'Sitagliptin': ['Sitagliptin Strength', 'Sitagliptin tablet for how times per day', 'Sitagliptin tablet for how many days'],\n        'Saxagliptin': ['Saxagliptin Strength', 'Saxagliptin tablet for how times per day', 'Saxagliptin tablet for how many days'],\n        'Linagliptin': ['Linagliptin Strength', 'Linagliptin tablet for how times per day', 'Linagliptin tablet for how many days'],\n    };\n\n    let medTaken;\n    if (medicalStatus === 'Continue same medicines') {\n        medTaken = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment('Diabetes medicines', false);\n        medTaken = medTaken ? medTaken.getReadableValue() : undefined;\n    } else {\n        medTaken = programEncounter.observations.filter(obj => obj.concept.name === 'Diabetes medicines').map(item => item.getReadableValue())[0];\n    }\n    \n    if (medTaken) {\n        _.forEach(medTaken, med => {\n            medComplicationsBuilder.addComplication(med)\n        });\n    }\n\n    decisions.encounterDecisions.push(medComplicationsBuilder.getComplications());\n\n    _.forEach(medTakenDecisionConceptMap, (conceptNames, medName) => {\n        if (_.includes(medTaken, medName)) {\n            _.forEach(conceptNames, conceptName => {\n                addConceptValueToDecision(conceptName)\n            })\n        }\n    });\n\n    return decisions;\n};",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n        programEncounter\n    });\n\n    const nextVisitDate = programEncounter.getObservationValue('Date of next visit');\n    const isReferralRequired = programEncounter.getObservationReadableValue('Does patient require referral');\n\n    if (programEncounter.earliestVisitDateTime) {\n        scheduleBuilder\n            .add({\n                name: \"Diabetes Followup\",\n                encounterType: \"Diabetes Followup\",\n                earliestDate: imports.moment(nextVisitDate).toDate(),\n                maxDate: imports.moment(nextVisitDate).add(8, 'days').toDate()\n            }).whenItem(!_.isEmpty(nextVisitDate))\n            .is.not.truthy;\n\n        let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n        let HbA1C = programEncounter.programEnrolment.getObservationReadableValue('HbA1C');\n        if (programEncounter.programEnrolment.hasCompletedEncounterOfType('Diabetes lab test')) {\n            let lastEncounterWithConcept = programEncounter.programEnrolment.findLatestPreviousEncounterWithObservationForConcept(programEncounter, 'HbA1C');\n            if(!_.isEmpty(lastEncounterWithConcept)){\n            HbA1C = lastEncounterWithConcept.getObservationReadableValue('HbA1C');\n            }\n            if (lastEncounterWithConcept)\n                lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n        }\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n            .diff(imports.moment(lastEncounterDateTime), 'months', true);\n\n\n        if (HbA1C <= 6) {\n            console.log('1HbA1C---->', HbA1C);\n            if (lastConceptDataCollected >= 6) {\n                scheduleBuilder\n                    .add({\n                        name: \"Lab test form\",\n                        encounterType: \"Diabetes lab test\",\n                        earliestDate: imports.moment(programEncounter.encounterDateTime).add(2, 'days').toDate(),\n                        maxDate: imports.moment(programEncounter.encounterDateTime).add(7, 'days').toDate()\n                    });\n            }\n        } else if (lastConceptDataCollected >= 3) {\n            scheduleBuilder\n                .add({\n                    name: \"Lab test form\",\n                    encounterType: \"Diabetes lab test\",\n                    earliestDate: imports.moment(programEncounter.encounterDateTime).add(2, 'days').toDate(),\n                    maxDate: imports.moment(programEncounter.encounterDateTime).add(7, 'days').toDate()\n                });\n        }\n\n\n        if (isReferralRequired) {\n            scheduleBuilder\n                .add({\n                    name: \"Referral Status-1\",\n                    encounterType: \"Diabetes referral status\",\n                    earliestDate: imports.moment(programEncounter.encounterDateTime).add(3, 'days').toDate(),\n                    maxDate: imports.moment(programEncounter.encounterDateTime).add(5, 'days').toDate()\n                }).whenItem(isReferralRequired === 'Yes')\n                .is.truthy;\n        }\n\n    }\n    return scheduleBuilder.getAll();\n};",
  "validationRule" : "",
  "checklistsRule" : "",
  "decisionConcepts" : [ {
    "name" : "Diabetes latest complications",
    "uuid" : "6dbd23fe-f079-4165-8f3d-17c4310ababf",
    "dataType" : "Coded",
    "answers" : [ {
      "name" : "TB",
      "uuid" : "7943642f-c96f-4de6-a470-b9cb0b45feb0",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 6.0,
      "active" : true
    }, {
      "name" : "Nepropathy",
      "uuid" : "7737167f-f770-4662-ba9d-e58c223ec796",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 9.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "HTN",
      "uuid" : "b718b8ed-f794-430f-a9e9-f7296cfb054b",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 1.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "Cardiomyopathy",
      "uuid" : "914b2bc6-fc13-40e8-8376-f37c9740c036",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 5.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "Infection",
      "uuid" : "e668ceed-92ee-4b2f-8714-72838f11264b",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 10.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "MI",
      "uuid" : "a7227284-3384-413c-b6a9-57c3bba2ec29",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 4.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "Neuropathy",
      "uuid" : "0425d34f-f8c2-4cab-bf1b-1fec69fd4e7f",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 2.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "CVA (Stroke)",
      "uuid" : "5c0585f8-632d-4639-91f2-d08331ada0a9",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 0.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "None",
      "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 11.0,
      "active" : true
    }, {
      "name" : "Other",
      "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 12.0,
      "active" : true
    }, {
      "name" : "Gastropathy",
      "uuid" : "e17eab12-23fa-4514-a628-989074cf8ea0",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 8.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "Followup not done",
      "uuid" : "84c5f730-0152-4974-8105-ede182f82dae",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 13.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "Retinopathy",
      "uuid" : "6f051f8d-876e-4be4-8896-374f774381c6",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 3.0,
      "active" : true,
      "keyValues" : [ ]
    }, {
      "name" : "Diabetic foot",
      "uuid" : "28bfec4f-5a47-4a46-9f85-6e41f731eb40",
      "dataType" : "NA",
      "answers" : [ ],
      "order" : 7.0,
      "active" : true,
      "keyValues" : [ ]
    } ],
    "active" : true,
    "keyValues" : [ ]
  } ]
}