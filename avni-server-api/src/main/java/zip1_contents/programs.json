[ {
  "name" : "Tuberculosis",
  "uuid" : "ca85f732-a277-44ab-8c57-32e79efba7a1",
  "colour" : "#E4287C",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : null,
  "enrolmentSummaryRule" : "'use strict';\n\n({params, imports}) => {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n    const _ = imports.lodash;\n\n    //let weightTrend = [];\n    const startDate = programEnrolment.getObservationReadableValue(\"Treatment Start date\");\n    if (startDate) {\n        summaries.push({name: 'Treatment start date', value: imports.moment(startDate).format(\"DD-MM-YYYY\")});\n    }\n\n    const treatmentCompDate = programEnrolment.getObservationReadableValue(\"Expected treatment completion date\");\n    if (treatmentCompDate) {\n        summaries.push({\n            name: 'Expected Treatment completion date',\n            value: imports.moment(treatmentCompDate).format(\"DD-MM-YYYY\")\n        });\n    }\n\n    const tbType = programEnrolment.getObservationReadableValue(\"TB type\");\n    if (tbType) {\n        summaries.push({name: 'Disease (TB Type)', value: tbType});\n    }\n\n    const enlSputum = programEnrolment.getObservationReadableValue(\"If pulmonary TB, sputum status\");\n    if (enlSputum) {\n        summaries.push({name: 'Sputum', value: enlSputum});\n    }\n\n    const tbPlace = programEnrolment.getObservationReadableValue(\"Extrapulmonary, place of TB\");\n    if (tbPlace) {\n        summaries.push({name: 'Place of extrapulmonary TB', value: tbPlace});\n    }\n\n    const patientType = programEnrolment.getObservationReadableValue(\"TB Patient type\");\n    if (patientType) {\n        summaries.push({name: 'Type of Patient', value: patientType});\n    }\n\n    const enlWeight = programEnrolment.getObservationReadableValue(\"Weight\");\n    if (enlWeight) {\n        summaries.push({name: 'Weight during enrollment', value: enlWeight});\n    }\n\n    const enlBMI = programEnrolment.getObservationReadableValue(\"BMI\");\n    if (enlBMI) {\n        summaries.push({name: 'BMI during enrollment', value: enlBMI});\n    }\n\n    if (programEnrolment.hasObservation(\"Comorbidity\")){\n        const comorbidity = programEnrolment.getObservationReadableValue(\"Comorbidity\");\n        if (comorbidity) {\n            summaries.push({name: 'Comorbidity from Enrolment', value: comorbidity});\n        }\n    }\n\n    const phase = programEnrolment.findLatestObservationInEntireEnrolment(\"Treatment phase type\");\n    if (phase) {\n        summaries.push({name: 'Current treatment phase', value: phase.getReadableValue()});\n    }\n\n    let allDrugs = '';\n    const drugs = programEnrolment.findLatestObservationInEntireEnrolment(\"Drugs\");\n    const otherDrugs = programEnrolment.findLatestObservationInEntireEnrolment(\"Other drugs\");\n    if (_.includes(drugs.getReadableValue(), 'Other') && otherDrugs) {\n        allDrugs = `${drugs.getReadableValue()}','${otherDrugs.getReadableValue()}`\n    } else {\n        allDrugs = drugs.getReadableValue();\n    }\n    console.log('allDrugs===>',allDrugs);\n    if (allDrugs) {\n        summaries.push({name: 'drugs', value: allDrugs});\n    }\n\n\n    // if (programEnrolment.hasObservation(\"Weight\"))\n    //     weightTrend.push({Weight: programEnrolment.getObservationReadableValue(\"Weight\")});\n\n    // _.chain(programEnrolment.getEncounters(true))\n    //     .sortBy(\"earliestVisitDateTime\")\n    //     .map((encounter) => {\n    //         if (!_.isNil(encounter.encounterDateTime)) {\n    //             weightTrend.push({Weight: encounter.getObservationReadableValue(\"Weight\")})\n    //         }\n    //     }).value();\n\n    //if (!_.isNil(weightTrend) && !_.isEmpty(weightTrend)) {\n    //   summaries.push({name: 'Weight trend', value: _.join((_.map(weightTrend, \"Weight\")), '|')});\n    //}\n\n    let bmiTrend = [];\n\n    if (programEnrolment.hasObservation(\"BMI\"))\n        bmiTrend.push({BMI: programEnrolment.getObservationReadableValue(\"BMI\")});\n\n    _.chain(programEnrolment.getEncounters(true))\n        .sortBy(\"earliestVisitDateTime\")\n        .map((encounter) => {\n            if (!_.isNil(encounter.encounterDateTime)) {\n                bmiTrend.push({BMI: encounter.getObservationReadableValue(\"BMI\")})\n            }\n        }).value();\n\n    if (!_.isNil(bmiTrend) && !_.isEmpty(bmiTrend)) {\n        summaries.push({name: 'BMI trend', value: _.join((_.map(bmiTrend, \"BMI\")), '|')});\n    }\n\n    const compliance = programEnrolment.findLatestObservationInEntireEnrolment(\"Compliance of previous month\");\n    if (compliance) {\n        summaries.push({name: 'Compliance', value: compliance.getReadableValue()});\n    }\n\n    const sideEffect = programEnrolment.findLatestObservationInEntireEnrolment(\"Side effects of medicines\");\n    if (sideEffect) {\n        summaries.push({name: 'Side effects', value: sideEffect.getReadableValue()});\n    }\n\n    const cbnaat = programEnrolment.findLatestObservationInEntireEnrolment(\"CBNAAT\");\n    const lpa = programEnrolment.findLatestObservationInEntireEnrolment(\"LPA\");\n    const lj = programEnrolment.findLatestObservationInEntireEnrolment(\"LJ\");\n    let resistanrDrugs = [];\n    if (cbnaat && _.isEqual(cbnaat.getReadableValue(), 'RIF resistant')) {\n        resistanrDrugs.push('CBNAAT:-RIF resistant')\n    }\n    if (lpa && _.isEqual(lpa.getReadableValue(), 'RIF resistant')) {\n        resistanrDrugs.push('LPA:-RIF resistant')\n    }\n    if (lj && _.isEqual(lj.getReadableValue(), 'RIF resistant')) {\n        resistanrDrugs.push('LJ:-RIF resistant')\n    }\n\n    if (!_.isEmpty(resistanrDrugs)) {\n        summaries.push({name: 'Drug resistant', value: resistanrDrugs.toString()});\n    }\n\n    const rbs = programEnrolment.findLatestObservationInEntireEnrolment(\"RBS\");\n    const alt = programEnrolment.findLatestObservationInEntireEnrolment(\"ALT\");\n    const hiv = programEnrolment.findLatestObservationInEntireEnrolment(\"HIV/AIDS Test\");\n    let comorbidities = [];\n    if (rbs && rbs.getReadableValue() > 160) {\n        comorbidities.push('RBS')\n    }\n    if (alt && alt.getReadableValue() > 35) {\n        comorbidities.push('ALT')\n    }\n    if (hiv && _.isEqual(hiv, 'Positive')) {\n        comorbidities.push('HIV Positive')\n    }\n    if (!_.isEmpty(comorbidities)) {\n        comorbidities.push({name: 'New comorbidity', value: comorbidities.toString()});\n    }\n\n    const patientStatus = programEnrolment.findLatestObservationInEntireEnrolment(\"Patient treatment status\");\n    if (patientStatus) {\n        summaries.push({name: 'Patient Treatment Status', value: patientStatus.getReadableValue()});\n    }\n\n    const treatExtend = programEnrolment.findLatestObservationInEntireEnrolment(\"For how many months\");\n    if (treatExtend) {\n        summaries.push({name: 'Treatment extended', value: treatExtend.getReadableValue()});\n    }\n\n\n    if (!_.isEqual(programEnrolment.individual.groups[0], undefined)) {\n        var groupEnc = programEnrolment.individual.groups[0].groupSubject.encounters;\n        var schedule = _.chain(groupEnc)\n            .filter(e => _.isEqual(e.encounterType.name, 'TB Family Screening Form') === true)\n            .value();\n\n        if (!_.isEmpty(schedule)) {\n            summaries.push({name: 'Family screening status', value: \"Done\"});\n        } else {\n            summaries.push({name: 'Family screening status', value: \"Not done\"});\n        }\n    } else {\n        summaries.push({name: 'Family screening status', value: \"Not done\"});\n    }\n\n    if (!_.isEqual(programEnrolment.individual.relationships, undefined)) {\n        let indiRelation = programEnrolment.individual.relationships;\n        var childCount = _.chain(indiRelation)\n            .filter(e => _.isEqual(imports.moment().diff(e.individualA.dateOfBirth, 'years')) < 5)\n            .value();\n\n        if (!_.isEmpty(childCount)) {\n            summaries.push({name: 'No of children on INH prophylaxis', value: _.size(childCount)});\n        }\n    }\n\n\n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Hypertension",
  "uuid" : "d43bd6f0-0b6d-48ec-b710-2c5359f1e611",
  "colour" : "#00dcff",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : null,
  "enrolmentSummaryRule" : "'use strict';\n({params, imports}) =>  {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n\n     //BP\n     const bpSys = programEnrolment.findLatestObservationInEntireEnrolment('Blood Pressure (systolic)');\n     const bpDia = programEnrolment.findLatestObservationInEntireEnrolment('Blood Pressure (Diastolic)');\n     \n    if (bpSys) {\n      const bpSysValue = bpSys.getValue();\n      const bpDiaValue = bpDia.getValue();\n      const finalBP=`${bpSysValue}/${bpDiaValue}`;\n      summaries.push({name: 'BP', value: finalBP});\n    }\n    //\n    //findLatestObservationFromEncounters\n    //Compliance with previous month\n     const compliance = programEnrolment.findLatestObservationInEntireEnrolment('Compliance with previous month');\n    if (compliance) {\n     summaries.push({name: 'Compliance with previous month', value: compliance.getValue()});\n    }\n    \n     //Tobacco/Alcohol intake of previous month\n     const intake = programEnrolment.findLatestObservationInEntireEnrolment('Tobacco/Alcohol intake of previous month');\n    if (intake) {\n     summaries.push({name: 'Tobacco/Alcohol intake of previous month', value: intake.getValue()});\n    }\n    \n    //Existing Complications\n     const existingComplications = programEnrolment.findLatestObservationInEntireEnrolment('Existing Complications');\n    if (existingComplications) {\n      summaries.push({name: 'Existing Complications', value: existingComplications.getValue()});\n    }\n    \n    //New complications\n     const complications = programEnrolment.findLatestObservationInEntireEnrolment('New htn complications');\n    if (complications) {\n      summaries.push({name: 'New complications', value: complications.getValue()});\n    }\n    \n    //Creatinin\n     const creatinin = programEnrolment.findLatestObservationInEntireEnrolment('Creatinin');\n    if (creatinin) {\n     summaries.push({name: 'Creatinin', value: creatinin.getValue()});\n    }\n    \n    //RBS\n     const rbs = programEnrolment.findLatestObservationInEntireEnrolment('RBS');\n    if (rbs) {\n     summaries.push({name: 'RBS', value: rbs.getValue()});\n    }\n    \n    //Cholesterol\n     const cholesterol = programEnrolment.findLatestObservationInEntireEnrolment('Cholesterol');\n    if (cholesterol) {\n     summaries.push({name: 'Cholesterol', value: cholesterol.getValue()});\n    }\n    \n    //Disease status\n     const status = programEnrolment.findLatestObservationInEntireEnrolment('Disease status');\n    if (status) {\n     summaries.push({name: 'Disease status', value: status.getValue()});\n    }\n    \n    //Medicines taken\n     const medicines = programEnrolment.findLatestObservationInEntireEnrolment('Medicines taken');\n    if (medicines) {\n     summaries.push({name: 'Medicines taken', value: medicines.getValue()});\n    }\n \n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Child",
  "uuid" : "6bb43253-7611-47be-9c11-bae31de76091",
  "colour" : "green",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const individual = params.entity;\n  //sample condition individual.isFemale() && ;individual.getAgeInYears() < 5;\n  return individual.getAgeInYears() < 15;\n};",
  "enrolmentSummaryRule" : null,
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "TB - INH Prophylaxis",
  "uuid" : "b0bef9c9-eb25-459b-b6a3-52d1268d8f22",
  "colour" : "#78c624",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const individual = params.entity;\n  //sample condition individual.isFemale() && individual.getAgeInYears() > 5;\n  return individual.getAgeInYears() <= 5;\n};",
  "enrolmentSummaryRule" : "'use strict';\n({params, imports}) =>  {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n    \n    const treatmentStart = programEnrolment\n    .findObservationInEntireEnrolment('Start date of INH prophylaxis').getReadableValue();\n   if(treatmentStart){\n    var treatmentStartDate = imports.moment(treatmentStart).toDate();\n    summaries.push({name: 'Treatment Start date', value: treatmentStartDate});\n   }\n   \n   const treatmentEnd = programEnrolment\n    .findObservationInEntireEnrolment('Treatment end date of INH prophylaxis').getReadableValue();\n   if(treatmentEnd){\n    var treatmentEndDate = imports.moment(treatmentEnd).toDate();\n    summaries.push({name: 'Expected treatment completion date', value: treatmentEndDate});\n   }\n    \n   const latestSymptoms = programEnrolment.findLatestObservationFromEncounters('Is child having TB related symptoms like weight loss, loss of appetite, lymph-node growth etc');\n   if(latestSymptoms){\n   var latestSymptomsValue = latestSymptoms.getValue();\n   summaries.push({name: 'Child is having TB related symptoms', value: latestSymptomsValue});\n  }\n   \n    //Weight\n     const weightAtEnrolment = programEnrolment.findObservation('Weight');\n    if (weightAtEnrolment) {\n      summaries.push({name: 'Weight', value: weightAtEnrolment.getValue()});\n    }\n    \n     //Weight\n     const weightLatest = programEnrolment.findLatestObservationFromEncounters('Weight');\n    if (weightLatest) {\n      summaries.push({name:'Current Weight', value: weightLatest.getValue()});\n   }\n    \n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Sickle cell",
  "uuid" : "4f740283-3f1c-4538-8b0a-e976aff4d76b",
  "colour" : "#300e0e",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n    const _ = imports.lodash;\n    //value can be fetched from entire enrolment using programEnrolment.findObservationInEntireEnrolment(CONCEPT_NAME);\n    const compliance = programEnrolment.findLatestObservationInEntireEnrolment('Compliance of previous month');\n    const bmi = programEnrolment.findLatestObservationInEntireEnrolment('BMI');\n    const hospitalReason = programEnrolment.findLatestObservationInEntireEnrolment('Reason for hospitalization');\n    const complications = programEnrolment.findLatestObservationInEntireEnrolment('Sickle cell complications');\n    const hb = programEnrolment.findLatestObservationInEntireEnrolment('Hb');\n    const mcv = programEnrolment.findLatestObservationInEntireEnrolment('MCV');\n    const tlc = programEnrolment.findLatestObservationInEntireEnrolment('TLC');\n    const status = programEnrolment.findLatestObservationInEntireEnrolment('Disease status');\n\n    if (bmi) {\n        summaries.push({name: 'BMI', value: bmi.getValue()});\n    }\n    if (!_.isEqual(compliance, undefined)) {\n        summaries.push({name: 'Compliance of previous month', value: compliance.getValue()});\n    }\n    if (!_.isEqual(hospitalReason, undefined)) {\n        summaries.push({name: 'Reason for Hospitalization', value: hospitalReason.getReadableValue()});\n    }\n    if (!_.isEqual(complications, undefined)) {\n        summaries.push({name: 'Current Complications', value: complications.getReadableValue()});\n    }\n    if (hb) {\n        summaries.push({name: 'Hb', value: hb.getValue()});\n    }\n    if (mcv) {\n        summaries.push({name: 'MCV', value: mcv.getValue()});\n    }\n    if (tlc) {\n        summaries.push({name: 'TLC', value: tlc.getValue()});\n    }\n    if (!_.isEqual(status, undefined)) {\n        summaries.push({name: 'Current status of patient', value: status.getValue()});\n    }\n\n\n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Stroke",
  "uuid" : "46c3c8e9-db7d-4ac6-89e4-6943d79a3945",
  "colour" : "#a3b86c",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "NCD (voided~47)",
  "uuid" : "2128fcbb-2309-4e0b-8b01-8022f13fcffa",
  "colour" : "#2B1B17",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : null,
  "enrolmentSummaryRule" : null,
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Mental Illness",
  "uuid" : "de255114-6293-45cd-809c-bf9583dbaa06",
  "colour" : "#107896",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Heart Disease",
  "uuid" : "379b20ca-7471-434f-a9cf-c970157c6d5b",
  "colour" : "#3c6478",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Asthma",
  "uuid" : "cdc934a7-15aa-4412-a377-ae4509e10f46",
  "colour" : "#12878a",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Cancer",
  "uuid" : "aada5b5a-c201-4006-8e63-04ce8126573e",
  "colour" : "#d3b53d",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Thyroidism",
  "uuid" : "1bfd4186-3720-4068-9af8-20be129b2fe3",
  "colour" : "#488a99",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Arthritis",
  "uuid" : "43cdd363-e7f7-4c32-9049-68eaf24b25f4",
  "colour" : "#6ba187",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "COPD",
  "uuid" : "9c49ae95-d8d6-4873-afdc-b3f127db475a",
  "colour" : "#c2571a",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Demography (voided~127)",
  "uuid" : "d8231465-b5ec-4930-8fdf-49905670180a",
  "colour" : "#ff0000",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Diabetes",
  "uuid" : "bb6d2112-1e45-45af-971a-de84f0602826",
  "colour" : "#9500ff",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n    //value can be fetched from entire enrolment using programEnrolment.findObservationInEntireEnrolment(CONCEPT_NAME);\n    const compliance = programEnrolment.findLatestObservationInEntireEnrolment('Compliance of previous month');\n    const encAddiction = programEnrolment.findLatestObservationInEntireEnrolment('Type of habit');\n    const enlAddiction = programEnrolment.getObservationReadableValue('Any addiction');\n    let encAdd = '';\n    if (encAddiction) {\n        encAdd = encAddiction.getReadableValue();\n    }\n    const addiction = encAdd || enlAddiction;\n\n    const enlComplications = programEnrolment.getObservationReadableValue('Diabetes existing complications');\n    const encComplications = programEnrolment.findLatestObservationInEntireEnrolment('Current Complications');\n    let encCompl = '';\n    if (encComplications) {\n        encCompl = encComplications.getReadableValue();\n    }\n    const complications = encCompl + ', ' + enlComplications;\n\n    const enlPP2BS = programEnrolment.getObservationReadableValue('Baseline PP2BS');\n    const encPP2BSObs = programEnrolment.findLatestObservationInEntireEnrolment('PP2BS');\n    let encPP2BS = '';\n    if (encPP2BSObs) {\n        encPP2BS = encPP2BSObs.getReadableValue();\n    }\n    const pp2bs = encPP2BS || enlPP2BS;\n\n\n    const enlFBS = programEnrolment.getObservationReadableValue('Baseline FBS');\n    const encFBSObs = programEnrolment.findLatestObservationInEntireEnrolment('FBS');\n    let encFBS = '';\n    if (encFBSObs) {\n        encFBS = encFBSObs.getReadableValue();\n    }\n    const fbs = encFBS || enlFBS;\n\n\n    const creatinin = programEnrolment.findLatestObservationInEntireEnrolment('Sr. Creatinin');\n    const HbA1C = programEnrolment.findLatestObservationInEntireEnrolment('HbA1C');\n    const sugar1 = programEnrolment.findLatestObservationInEntireEnrolment('Sugar control 1');\n    const sugar2 = programEnrolment.findLatestObservationInEntireEnrolment('Sugar control 2');\n    const sugar3 = programEnrolment.findLatestObservationInEntireEnrolment('Sugar control 3');\n    const medicine = programEnrolment.findLatestObservationInEntireEnrolment('Diabetes medicines');\n    const newComplication = programEnrolment.findLatestObservationInEntireEnrolment('Any new complications');\n\n    //Compliance with previous month\n    if (compliance) {\n        summaries.push({name: 'Compliance of previous month', value: compliance.getValue()});\n    }\n    if (addiction != 'undefined') {\n        summaries.push({name: 'Type of addiction', value: addiction});\n    }\n    if (complications) {\n        summaries.push({name: 'Existing complications', value: complications});\n    }\n    if (newComplication) {\n        summaries.push({name: 'New complication', value: newComplication.getReadableValue()});\n    }\n    if (creatinin) {\n        summaries.push({name: 'Last creatinin', value: creatinin.getValue()});\n    }\n    if (pp2bs) {\n        summaries.push({name: 'Last PP2BS', value: pp2bs});\n    }\n    if (fbs) {\n        summaries.push({name: 'Last FBS', value: fbs});\n    }\n    if (HbA1C) {\n        summaries.push({name: 'HbA1C', value: HbA1C.getValue()});\n    }\n    if (sugar1) {\n        summaries.push({name: 'Sugar control 1', value: sugar1.getValue()});\n    }\n    if (sugar2) {\n        summaries.push({name: 'Sugar control 2', value: sugar2.getValue()});\n    }\n    if (sugar3) {\n        summaries.push({name: 'Sugar control 3', value: sugar3.getValue()});\n    }\n    if (medicine) {\n        summaries.push({name: 'Medication', value: medicine.getReadableValue()});\n    }\n\n\n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Pregnancy",
  "uuid" : "20016e73-3115-439d-8d8b-3bd4ab5c24b1",
  "colour" : "darkmagenta",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const individual = params.entity;\n  //sample condition \n  return individual.isFemale() && individual.getAgeInYears() > 15;\n};",
  "enrolmentSummaryRule" : "'use strict';\n({params, imports}) =>  {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n    const _ = imports.lodash;\n  \n \n   const lmp = programEnrolment.findObservationInEntireEnrolment('Last menstrual period');\n   if(lmp){\n    var lmpDate = imports.moment(lmp.getValue()).toDate();\n    summaries.push({name: 'Last menstrual period', value: lmpDate});\n   }\n\n    const edd = programEnrolment.findObservationInEntireEnrolment('EDD');\n     if (edd) {\n     var eddDate = imports.moment(edd.getValue()).toDate();\n      summaries.push({name: 'EDD', value: eddDate});\n    }\n  \n    //Weight\n     const weight = programEnrolment.findObservationInEntireEnrolment('Weight');\n    if (weight) {\n      summaries.push({name: 'Weight', value: weight.getValue()});\n    }\n\n   //BMI\n     const bmi = programEnrolment.findObservationInEntireEnrolment('BMI');\n    if (bmi) {\n      summaries.push({name: 'BMI', value: bmi.getValue()});\n    }\n    //BP\n     const bpSys = programEnrolment.findLatestObservationFromEncounters('Blood Pressure (systolic)');\n     const bpDia = programEnrolment.findLatestObservationFromEncounters('Blood Pressure (Diastolic)');\n     \n    \n     \n    if (bpSys) {\n    const bpSysValue = bpSys.getValue();\n    const bpDiaValue = bpDia.getValue();\n    const finalBP=`${bpSysValue}/${bpDiaValue}`;\n      summaries.push({name: 'BP', value: finalBP});\n    }\n \n\n   //FHS\n     const fhs = programEnrolment.findLatestObservationFromEncounters('FHS');\n    if (fhs) {\n      summaries.push({name: 'FHS', value: fhs.getValue()});\n    }\n    \n    //Hb\n     const Hb = programEnrolment.findLatestObservationFromEncounters('Hb');\n   if (Hb) {\n     summaries.push({name: 'Hb', value: Hb.getValue()});\n    }\n    \n    //Urine Albumin\n     const urineAlbumin = programEnrolment.findLatestObservationFromEncounters('Urine Albumin');\n    if (urineAlbumin) {\n     summaries.push({name: 'Urine Albumin', value: urineAlbumin.getValue()});\n    }\n    \n    //High risk condition in previous pregnancy\n    const highRiskPrevious = programEnrolment.findObservationInEntireEnrolment('High risk condition in previous pregnancy');\n    if (highRiskPrevious) {\n      summaries.push({name: 'High risk condition in previous pregnancy', value: highRiskPrevious.getValue()});\n    }\n    \n   \n    \n   //High Risk Conditions\n  const highRiskEnrolment  = programEnrolment.findLatestObservationFromEncounters('High Risk Conditions') || programEnrolment.findObservationInEntireEnrolment('High Risk Conditions');\n  if (highRiskEnrolment) {\n      summaries.push({name: 'High Risk Conditions', value: highRiskEnrolment.getValue()});\n    }\n    \n//  console.log('summaries',summaries);\n   \n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Phulwari",
  "uuid" : "eb4d392a-87a0-4673-9176-dbd4101505ab",
  "colour" : "darkorange",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const individual = params.entity;\n  //sample condition individual.isFemale() && ;\n  return individual.getAgeInYears() < 15;\n};",
  "enrolmentSummaryRule" : "'use strict';\n({params, imports}) =>  {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n    const _ = imports.lodash;\n    const summaryForObservation = function (conceptName, programEnrolment, summaries) {\n        let observationValue = programEnrolment.findLatestObservationInEntireEnrolment(conceptName);\n        if (!_.isNil(observationValue)) {\n            summaries.push({name: conceptName, value: observationValue.getValue()});\n        }\n    };\n    summaryForObservation(\"Weight for age z-score\", programEnrolment, summaries);\n    summaryForObservation(\"Weight for age Grade\", programEnrolment, summaries);\n    summaryForObservation(\"Weight for age Status\", programEnrolment, summaries);\n\n    summaryForObservation(\"Height for age z-score\", programEnrolment, summaries);\n    summaryForObservation(\"Height for age Grade\", programEnrolment, summaries);\n    summaryForObservation(\"Height for age Status\", programEnrolment, summaries);\n\n    summaryForObservation(\"Weight for height z-score\", programEnrolment, summaries);\n    summaryForObservation(\"Weight for Height Status\", programEnrolment, summaries);\n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
}, {
  "name" : "Epilepsy",
  "uuid" : "4cb3a3dc-aee2-42b6-98c6-82a8bf0fdb97",
  "colour" : "#b5c689",
  "voided" : false,
  "active" : null,
  "enrolmentEligibilityCheckRule" : "",
  "enrolmentSummaryRule" : "'use strict';\n({params, imports}) => {\n    const summaries = [];\n    const programEnrolment = params.programEnrolment;\n    const _ = imports.lodash;\n    //value can be fetched from entire enrolment using programEnrolment.findObservationInEntireEnrolment(CONCEPT_NAME);\n    const compliance = programEnrolment.findLatestObservationInEntireEnrolment('Compliance of previous month');\n    const seizure = programEnrolment.findLatestObservationInEntireEnrolment('How many seizures in last month');\n    const encInjury = programEnrolment.findLatestObservationInEntireEnrolment('Any injury during the seizures?');\n    const enlInjury = programEnrolment.getObservationReadableValue('Any physical injury due to seizures?');\n    const sideEffects = programEnrolment.findLatestObservationInEntireEnrolment('Are there any medicine side effects');\n    const medicine = programEnrolment.findLatestObservationInEntireEnrolment('Epilepsy medicines');\n    let injury=enlInjury;\n    if (!_.isEqual(encInjury, undefined)){\n     injury = encInjury.getReadableValue();\n    }\n\n    if (!_.isEqual(compliance, undefined)) {\n        summaries.push({name: 'Compliance of previous month', value: compliance.getReadableValue()});\n    }\n    if (!_.isEqual(seizure, undefined)) {\n        summaries.push({name: 'Seizures in last month', value: seizure.getReadableValue()});\n    }\n    if (injury) {\n        summaries.push({name: 'Any injury during the seizures', value: injury});\n    }\n    if (!_.isEqual(sideEffects, undefined)) {\n        summaries.push({name: 'Medicine side effects', value: sideEffects.getReadableValue()});\n    }\n    if (!_.isEqual(medicine, undefined)) {\n        summaries.push({name: 'Medicines', value: medicine.getReadableValue()});\n    }\n\n\n    return summaries;\n};",
  "enrolmentEligibilityCheckDeclarativeRule" : null,
  "manualEligibilityCheckRequired" : false,
  "manualEnrolmentEligibilityCheckRule" : null,
  "manualEnrolmentEligibilityCheckDeclarativeRule" : null,
  "allowMultipleEnrolments" : false
} ]