{
  "name" : "Hypertension Followup",
  "uuid" : "4e40fc65-2a68-470f-b6ba-0b0c8b8a691c",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "f9193e0b-1238-466b-b304-cfffe675baed",
    "name" : "Followup details",
    "displayOrder" : 1.0,
    "display" : "Followup details",
    "formElements" : [ {
      "name" : "Place of followup up",
      "uuid" : "0c2edbbe-e089-4f0d-b5b7-7c88838b4151",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Followup not done" ]
      } ],
      "concept" : {
        "name" : "Place of follow up",
        "uuid" : "5b570434-5ef2-4933-8dc7-0e809dbdc2fd",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Ganiyari Hospital",
          "uuid" : "e9a08867-baca-43ea-85ac-34c06811190b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Mobile clinic",
          "uuid" : "b2802bbd-ebc7-4002-a8d8-c068f5eb22da",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Home",
          "uuid" : "1a4f9d04-3dfd-4851-8dfa-62a83f6cf169",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "PSG Meeting",
          "uuid" : "a9ed1d6e-fec3-4bc1-b9c6-946688f1e2cb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Subcenter OPD",
          "uuid" : "352c714d-0a55-4e46-81ee-c14159dbb636",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Followup not done",
          "uuid" : "84c5f730-0152-4974-8105-ede182f82dae",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "b9ad9dd2-6949-424d-9a0c-24ec387a1b2a",
    "name" : "Anthropometry",
    "displayOrder" : 2.0,
    "display" : "Anthropometry",
    "formElements" : [ {
      "name" : "Height",
      "uuid" : "0ff929df-5747-4bce-ba9a-826313cd2140",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Height",
        "uuid" : "23bcad9f-ec16-46ec-92f5-e144411e5dec",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 21.0,
        "highAbsolute" : 300.0,
        "lowNormal" : 30.0,
        "highNormal" : 200.0,
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n\n  if(programEncounter.programEnrolment.individual.getAgeInYears() < 18 ){  \n    if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){\n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Height');\n          \n          if(lastEncounterWithConcept){\n          lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;}\n      }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n           \n           if(lastConceptDataCollected >= 12 ){\n              visibility = true;  }\n  } \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Weight",
      "uuid" : "0b3d3c63-4229-4fd7-8462-fc98b4110105",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Weight",
        "uuid" : "8d947379-7a1d-48b2-8760-88fff6add987",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 300.0,
        "lowNormal" : 1.0,
        "highNormal" : 100.0,
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Weight');\n      \n      if(lastEncounterWithConcept){\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;}\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n         console.log('lastEncounterDateTime',lastEncounterDateTime);\n         console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n           if(lastConceptDataCollected >= 12){\n              visibility = true;  }\n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "BMI",
      "uuid" : "f701d161-084c-4651-beed-b477a2b61c0d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "BMI",
        "uuid" : "a205563d-0ac2-4955-93ac-e2e7adebb56e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 18.5,
        "highNormal" : 24.9,
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \nlet height = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Height\", programEncounter);\nlet weight = programEncounter.findObservation(\"Weight\");\n        height = height && height.getValue();\n        weight = weight && weight.getValue();\n      \n        let value = '';\n        if (_.isFinite(weight) && _.isFinite(height)) {\n         value = imports.common.calculateBMI(weight, height);\n       }\n       \n       \n      let visibility = false;\n      let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Weight');\n          \n      if(lastEncounterWithConcept){\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      }\n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n        if(lastConceptDataCollected >= 12){\n              visibility = true;  }\n  \n         \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, visibility, value);\n  };",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "7f0122cf-9830-4f30-845d-cd950a498288",
    "name" : "Basic details",
    "displayOrder" : 3.0,
    "display" : "Basic details",
    "formElements" : [ {
      "name" : "Any addiction?",
      "uuid" : "9d62e6fd-778f-4069-a89a-6ad160dc72d3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Addiction",
        "uuid" : "fc01f8b8-0c05-4bea-b740-c55571353272",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Bidi",
          "uuid" : "0e425d00-d6b4-4564-ace6-7ec6ef0e83bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "Alcohol",
          "uuid" : "cfa99d0a-ae0e-410f-8475-3d9d6674d8dc",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Cigarette",
          "uuid" : "1dc73953-f93c-4cd8-93d7-950c1c3aaaac",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Others",
          "uuid" : "f3ef9337-b2d9-4e33-9a69-e7692b66f045",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Ganja",
          "uuid" : "e22c2842-b1f0-45d9-9192-000e21b486f6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Tobacco",
          "uuid" : "8d607aa8-c8a8-4fcd-9fc7-06d83c323b3a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "MultiSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Blood Pressure (systolic)",
      "uuid" : "5b02028c-f0dd-4592-bef6-e3217ec78316",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Blood Pressure (systolic)",
        "uuid" : "6874d48e-8c2f-4009-992c-1d3ca1678cc6",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 20.0,
        "highAbsolute" : 190.0,
        "lowNormal" : 90.0,
        "highNormal" : 140.0,
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = true;\n  //false;\n  //let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  //if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n    //  let lastEncounterWithConcept = programEncounter.programEnrolment.\n    //      findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Blood Pressure (systolic)');\n      \n   //   if(lastEncounterWithConcept)\n   //   lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  //}\n    //    let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n     //   .diff(imports.moment(lastEncounterDateTime), 'months', true)\n                \n     //      if(lastConceptDataCollected >= 1) \n     //         visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Blood Pressure (Diastolic)",
      "uuid" : "1dd796ee-ba2f-4b9b-bde2-338bb1cdb197",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Blood Pressure (Diastolic)",
        "uuid" : "da871f6c-cef0-4191-b307-6751b31ac9ec",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 10.0,
        "highAbsolute" : 120.0,
        "lowNormal" : 50.0,
        "highNormal" : 90.0,
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = true; \n  //false;\n  //let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  //if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n    //  let lastEncounterWithConcept = programEncounter.programEnrolment.\n    //      findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Blood Pressure (Diastolic)');\n      \n    //  if(lastEncounterWithConcept)\n    //  lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  //}\n       // let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n       // .diff(imports.moment(lastEncounterDateTime), 'months', true)\n                \n        //   if(lastConceptDataCollected >= 1)\n         //     visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Type of patient",
      "uuid" : "4a19318c-0472-49e9-9b0d-8a0a445bf037",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Type of patient",
        "uuid" : "f6687886-13fc-466e-bdab-07bfd0c8a2b6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Default",
          "uuid" : "01de3d31-cdc7-48da-8d6d-6409e74a452a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "New",
          "uuid" : "8f799ad2-a01c-4325-b01c-5d395a68e17c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "5ead3c0e-4f81-492d-95e4-7c44f7edc95c",
    "name" : "History",
    "displayOrder" : 4.0,
    "display" : "History",
    "formElements" : [ {
      "name" : "Doing well?",
      "uuid" : "c321dbf3-3d69-42e5-92d8-670a9a1c4db4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Doing well?",
        "uuid" : "e4721a46-8949-4268-bb29-8cf8a91b7599",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Any new complaint?",
      "uuid" : "e8e2487d-6db2-4525-ac9b-613eef86dafb",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Has new complaint",
        "uuid" : "65baad37-b8cb-4b43-9968-3a901699d002",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "If yes, specify the new complaint/s",
      "uuid" : "fd537017-8bba-44ec-b641-2a010dc6e592",
      "keyValues" : [ ],
      "concept" : {
        "name" : "New complaint/s",
        "uuid" : "dbdf58f8-cdb0-44ab-822f-dca48a9807ad",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Has new complaint').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "No. of days Medicine taken previous month",
      "uuid" : "4daaf546-4c55-4c65-a832-8c4f4878a4e9",
      "keyValues" : [ ],
      "concept" : {
        "name" : "No. of days medicine taken in previous month",
        "uuid" : "785c085a-c119-4d8a-b9a0-9cfe98ddace6",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 31.0,
        "lowNormal" : 0.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Compliance with previous month",
      "uuid" : "e8ea9020-c548-40ac-8795-0b445f43d809",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Compliance with previous month",
        "uuid" : "e9fbe1ff-27b7-4c46-b242-69068ed3648f",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n    const medsTaken = programEncounter.getObservationValue('No. of days medicine taken in previous month');\n   console.log('medsTaken==>',medsTaken);\n    let displayText = '';\n    if(medsTaken && medsTaken >= 20){   \n       console.log('medsTaken',medsTaken);    \n       displayText = 'Good';\n    }else if (medsTaken && medsTaken < 20){\n       console.log('medsTaken',medsTaken);    \n       displayText = 'Poor';\n    }\n    \n   \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false
    }, {
      "name" : "Taking medicine correctly?",
      "uuid" : "d04533c3-5f06-468c-b37c-7275d352d1df",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Taking medicine correctly?",
        "uuid" : "122dc41e-4de9-47fd-8342-beb572cc1ab1",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Reasons for not taking medicines",
      "uuid" : "90f64bf6-6bec-458f-a275-d06600a7c78e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Reasons for not taking medicines",
        "uuid" : "455f8f23-7e78-45b1-97d2-b0a6bb048f3d",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Taking medicine from govt/private hospital/dispensary",
          "uuid" : "7dfb6b50-46ed-4de0-ba3b-ea4271c27fb2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Wrong dose",
          "uuid" : "92ea2630-f541-4080-a21d-d6d506b5afd3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Forgotten to take medicines",
          "uuid" : "07421483-1b84-49a4-8ea2-2c86474f2f45",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Wrong timing",
          "uuid" : "270e752f-71a8-4d9c-a71b-29d92ba3a869",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Patient dont want to continue medicines from JSS",
          "uuid" : "146cc7de-d124-4e6f-9715-25553adef09f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Side effects of drug",
          "uuid" : "8efb4e0c-2344-4947-a056-267b9f9499f8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Wrong drug",
          "uuid" : "3862f257-f4a9-480e-8c14-6bd9b1be1e6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Not answered",
          "uuid" : "ae021fdc-9767-4fae-9b17-410e7d32e218",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Taking medicine from traditional healer",
          "uuid" : "e377c779-96ff-4277-8e6f-a6370462847e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('No. of days medicine taken in previous month').is.lessThan(20);\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Specify other reason for not taking medicines",
      "uuid" : "529c8400-bbeb-48ee-9901-2d76c9c360ad",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Specify other reason for not taking medicines",
        "uuid" : "0e0496f1-86d4-4cb8-9e87-ba2a1e60174b",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Reasons for not taking medicines').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Any side effects of drugs?",
      "uuid" : "e671d746-c6ef-4b68-b77e-2ef1c77f7d40",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Having any side effects of drug",
        "uuid" : "6b662df4-c8c9-483f-b46c-e89f98f8766f",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Side effects of drugs",
      "uuid" : "f5c6aec9-407b-43d7-a8bc-209d57795806",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other side effects of drugs",
        "uuid" : "cf66bd9d-1a74-47b6-8af8-cbaed18a03b7",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Reasons for not taking medicines').containsAnswerConceptName('Side effects of drug');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Any side effect of drugs?",
      "uuid" : "b484667b-a253-449a-9a9b-0f0c16bd5b59",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Any side effect of drugs",
        "uuid" : "7826f811-aaf7-4bf7-a9d9-26ae3b19f599",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Depression",
          "uuid" : "d53dd9b5-79e2-483e-ac13-4c38049d2927",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Diarrhoea",
          "uuid" : "d4b0f920-e3d4-4ae5-9339-6d466f409c9b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        }, {
          "name" : "Dizziness",
          "uuid" : "2a29c737-9c73-46d5-8a15-32ea9eab7b58",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 13.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Leg swelling",
          "uuid" : "78ae76d2-8de4-4143-8f74-91f29bfecda8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "active" : true
        }, {
          "name" : "Cough",
          "uuid" : "6faa04f7-fa23-4a7d-9b0c-e901ca752b23",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Insomnia",
          "uuid" : "945265f1-7a6e-4ee9-8482-0b2ace717ab5",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Headache",
          "uuid" : "44683953-68ed-4498-81e8-924879c59117",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Palpitations",
          "uuid" : "09a0005f-b448-4a83-83c6-740ba5be90ff",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "active" : true
        }, {
          "name" : "Constipation",
          "uuid" : "3cfe5fce-6f75-4208-bc92-8ce6bf2250ca",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "Lightheaded",
          "uuid" : "327073b7-3f3a-4df7-bd5b-205c6ffba621",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Skin rash",
          "uuid" : "01a6094e-6180-4aba-b254-41d1cb68d1fd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "Weakness",
          "uuid" : "a347dfa4-9e51-4ab4-9a7f-759379b46390",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 11.0,
      "type" : "MultiSelect",
      "mandatory" : true
    }, {
      "name" : "Other side effect of drug",
      "uuid" : "f64ff7fa-cc49-41a3-b33b-6c5ea149b9d1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other side effect of drug",
        "uuid" : "a0ea87f2-eb3c-4f24-9212-557c492730aa",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 12.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n   statusBuilder.show().when.valueInEncounter('Any side effect of drugs').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Are you taking medicines correctly?",
      "uuid" : "333caf4a-dd69-4c43-b4ee-dad832b0ef60",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Are you taking medicines correctly?",
        "uuid" : "4ba160bc-9752-4ed2-9dcd-351269ec8231",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 13.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "What is the problem",
      "uuid" : "543f2add-0b4e-4ad4-8c8e-7fbfcec1094f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "What is the problem for not taking medicines correctly",
        "uuid" : "d86a7171-0afe-4292-84ef-b264ffeba632",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Wrong dose",
          "uuid" : "92ea2630-f541-4080-a21d-d6d506b5afd3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Wrong timing",
          "uuid" : "270e752f-71a8-4d9c-a71b-29d92ba3a869",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Wrong drug",
          "uuid" : "3862f257-f4a9-480e-8c14-6bd9b1be1e6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 14.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Are you taking medicines correctly?').containsAnswerConceptName('No');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Specify other problem",
      "uuid" : "db6e74a0-e860-45b0-b91d-5e308273dccc",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Specify other problem for not taking medicines correctly",
        "uuid" : "f3995f52-bd72-48ec-9e35-052a9b9c52ce",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 15.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n   statusBuilder.show().when.valueInEncounter('What is the problem for not taking medicines correctly').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Patient treatment status",
      "uuid" : "72c28e4b-07b5-42b3-a353-4b069cb8277e",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Patient treatment status (voided~69897)",
        "uuid" : "bde70216-9d70-4662-a514-edbbc32255af",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true,
        "voided" : true
      },
      "displayOrder" : 16.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    let displayText = 'Can not calculate yet';\n    \n    const encounters = programEncounter.programEnrolment.getEncountersOfType('Hypertension Followup');\n\n    console.log('encounters size====>', _.size(encounters));;\n    let enc1 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .nth(0)\n        .value();\n\n    let enc2 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .filter((enc) => !_.isNil(enc.encounterDateTime))\n        .nth(1)\n        .value();\n\n\n    let enc3 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .filter((enc) => !_.isNil(enc.encounterDateTime))\n        .nth(2)\n        .value();\n\n    let enc1Value = -1 , enc2Value= -1 ,enc3Value = -1;\n    \n    if(enc1)\n     enc1Value = enc1.getObservationReadableValue('No. of days medicine taken in previous month');\n    if(enc2)\n     enc2Value = enc2.getObservationReadableValue('No. of days medicine taken in previous month');\n    if(enc3)\n     enc3Value = enc3.getObservationReadableValue('No. of days medicine taken in previous month');\n     \n    console.log(`'enc1==>' ${enc1Value} 'enc 2 ==>' ${enc2Value} 'enc3 ==>' ${enc3Value} `);\n    \n    //\n  if ( enc1Value >= 0 && enc2Value >= 0  && enc3Value >= 0) {\n    if ( enc1Value == 0 && enc2Value == 0  && enc3Value == 0) {\n        displayText = 'Default';\n      }\n    else if (enc1Value < 20 &&  enc2Value < 20 &&  enc3Value < 20) {\n        displayText = 'Break in treatment';\n      } \n    else if ( enc1Value > 20 &&  enc2Value > 20 &&  enc3Value > 20){\n        displayText = 'Treatment not breaking';\n      }\n  }\n\n\n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Patient treatment status",
      "uuid" : "daeb8911-98e3-4533-9f1b-b12d4cb63869",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Patient Treatment Status",
        "uuid" : "39bac4c9-d312-490d-8e1c-2c42da978fea",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 17.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    let displayText = 'Can not calculate yet';\n    \n    const encounters = programEncounter.programEnrolment.getEncountersOfType('Hypertension Followup');\n\n    console.log('encounters size====>', _.size(encounters));;\n    let enc1 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .nth(0)\n        .value();\n\n    let enc2 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .filter((enc) => !_.isNil(enc.encounterDateTime))\n        .nth(1)\n        .value();\n\n\n    let enc3 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .filter((enc) => !_.isNil(enc.encounterDateTime))\n        .nth(2)\n        .value();\n\n    let enc1Value = -1 , enc2Value= -1 ,enc3Value = -1;\n    let enc1ComplianceValue , enc2ComplianceValue, enc3ComplianceValue;\n    \n    if(enc1)\n     enc1Value = enc1.getObservationReadableValue('No. of days medicine taken in previous month');\n    if(enc2)\n     enc2Value = enc2.getObservationReadableValue('No. of days medicine taken in previous month');\n    if(enc3)\n     enc3Value = enc3.getObservationReadableValue('No. of days medicine taken in previous month');\n     \n     if(enc1)\n     enc1ComplianceValue = enc1.getObservationReadableValue('Compliance with previous month');\n    if(enc2)\n     enc2ComplianceValue = enc2.getObservationReadableValue('Compliance with previous month');\n    if(enc3)\n     enc3ComplianceValue = enc3.getObservationReadableValue('Compliance with previous month');\n     \n     \n    console.log(`'enc1==>' ${enc1Value} 'enc 2 ==>' ${enc2Value} 'enc3 ==>' ${enc3Value} `);\n    \n    \n  if ( enc1Value >= 0 && enc2Value >= 0  && enc3Value >= 0) {\n    if ( enc1Value == 0 && enc2Value == 0  && enc3Value == 0) {\n        displayText = 'Default';\n      }\n  }\n  \n //  else if (enc1Value < 20 &&  enc2Value < 20 &&  enc3Value < 20) {\n //    displayText = 'Break in treatment';\n //   } \n // else if ( enc1Value > 20 &&  enc2Value > 20 &&  enc3Value > 20){\n //     displayText = 'Treatment not breaking';\n //   }\n // }\n  if (enc1ComplianceValue !== undefined && enc2ComplianceValue !== undefined && enc3ComplianceValue !== undefined){\n      \n  if(_.isEqual(enc1ComplianceValue,'Poor') && _.isEqual(enc2ComplianceValue,'Poor') && _.isEqual(enc3ComplianceValue,'Poor'))\n      displayText = 'Break in treatment';\n  else if (!_.isEqual(enc1ComplianceValue,'Poor') && !_.isEqual(enc2ComplianceValue,'Poor') && !_.isEqual(enc3ComplianceValue,'Poor'))\n       displayText = 'Treatment not breaking';\n       \n  }\n\n\n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Patient treatment status",
      "uuid" : "1b44e33a-a9cc-4ad9-984c-293a542dd281",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Patients treatment status",
        "uuid" : "77a5d630-7c66-4880-94f0-b552b4e8a7d7",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Can not calculate yet",
          "uuid" : "2c93fb82-d24f-4a59-95b4-78b0eda0b926",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Break in treatment",
          "uuid" : "10275692-2613-4c3a-adea-ad922dee199a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Default",
          "uuid" : "01de3d31-cdc7-48da-8d6d-6409e74a452a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Treatment not breaking",
          "uuid" : "f5384dac-296c-46c1-b957-294d998f6f5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 18.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    let displayText = 'Can not calculate yet';\n    \n    const encounters = programEncounter.programEnrolment.getEncountersOfType('Hypertension Followup');\n\n    console.log('encounters size====>', _.size(encounters));;\n    let enc1 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .nth(0)\n        .value();\n\n    let enc2 = _.chain(encounters)\n        .filter((enc) => enc.encounterDateTime)\n        .filter((enc) => enc.encounterDateTime < programEncounter.encounterDateTime)\n        .filter((enc) => !_.isNil(enc.encounterDateTime))\n        .nth(1)\n        .value();\n\n\n   \n\n    let enc1Value = -1 , enc2Value= -1 ;\n    let enc1ComplianceValue , enc2ComplianceValue;\n    \n    if(enc1){\n     enc1Value = enc1.getObservationReadableValue('No. of days medicine taken in previous month');\n     }\n    if(enc2){\n     enc2Value = enc2.getObservationReadableValue('No. of days medicine taken in previous month');\n     }\n   \n     if(enc1){\n     enc1ComplianceValue = enc1.getObservationReadableValue('Compliance with previous month');\n     }\n    if(enc2){\n     enc2ComplianceValue = enc2.getObservationReadableValue('Compliance with previous month');\n     }\n  \n   \n    \n    \n  if ( enc1Value >= 0 && enc2Value >= 0  ) {\n  console.log('displayText 1');\n    if ( enc1Value == 0 && enc2Value == 0  ) {\n    console.log('displayText 2',displayText);\n        displayText = 'Default';\n      }\n  }\n  \n //  else if (enc1Value < 20 &&  enc2Value < 20 &&  enc3Value < 20) {\n //    displayText = 'Break in treatment';\n //   } \n // else if ( enc1Value > 20 &&  enc2Value > 20 &&  enc3Value > 20){\n //     displayText = 'Treatment not breaking';\n //   }\n // }\n  if (enc1ComplianceValue !== undefined && enc2ComplianceValue !== undefined ){\n       \n  if(_.isEqual(enc1ComplianceValue,'Poor') || _.isEqual(enc2ComplianceValue,'Poor') ){\n      displayText = 'Break in treatment';\n      }\n  else if (!_.isEqual(enc1ComplianceValue,'Poor') && !_.isEqual(enc2ComplianceValue,'Poor') ){\n       displayText = 'Treatment not breaking';\n       }\n  }\n\n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false
    }, {
      "name" : "Tobacco/Alcohol intake of previous month",
      "uuid" : "3f076bd8-d81f-4b2f-895b-cd0e722c4ae3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Tobacco/Alcohol intake of previous month",
        "uuid" : "2dec74fc-a96c-452d-acc4-47bccfbf1e3b",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Started tobacco",
          "uuid" : "5f3730d9-060d-41af-bded-4160d38c012e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Increased",
          "uuid" : "f9001edc-0f9a-4eb3-949c-3238ee8adecb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Decreased",
          "uuid" : "dd14086c-77ca-47d0-9593-d1a1bbfde905",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Started alcohol",
          "uuid" : "b17897c7-35cb-4662-860c-e2be21b78456",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "No tobacco",
          "uuid" : "fbdd0942-cda1-42e5-9e7d-a4204184b52b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Same as before",
          "uuid" : "a1e8ad8d-cccc-4c49-b6c2-e74b8db75f21",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No alcohol  intake",
          "uuid" : "2739370e-a76b-4908-bd86-9fd3dad62b74",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 19.0,
      "type" : "MultiSelect",
      "mandatory" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "6e8a7911-3a7d-47a5-8ed9-bda900b35252",
    "name" : "Physical Exam",
    "displayOrder" : 5.0,
    "display" : "Physical Exam",
    "formElements" : [ {
      "name" : "Date of diagnosis",
      "uuid" : "d0d01978-4ccd-496d-b010-3af479656cf2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Date of diagnosis",
        "uuid" : "cb549d98-5890-4182-a930-70939b0c0e33",
        "dataType" : "Date",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Type of patient').containsAnswerConceptName('New');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "When was hypertension first diagnosed?",
      "uuid" : "73f952a1-8271-4263-b0eb-115af3e7ae9e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Hypertension first diagnosed on",
        "uuid" : "c796dcb6-99e3-4210-a5e4-c432bc472d45",
        "dataType" : "Date",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Type of patient').containsAnswerConceptName('Default');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Existing Complications",
      "uuid" : "87de5b40-66a3-4518-8178-09bc5ec78b25",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Anyother existing complication/Comorbidity",
        "uuid" : "3558fb18-8b84-43ae-b413-bf4514e21d70",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        }, {
          "name" : "Eye/vision related issues",
          "uuid" : "7065bc01-262f-48f1-a15a-7cf0dbcc6784",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Kidney diseases",
          "uuid" : "ddf28da9-e96b-4452-ba2f-637da2831917",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Diabetes",
          "uuid" : "1928469b-a981-4579-beb7-ae47b972e671",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Stroke - Sudden onset",
          "uuid" : "af8e93ce-f9fc-4132-95d4-a0bbcda88a70",
          "dataType" : "Coded",
          "answers" : [ {
            "name" : "Loss of vision",
            "uuid" : "cf7b073e-5060-4e6f-af5b-67f6998d1dec",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 6.0,
            "active" : true
          }, {
            "name" : "Inability to speak or understand",
            "uuid" : "0a3dccae-2635-443c-bb58-e4fc7919e41e",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 3.0,
            "active" : true
          }, {
            "name" : "Severe headache",
            "uuid" : "e37fd2e1-63b5-40ba-a07d-ddff752e9006",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 4.0,
            "active" : true
          }, {
            "name" : "Weakness of one side of body",
            "uuid" : "8a1752b7-0388-4f2f-b579-25a23dd10d64",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 7.0,
            "active" : true
          }, {
            "name" : "Loss of consciousness",
            "uuid" : "604d1ee5-c856-414f-b1ce-b1f8b21caa13",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 5.0,
            "active" : true
          }, {
            "name" : "Unsteadiness of walking",
            "uuid" : "f649609e-474c-466f-91a5-a00dead33e46",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 8.0,
            "active" : true
          }, {
            "name" : "Numbness or clumsiness of one side of body",
            "uuid" : "46913d1c-defd-4b58-a43a-806c08cce840",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 1.0,
            "active" : true
          }, {
            "name" : "Seizures",
            "uuid" : "eba8e941-c0f3-4935-8ac6-124f6d8d1c5f",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 2.0,
            "active" : true
          } ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Heart-related Diseases",
          "uuid" : "aba2df33-f66b-4af7-9ef2-96297b8f892f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "MultiSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Other existing Complications",
      "uuid" : "0240c2b3-2358-419e-b755-a250be5fca7d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Specify complications",
        "uuid" : "1e3456c4-3f34-420e-971d-474354746f95",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Existing Complications').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Face, limbs, speech",
      "uuid" : "f2409988-ad64-4389-9b65-98490c6dc497",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Face, limbs, speech",
        "uuid" : "69f2a455-3bcf-460c-af0c-98036dbd47d9",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No TIA",
          "uuid" : "b9fb939b-3e5b-477f-bb89-30fc4e46c82a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "TIA",
          "uuid" : "59198a64-04eb-4381-85ff-2ae4a9725d4b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Stroke",
          "uuid" : "3df1f936-3407-4a9a-91ae-7eae9e4dc86d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "No stroke",
          "uuid" : "21a2fda2-f733-4b5e-9e14-3b3decb7ae03",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "unique" : true,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Face, limbs, speech');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n        \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Type of stroke",
      "uuid" : "26ffcca3-8821-44a5-8882-171a0fe74482",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Type of stroke",
        "uuid" : "8073a217-ebda-49b8-8477-eb851264f4cc",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Paraplegia",
          "uuid" : "0754b8a9-a6cd-45fa-962f-601e3c316f53",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Monoplegia",
          "uuid" : "b003d1ec-8f28-4a71-8c3c-66b4336a9b12",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Quadriplegia",
          "uuid" : "944c205a-76fb-43c4-9e85-dc7f533c2762",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Hemiplegia",
          "uuid" : "9266d692-b2ab-426e-860e-eed6cab1e577",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Dipelgia",
          "uuid" : "6881062b-36f0-4ccc-b991-47c7abfc8679",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Face, limbs, speech').containsAnswerConceptName('Stroke');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Eye examination",
      "uuid" : "3730e57d-016e-4b3c-993a-3301845f7640",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Eye examination",
        "uuid" : "023eff5b-278a-45b2-b318-5005c38f7b89",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Severe Hypertensive retinopathy,",
          "uuid" : "8047534b-9e8a-414c-aece-d35face9f835",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 15.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Normal vision (Left and Right eye)",
          "uuid" : "aa16ec9d-909c-42a2-bbf1-95f656cc9c87",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true
        }, {
          "name" : "Eye check not done",
          "uuid" : "64013f13-9340-4dad-8b8a-4fcc5981c316",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Moderate Hypertensive retinopathy",
          "uuid" : "44f704d8-b0b6-454e-bd66-92c0ee1899aa",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 14.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Mild Hypertensive retinopathy",
          "uuid" : "86358ab5-2f6b-4588-a73d-e6eda0c7bb41",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 13.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Abnormal vision",
          "uuid" : "e169f4b7-1739-4de4-952d-522167671cf7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "abnormal" : true,
          "active" : true
        }, {
          "name" : "Normal vision",
          "uuid" : "dec01c60-35aa-4939-abd1-36d4951df724",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Abnormal vision (Right eye)",
          "uuid" : "8936c71f-8066-49c6-871a-ae138b4f8584",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Normal vision (Right eye)",
          "uuid" : "36755147-828a-4a4b-9754-7ef24037194d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Normal vision (Left eye)",
          "uuid" : "bb36b91b-3762-4fb5-929e-eb58717a272d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Abnormal vision (Left eye)",
          "uuid" : "5d35aa77-7f3a-48b2-8466-1a8ad7731280",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "unique" : true,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Eye examination');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n         console.log('lastEncounterDateTime',lastEncounterDateTime);\n         console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "ECG findings",
      "uuid" : "e8ee949c-985e-478e-b69f-ac99a6af55e8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "ECG findings",
        "uuid" : "04e08029-0676-42a4-808a-f8767fceb52c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "ECG not done",
          "uuid" : "82ce9872-d147-41ef-a413-d451b8f61530",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Abnormal",
          "uuid" : "6d2136fe-6561-45c0-936e-37bcb316277a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "abnormal" : true,
          "active" : true
        }, {
          "name" : "Normal",
          "uuid" : "ec89cb1f-491b-46de-95c1-3009effa9041",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'ECG findings');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n         console.log('lastEncounterDateTime',lastEncounterDateTime);\n         console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Heart",
      "uuid" : "3931bb80-d544-4ce6-916f-5ee169515b46",
      "keyValues" : [ ],
      "concept" : {
        "name" : "HTN heart condition",
        "uuid" : "4493df25-b623-4c00-a5de-69fc2258f262",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Other heart condition",
          "uuid" : "48df3bdb-28e5-4d3a-a5f9-d75fd7116606",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Abnormal ECG finding",
          "uuid" : "5f697ba3-5b4f-4e93-99ea-ae190909b2fe",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "IHD",
          "uuid" : "be72a069-c521-4bd0-9b1c-49e4f2f127b7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "CHD",
          "uuid" : "6c97b195-9898-4013-8619-a94bb1bd99c1",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Normal ECG findings",
          "uuid" : "5837770f-df6e-45f3-8f17-acc1dee69231",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Heart failure",
          "uuid" : "4c2d8a76-f84e-47b5-a974-860c9f860637",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Left ventricular hypertrophy (LVH)",
          "uuid" : "bb1ebc6b-1003-42c5-be9a-f52479d387f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Arrhythmia",
          "uuid" : "19adc2c2-c535-4890-ae78-7e0564ff8947",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('ECG findings').containsAnswerConceptName('Abnormal');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Specify other heart condition",
      "uuid" : "bd79bfa4-b921-452b-8357-aa206dfdae4c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "other heart condition",
        "uuid" : "b6114ce6-41a5-44a6-9f05-e42db0ab682b",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('HTN heart').containsAnswerConceptName('Other heart condition');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Specify abnormal ECG findings",
      "uuid" : "fd3c66fd-e07b-4aff-b068-1dc0815edd79",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Specify abnormal ECG findings",
        "uuid" : "27623c1c-04bc-4ca7-b05c-3fae3f38338b",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 11.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('HTN heart').containsAnswerConceptName('Abnormal ECG finding');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Ausculting heart sounds",
      "uuid" : "d2b049a7-42a7-4dff-ba6c-01cea0da5276",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Ausculting heart sounds",
        "uuid" : "be7b1b25-d89a-4898-b375-8427df76c7b7",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Not auscultated for heart sound",
          "uuid" : "64d5cbf0-e728-4a85-b7b7-182dbf8ca6a1",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Abnormal sound",
          "uuid" : "5ee2b3e4-b75c-4ba8-bed6-866cd1d30ef5",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Normal sound",
          "uuid" : "1881d2a4-4ce5-4973-8550-ad589008f4cf",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 12.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Ausculting heart sounds');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n         console.log('lastEncounterDateTime',lastEncounterDateTime);\n         console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n           if(lastConceptDataCollected >= 6)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Right eye examination",
      "uuid" : "8a541019-c74e-4634-be3f-71adc70e7ec0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Right eye examination",
        "uuid" : "14351fb8-f946-4557-b846-a486b459b9f6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Abnormal vision",
          "uuid" : "e169f4b7-1739-4de4-952d-522167671cf7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "abnormal" : true,
          "active" : true
        }, {
          "name" : "Normal vision",
          "uuid" : "dec01c60-35aa-4939-abd1-36d4951df724",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 13.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "ECG changes",
      "uuid" : "8e964960-8ed3-43ca-a44b-a994528bc822",
      "keyValues" : [ ],
      "concept" : {
        "name" : "ECG changes",
        "uuid" : "ac6e0e0b-d71f-4a3a-9fbb-719085e49944",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 14.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('ECG findings').containsAnswerConceptName('Abnormal');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Anyother existing complication/Comorbidity",
      "uuid" : "bb2866d8-57c5-4528-8c7e-765948e8d172",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Anyother existing complication/Comorbidity",
        "uuid" : "3558fb18-8b84-43ae-b413-bf4514e21d70",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        }, {
          "name" : "Eye/vision related issues",
          "uuid" : "7065bc01-262f-48f1-a15a-7cf0dbcc6784",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Kidney diseases",
          "uuid" : "ddf28da9-e96b-4452-ba2f-637da2831917",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Diabetes",
          "uuid" : "1928469b-a981-4579-beb7-ae47b972e671",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Stroke - Sudden onset",
          "uuid" : "af8e93ce-f9fc-4132-95d4-a0bbcda88a70",
          "dataType" : "Coded",
          "answers" : [ {
            "name" : "Loss of vision",
            "uuid" : "cf7b073e-5060-4e6f-af5b-67f6998d1dec",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 6.0,
            "active" : true
          }, {
            "name" : "Inability to speak or understand",
            "uuid" : "0a3dccae-2635-443c-bb58-e4fc7919e41e",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 3.0,
            "active" : true
          }, {
            "name" : "Severe headache",
            "uuid" : "e37fd2e1-63b5-40ba-a07d-ddff752e9006",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 4.0,
            "active" : true
          }, {
            "name" : "Weakness of one side of body",
            "uuid" : "8a1752b7-0388-4f2f-b579-25a23dd10d64",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 7.0,
            "active" : true
          }, {
            "name" : "Loss of consciousness",
            "uuid" : "604d1ee5-c856-414f-b1ce-b1f8b21caa13",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 5.0,
            "active" : true
          }, {
            "name" : "Unsteadiness of walking",
            "uuid" : "f649609e-474c-466f-91a5-a00dead33e46",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 8.0,
            "active" : true
          }, {
            "name" : "Numbness or clumsiness of one side of body",
            "uuid" : "46913d1c-defd-4b58-a43a-806c08cce840",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 1.0,
            "active" : true
          }, {
            "name" : "Seizures",
            "uuid" : "eba8e941-c0f3-4935-8ac6-124f6d8d1c5f",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 2.0,
            "active" : true
          } ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Heart-related Diseases",
          "uuid" : "aba2df33-f66b-4af7-9ef2-96297b8f892f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 15.0,
      "type" : "SingleSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Specify complications",
      "uuid" : "16074397-72e8-4b95-96b6-c544642f320a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Specify complications",
        "uuid" : "1e3456c4-3f34-420e-971d-474354746f95",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 16.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Anyother existing complication/Comorbidity').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Any new complications",
      "uuid" : "a01036ed-f63d-478c-88bb-a9d0b587c486",
      "keyValues" : [ ],
      "concept" : {
        "name" : "New complications",
        "uuid" : "04e5da14-4945-4008-9935-9509482fed6e",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Kidney diseases",
          "uuid" : "ddf28da9-e96b-4452-ba2f-637da2831917",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Stroke",
          "uuid" : "3df1f936-3407-4a9a-91ae-7eae9e4dc86d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Heart disease",
          "uuid" : "c8a0b118-3326-4948-9fb5-529f6f5d2b96",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Eye/vision related issues",
          "uuid" : "7065bc01-262f-48f1-a15a-7cf0dbcc6784",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 17.0,
      "type" : "MultiSelect",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Specify other",
      "uuid" : "0339d2a2-a348-4867-9c01-14f45f558098",
      "keyValues" : [ ],
      "concept" : {
        "name" : "other complication",
        "uuid" : "07583d40-cd56-4bfc-b595-f3426fcafa13",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 18.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complications').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Any new complications?",
      "uuid" : "3d8ae975-48a3-4a92-bc3d-7c7f46eaa9c6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "New complications",
        "uuid" : "04e5da14-4945-4008-9935-9509482fed6e",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Kidney diseases",
          "uuid" : "ddf28da9-e96b-4452-ba2f-637da2831917",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Stroke",
          "uuid" : "3df1f936-3407-4a9a-91ae-7eae9e4dc86d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Heart disease",
          "uuid" : "c8a0b118-3326-4948-9fb5-529f6f5d2b96",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Eye/vision related issues",
          "uuid" : "7065bc01-262f-48f1-a15a-7cf0dbcc6784",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 19.0,
      "type" : "MultiSelect",
      "rule" : "",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Specify other",
      "uuid" : "9b5e7835-46a3-4114-94f5-83f1d1cceaf6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "other complecation",
        "uuid" : "ed8f9eb9-18ab-4557-b1b8-9285d606218e",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 20.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complications').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Left eye examintaion",
      "uuid" : "c151d966-1b31-4ec1-b667-5a71b1e6a2f2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Eye examination",
        "uuid" : "023eff5b-278a-45b2-b318-5005c38f7b89",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Severe Hypertensive retinopathy,",
          "uuid" : "8047534b-9e8a-414c-aece-d35face9f835",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 15.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Normal vision (Left and Right eye)",
          "uuid" : "aa16ec9d-909c-42a2-bbf1-95f656cc9c87",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true
        }, {
          "name" : "Eye check not done",
          "uuid" : "64013f13-9340-4dad-8b8a-4fcc5981c316",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Moderate Hypertensive retinopathy",
          "uuid" : "44f704d8-b0b6-454e-bd66-92c0ee1899aa",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 14.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Mild Hypertensive retinopathy",
          "uuid" : "86358ab5-2f6b-4588-a73d-e6eda0c7bb41",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 13.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Abnormal vision",
          "uuid" : "e169f4b7-1739-4de4-952d-522167671cf7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "abnormal" : true,
          "active" : true
        }, {
          "name" : "Normal vision",
          "uuid" : "dec01c60-35aa-4939-abd1-36d4951df724",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Abnormal vision (Right eye)",
          "uuid" : "8936c71f-8066-49c6-871a-ae138b4f8584",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Normal vision (Right eye)",
          "uuid" : "36755147-828a-4a4b-9754-7ef24037194d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Normal vision (Left eye)",
          "uuid" : "bb36b91b-3762-4fb5-929e-eb58717a272d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Abnormal vision (Left eye)",
          "uuid" : "5d35aa77-7f3a-48b2-8466-1a8ad7731280",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "unique" : true,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 21.0,
      "type" : "MultiSelect",
      "mandatory" : false,
      "voided" : true
    } ],
    "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n    const formElementGroup = params.formElementGroup;\n    return formElementGroup.formElements.map(({uuid}) => {\n        return new imports.rulesConfig.FormElementStatus(uuid, true, null);\n    });\n};",
    "timed" : false
  }, {
    "uuid" : "1d249c00-d186-487f-abe6-4332c410670e",
    "name" : "Lab",
    "displayOrder" : 6.0,
    "display" : "Lab",
    "formElements" : [ {
      "name" : "Creatinin",
      "uuid" : "d078f580-30d6-4099-b822-a1dd8b8a1f6d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Creatinin",
        "uuid" : "9d969bfb-d52e-409c-864f-76ead1c977f9",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 0.6,
        "highNormal" : 1.2,
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Creatinin');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n         console.log('lastEncounterDateTime',lastEncounterDateTime);\n         console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "RBS",
      "uuid" : "9881bfaf-5efe-489b-9c53-947e27ced8d2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "RBS",
        "uuid" : "6926107f-5793-4ef8-98e1-4a3cc1e2725f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 60.0,
        "highNormal" : 160.0,
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'RBS');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n         console.log('lastEncounterDateTime',lastEncounterDateTime);\n         console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "FBS",
      "uuid" : "8b3f12e7-58f5-4ef0-9037-4f164897b9d3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "FBS",
        "uuid" : "eb771b86-8c5b-461f-a9f4-4a4815ebeeb3",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 80.0,
        "highNormal" : 120.0,
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('RBS').is.greaterThan(160);\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "PP2BS",
      "uuid" : "1aad6706-b278-4b47-a123-2c7e2a4cf849",
      "keyValues" : [ ],
      "concept" : {
        "name" : "PP2BS",
        "uuid" : "04806ab3-426b-4909-b2c0-65b590f8250c",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 120.0,
        "highNormal" : 150.0,
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('RBS').is.greaterThan(160);\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Any new complications",
      "uuid" : "8f7131a3-2bbd-4b2f-8dd1-c9f1ddcf17ee",
      "keyValues" : [ ],
      "concept" : {
        "name" : "New htn complications",
        "uuid" : "11894458-68b8-4528-863d-43222cc73566",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Kindney disease",
          "uuid" : "2076f5a8-f701-4468-9b0d-315182dc61ba",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Stroke",
          "uuid" : "3df1f936-3407-4a9a-91ae-7eae9e4dc86d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "None",
          "uuid" : "8b77f487-c885-4b54-8925-153733913b10",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "unique" : true,
          "active" : true
        }, {
          "name" : "Heart disease",
          "uuid" : "c8a0b118-3326-4948-9fb5-529f6f5d2b96",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Eye/vision related issues",
          "uuid" : "7065bc01-262f-48f1-a15a-7cf0dbcc6784",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Diabetes",
          "uuid" : "1928469b-a981-4579-beb7-ae47b972e671",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "MultiSelect",
      "mandatory" : true
    }, {
      "name" : "Specify other complication",
      "uuid" : "4b7b4927-39a5-4b57-9b20-a2d2c3d7b9c8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other complications",
        "uuid" : "629ae5db-a6bb-45a6-bd8a-383fe209af95",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New htn complications').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Any new Complications",
      "uuid" : "3a147c5d-f995-4427-8251-6d125feb0119",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Any new Complications",
        "uuid" : "b2a608b8-f6dd-4b77-b60b-a6a08cdde9b7",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n\n    const rbs = programEncounter.getObservationReadableValue('RBS');\n    const stroke = programEncounter.getObservationReadableValue('Face, limbs, speech');\n    const creatinin = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment('Creatinin');\n    const heart = programEncounter.getObservationReadableValue('HTN heart');\n    const comp = programEncounter.getObservationReadableValue('Specify complications');\n\n    console.log('rbs', rbs);\n    console.log('stroke', stroke);\n    console.log('creatinin', creatinin);\n    console.log('heart', heart);\n    console.log('comp', comp);\n\n\n    let arr = [];\n    if (rbs > 160) {\n        arr.push('Diabetes');\n    }\n    if (_.includes(stroke, 'Stroke')) {\n        arr.push('Stroke');\n    }\n    if (creatinin && creatinin > 1.2) {\n        arr.push('Kidnye disease');\n    }\n    if (heart && _.isEqual(heart, 'Abnormal ECG finding')) {\n        arr.push('Heart disease');\n    }\n    if (comp) {\n        arr.push(comp);\n    }\n\n\n    console.log('arrrayu ------>', arr);\n\n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, arr.toString());\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "FBS",
      "uuid" : "7b280314-92d2-43d1-9e03-a2ce4cbba1b9",
      "keyValues" : [ ],
      "concept" : {
        "name" : "FBS",
        "uuid" : "eb771b86-8c5b-461f-a9f4-4a4815ebeeb3",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 80.0,
        "highNormal" : 120.0,
        "active" : true
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('RBS').is.greaterThan(160);\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "PP2BS",
      "uuid" : "b4012f1d-6c8b-4f2c-a7ab-97e9567f987a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "PP2BS",
        "uuid" : "04806ab3-426b-4909-b2c0-65b590f8250c",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 120.0,
        "highNormal" : 150.0,
        "active" : true
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('RBS').is.greaterThan(160);\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Cholesterol",
      "uuid" : "d3f9c901-4f65-403d-947e-f84edd59bc5f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Cholesterol",
        "uuid" : "0dc4fc3f-9f15-4c90-8986-af1b9c2e5171",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowNormal" : 150.0,
        "highNormal" : 200.0,
        "active" : true
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  let visibility = false;\n  let lastEncounterDateTime = programEncounter.programEnrolment.enrolmentDateTime;\n  \n  if(programEncounter.programEnrolment.hasCompletedEncounterOfType('Hypertension Followup')){   \n  \n      let lastEncounterWithConcept = programEncounter.programEnrolment.\n          findLatestPreviousEncounterWithObservationForConcept(programEncounter,'Cholesterol');\n      \n      if(lastEncounterWithConcept)\n      lastEncounterDateTime = lastEncounterWithConcept.encounterDateTime;\n      \n  }\n\n        let lastConceptDataCollected = imports.moment(programEncounter.encounterDateTime)\n        .diff(imports.moment(lastEncounterDateTime), 'months', true)\n         \n         console.log('lastEncounterDateTime',lastEncounterDateTime);\n         console.log('lastConceptDataCollected',lastConceptDataCollected);\n         \n           if(lastConceptDataCollected >= 12)\n              visibility = true;  \n   \n  \n  statusBuilder.show().whenItem(visibility).is.truthy; \n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Complete Diagnosis",
      "uuid" : "aa80eaf4-56a7-4292-a3c5-902b0f70e875",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Complete Diagnosis",
        "uuid" : "a2f24e5e-b1de-404b-a270-3a6ac41c0fef",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 11.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEnrolment = params.entity;\n    const formElement = params.formElement;\n    \n    const complications = programEnrolment.getObservationReadableValueInEntireEnrolment('Existing Complications');\n    \n    let visbilitty = false;\n    let displayText = '';\n    if(!_.isEqual(complications,undefined) && !_.isEqual(complications[0],'None')){\n      console.log('complications',complications);\n       visbilitty = true;\n       displayText = 'Hypertension with' + ' ' + complications;\n    }\n     \n    \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, visbilitty, displayText);\n};",
      "mandatory" : false,
      "voided" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "f529d839-607d-4e4e-88a2-15486bfbec39",
    "name" : "Medicine",
    "displayOrder" : 7.0,
    "display" : "Medicine",
    "formElements" : [ {
      "name" : "Medicine status",
      "uuid" : "c1e02d30-cdf4-4f40-a50c-d0e43541e6fd",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Medicine status",
        "uuid" : "b7d1d14e-bd83-4b46-b087-c2bec4a27ab5",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Change in medicine",
          "uuid" : "3cfed9a0-8e3d-4092-8af9-54313a322e9a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Continue same medicines",
          "uuid" : "63eb4339-92a9-4a11-9767-2a8e3dc76674",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : true
    }, {
      "name" : "Which medicines are you taking?",
      "uuid" : "24e86b1a-74ee-44c9-abde-71a5cf949d60",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Medicines taken",
        "uuid" : "f2d65183-3db1-4e59-9e1c-7a82efc0f092",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Aspirin",
          "uuid" : "d9692956-c0b9-443c-9dbc-d51e5a04973a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 22.0,
          "active" : true
        }, {
          "name" : "Methyldopa",
          "uuid" : "023d847a-3652-4b80-9351-832d4ce64d7c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Becadex (multivitamin)",
          "uuid" : "74182b4d-b305-4621-b0fa-2bde06295f50",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 15.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Nefedipin SR",
          "uuid" : "1b833800-70e2-46de-af5e-a01272b424a8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Paracetamol",
          "uuid" : "c8c54559-53e9-4b60-a618-ccd1d6447dc2",
          "dataType" : "Coded",
          "answers" : [ {
            "name" : "500 mg",
            "uuid" : "814dd7c5-9945-4be1-84a0-14f6577698c6",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 1.0,
            "active" : true
          }, {
            "name" : "250 mg",
            "uuid" : "a8194f24-bbfd-4af2-b8e0-323b0fa37b12",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 0.0,
            "active" : true
          }, {
            "name" : "1000 mg",
            "uuid" : "f52b5de1-63a5-4665-9fa2-be0ff018122a",
            "dataType" : "NA",
            "answers" : [ ],
            "order" : 2.0,
            "active" : true,
            "keyValues" : [ ]
          } ],
          "order" : 17.0,
          "active" : true
        }, {
          "name" : "B-complex",
          "uuid" : "26d436dc-96a3-4db4-9b36-183d68094e8c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 14.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Metoprolol",
          "uuid" : "767a415b-40e8-46e8-ae2e-c86c37dc9364",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 11.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Clonidine",
          "uuid" : "f3f7131d-7da8-4bc3-a85d-9b8ad8c7b9cf",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 12.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Iron (Fersifol)",
          "uuid" : "1a86c03c-416e-4603-a0d0-2407bc837253",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 16.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        }, {
          "name" : "Prazosin",
          "uuid" : "38b7eff9-7eba-4ed5-86fd-40b4179812b9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 13.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Spironolactone",
          "uuid" : "7ad5a4ad-2f6b-48b4-a340-ba37c513bbdd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 19.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Ramipril",
          "uuid" : "a0771169-c87e-4767-89af-31ead99987b4",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 10.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Amlodipin",
          "uuid" : "cc3012a6-e508-4b96-98a8-a16450d5c167",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Calcium",
          "uuid" : "a90a1a76-c5fe-4020-924e-0e0e9f5b0f9f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 20.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Nefedipin",
          "uuid" : "204f2a1b-96e8-427d-86a2-b5e16fa6f8e0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Atenolol",
          "uuid" : "ef80c51a-f52c-4d3e-b0bf-e040e1c46643",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "Enalapril",
          "uuid" : "43a75fca-4064-4cf6-b214-506c3665ea89",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Atorvastatin",
          "uuid" : "f86acb3f-53d2-44a7-a55b-1ef91914a997",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 21.0,
          "active" : true
        }, {
          "name" : "Hydrochlorothiazide (HCT)",
          "uuid" : "f625f768-3c05-4cd4-ab90-bb472bb249a8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Furoseide",
          "uuid" : "836ac756-fdc6-4249-87b8-f24bda9daf47",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 18.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicine status').containsAnswerConceptName('Change in medicine');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Amlodipin Strength",
      "uuid" : "563fb704-8c36-4dad-b84e-924f4dd5e1df",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Amlodipin Strength",
        "uuid" : "1fe0da8d-569f-4f94-a308-c1321c5a0c7b",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "2.5 mg",
          "uuid" : "4c184f2c-a390-4a64-a999-95aae33078ee",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "5 mg",
          "uuid" : "e6bf6a8e-3c1a-430f-8f09-a9ada7adaf3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "7.5 mg",
          "uuid" : "010f90ef-b346-46fb-9f7b-63c98e5efd79",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Amlodipin');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Amlodipin tablets is taken how many times per day?",
      "uuid" : "fb0f8f1d-819c-4169-8c18-181ae350bd2b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Amlodipin tablets is for how many times per day?",
        "uuid" : "d9dfcc36-7caa-4a3a-a9be-d4d4e8487a9d",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 2.0,
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Amlodipin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Amlodipin taken since how many days?",
      "uuid" : "935551a3-4092-4fcf-b142-859fd6ce087c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Amlodipin tablet for how many days?",
        "uuid" : "92671321-abb8-48f8-922a-e18bc4573dde",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Amlodipin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Enalapril Strength",
      "uuid" : "a4f1baeb-df7c-48eb-9da9-9025363f08f0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enalapril Strength",
        "uuid" : "99653b2a-e994-4d63-afaa-10c277ee0235",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "5 mg",
          "uuid" : "e6bf6a8e-3c1a-430f-8f09-a9ada7adaf3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "40 mg",
          "uuid" : "39efffa4-84ab-4551-9bd8-527d262ff469",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "2.5 mg",
          "uuid" : "4c184f2c-a390-4a64-a999-95aae33078ee",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Enalapril');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Enalapril tablets is taken how many times per day?",
      "uuid" : "7ebd7b60-60a6-41b8-9116-ac9da6823371",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enalapril tablets is for how many times per day?",
        "uuid" : "92613f0f-2455-4cc7-83de-a789b5496b37",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Enalapril');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Enalapril taken since how many days?",
      "uuid" : "7ec9f43f-6462-4a3c-b05f-2be87cb7d6a6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Enalapril tablet for how many days?",
        "uuid" : "f54d53c1-bee2-4db5-8c42-a1e5c1d3a886",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Enalapril');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Hydrochlorothiazide (HCT) Strength",
      "uuid" : "38fd5300-528f-436b-af7c-37da246545df",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Hydrochlorothiazide (HCT) Strength",
        "uuid" : "449316d4-8391-4de9-9c96-18637b9572a6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "75 mg",
          "uuid" : "534aae61-ef77-4bd0-8fd4-8d6aefd4ec5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "12.5 mg",
          "uuid" : "bfe425b4-6bdd-49b7-b1f4-76b34cf4a94f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Hydrochlorothiazide (HCT)');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Hydrochlorothiazide (HCT) tablet is taken how many times per day?",
      "uuid" : "f407c636-3512-4ab4-9fe4-5cf5e2d68b04",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Hydrochlorothiazide (HCT) tablet is for how many times per day?",
        "uuid" : "0d235663-7a1e-40c5-8691-ac2af61a3112",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 2.0,
        "active" : true
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Hydrochlorothiazide (HCT)');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Hydrochlorothiazide (HCT) taken since how many days?",
      "uuid" : "dfa294b7-a063-4f07-a3d3-83f60ab30a54",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Hydrochlorothiazide (HCT) tablet for how many days?",
        "uuid" : "95c763e2-7be1-48d0-8f34-a8c470b4013a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 11.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Hydrochlorothiazide (HCT)');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Atenolol Strength",
      "uuid" : "c96deecf-547b-4b0c-b3d9-498daa036a57",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atenolol Strength",
        "uuid" : "e3cab964-f906-4a94-8598-6dab62a19a95",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "75 mg",
          "uuid" : "534aae61-ef77-4bd0-8fd4-8d6aefd4ec5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 12.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Atenolol');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Atenolol tablet is taken how many times per day?",
      "uuid" : "64ea5c37-e98a-4dbf-b6fb-2ce390acdbde",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atenolol tablet is for how many times per day?",
        "uuid" : "b2743caa-27af-4558-892b-ca4f9a300f7d",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 13.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Atenolol');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Atenolol taken since how many days?",
      "uuid" : "4fe5a841-e9fc-4838-aabd-b68d74a56a3c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atenolol tablet is for how many days?",
        "uuid" : "98c18ba8-fb28-464d-9f4d-6a9de45d3d52",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 14.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Atenolol');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Methyldopa Strength",
      "uuid" : "141043a9-1f16-40a3-bc44-60e46f5bfbb6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Methyldopa Strength",
        "uuid" : "0914d979-72a6-49ef-a37b-0bb7df2068c0",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "250 mg",
          "uuid" : "a8194f24-bbfd-4af2-b8e0-323b0fa37b12",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "375 mg",
          "uuid" : "7f4c040b-3821-4805-81d3-40f45ff2e77d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "500 mg",
          "uuid" : "814dd7c5-9945-4be1-84a0-14f6577698c6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "125 mg",
          "uuid" : "75af0e15-71d0-4bca-a84c-a6360e560acb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 15.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Methyldopa');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Methyldopa tablet is taken how many times per day?",
      "uuid" : "119c7c86-22a8-4cb4-af1e-a6f1b5bf5833",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Methyldopa tablet is for how many times per day?",
        "uuid" : "fe231d34-1762-428d-bb4c-0b3399d2e3f8",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 16.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Methyldopa');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Methyldopa taken since how many days?",
      "uuid" : "0d8db5ea-b9b2-4404-bf22-a3be25867ae5",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Methyldopa tablet for how many days?",
        "uuid" : "257c8daf-b647-452d-bf43-612ab1e31f6e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 17.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Methyldopa');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Nefedipin Strength",
      "uuid" : "5069a1f1-2188-4dfd-987e-4560f9a50ecd",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nefedipin Strength",
        "uuid" : "55c272e7-5d2b-4cf2-ab96-d9c4de76a6b0",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 18.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Nefedipin');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Nefedipin tabler is taken how many times per day?",
      "uuid" : "5eeb5fee-4e3d-408d-a982-0dcd157de34c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nefedipin tablet is for how many times per day?",
        "uuid" : "06204082-7709-41af-9207-d38820262624",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 19.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Nefedipin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Nefedipin SR Strength",
      "uuid" : "c568eacb-f197-4f56-a374-6f496bd5887f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nefedipin SR Strength",
        "uuid" : "a3d5391e-e199-4121-8d42-6ff14f50a299",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 20.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Nefedipin SR');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Nefedipin SR tablet is how many times per day?",
      "uuid" : "df5a6700-aa22-482a-848e-27648742fe05",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nefedipin SR tablet is how many times per day?",
        "uuid" : "e35f569b-6fbf-493d-8b89-032733b4b12e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 21.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Nefedipin SR');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Nefedipin SR for how many days?",
      "uuid" : "65f21834-96bc-43f8-b96d-c31926c5eb16",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nefedipin SR for how many days?",
        "uuid" : "b0c90bb5-de77-4e63-b842-13202195b9ad",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 22.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Nefedipin SR');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Aspirin Strength",
      "uuid" : "d123e589-0560-49a3-ae58-3e16b3d90d21",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin Strength",
        "uuid" : "e1fa78a9-5fea-4cda-858f-eda71d72e523",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "150 mg",
          "uuid" : "7ed903d7-4766-46e4-ae90-3cc00683ee53",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "125 mg",
          "uuid" : "75af0e15-71d0-4bca-a84c-a6360e560acb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "175 mg",
          "uuid" : "ff8db129-41d5-4868-8748-7b81bc3c9f1c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "200 mg",
          "uuid" : "42521250-beb8-4407-8a54-591736c499e7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "75 mg",
          "uuid" : "534aae61-ef77-4bd0-8fd4-8d6aefd4ec5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 23.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Aspirin');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Aspirin tablet is for how many times per day?",
      "uuid" : "48d9f144-039a-4382-84db-68c0872be6d8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin tablet is for how many times per day?",
        "uuid" : "38489a0c-288a-48e5-b11b-f37dacb2ab2a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 24.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Aspirin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Aspirin tablet for how many days",
      "uuid" : "a5fdbfee-4abf-427f-a41a-17c1be7d4d6a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin tablet for how many days",
        "uuid" : "35c8047b-2a33-49ff-a784-2bbd8262c593",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 25.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Aspirin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Atorvastatin Strength",
      "uuid" : "bfe4554b-406e-4f4f-8eba-2b9d30b13ece",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin Strength",
        "uuid" : "a38c0c25-8525-49fe-b1aa-0550f3feaee6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "30 mg",
          "uuid" : "aa2d5545-c37c-409f-93a0-98f39b1fed6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "70 mg",
          "uuid" : "ba980bb4-b0ae-4904-8f0f-6c590816d234",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "80 mg",
          "uuid" : "d4e7f96f-ad03-4a39-85da-92ccd8baaab0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "40 mg",
          "uuid" : "39efffa4-84ab-4551-9bd8-527d262ff469",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "60 mg",
          "uuid" : "95c823e7-27e0-454e-8e51-fc5362c573bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 26.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Atorvastatin');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Atorvastatin tablet for how many times a day",
      "uuid" : "86b265cf-1192-45fb-ac1a-27f3cf89d9bc",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin tablet for how many times a day",
        "uuid" : "bb565c11-6734-4fa8-b414-7f380a81505a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 27.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Atorvastatin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Atorvastatin tablet for how many days",
      "uuid" : "fe7a07b8-5b90-4e2b-909b-7e94b6b56701",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin tablet for how many days",
        "uuid" : "7c8f1f32-c436-428b-bd9d-1f7ea47d010e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 28.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Atorvastatin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Ramipril Strength",
      "uuid" : "e4d06284-87c8-4953-b44a-9e45c5bd5421",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Ramipril Strength",
        "uuid" : "973c7298-b68d-4459-8ada-c8f91a7c7bb8",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "1.25 mg",
          "uuid" : "73f180b9-f3af-433d-a949-f9da101922e0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "5 mg",
          "uuid" : "e6bf6a8e-3c1a-430f-8f09-a9ada7adaf3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "2.5 mg",
          "uuid" : "4c184f2c-a390-4a64-a999-95aae33078ee",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 29.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Ramipril');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Ramipril tablet for how times per day",
      "uuid" : "a1fe55b8-7860-4ff6-8db9-ce40596e2a21",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Ramipril tablet for how times per day",
        "uuid" : "f1a5256b-a914-4f82-9c34-e231024dd6cc",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 30.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Ramipril');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Ramipril tablet for how many days",
      "uuid" : "06032a81-f6d1-4b96-961b-c3878e2f70de",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Ramipril tablet for how many days",
        "uuid" : "614f6b4f-e2c6-4742-9ec7-e645c106e336",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 31.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Ramipril');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Metoprolol Strength",
      "uuid" : "2196a5d8-d052-4ea4-bde5-054b42e79568",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Metoprolol Strength",
        "uuid" : "89ce82a0-3c5b-4a1d-a47e-f83e1db12775",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "300 mg",
          "uuid" : "f278101f-69f6-4c34-aca1-52b7af0daecd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "5 mg",
          "uuid" : "e6bf6a8e-3c1a-430f-8f09-a9ada7adaf3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "200 mg",
          "uuid" : "42521250-beb8-4407-8a54-591736c499e7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "400 mg",
          "uuid" : "a437d78f-e5f3-4b96-9ed4-8b2b7e5a5a74",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 32.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Metoprolol');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Metoprolol tablet for how times per day",
      "uuid" : "c271a661-15d3-47de-b5c8-020f985640e7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Metoprolol tablet for how times per day",
        "uuid" : "56e2a5ce-fad7-4c2d-8c5e-892448aad876",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 33.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Metoprolol');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Metoprolol tablet for how many days",
      "uuid" : "0d46ad66-ff51-4d19-aefe-9b8786fc96b0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Metoprolol tablet for how many days",
        "uuid" : "e864bbe7-8c60-455e-b91f-85c3a9fe8a74",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 34.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Metoprolol');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Clonidine Strength",
      "uuid" : "1f4cb6f2-9941-4d3d-ae37-44256cc1246b",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Clonidine Strength",
        "uuid" : "af3ac496-6398-41fb-b61a-9074bdc752c6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "150 mcg",
          "uuid" : "1f4668bc-51bd-4a85-9226-30537320be30",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "100 mcg",
          "uuid" : "ba1cc812-a2c2-405d-9b10-79506187ea3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "300 mcg",
          "uuid" : "ce4d359a-1df0-4427-adbf-95cb79536207",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 35.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Clonidine');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Clonidine tablet for how times per day",
      "uuid" : "27eec7ea-06a7-4f12-bd19-4c7aedf4078a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Clonidine tablet for how times per day",
        "uuid" : "e2498029-fab8-4a47-9d2e-044476fee99f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 36.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Clonidine');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Clonidine tablet for how many days",
      "uuid" : "479a0264-1b53-4afa-9245-0fe6bf3740ca",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Clonidine tablet for how many days",
        "uuid" : "7c782fc9-f4df-468b-8733-850c33bf96b5",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 37.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Clonidine');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Prazosin Strength",
      "uuid" : "3538f886-bf4f-47d1-9cf8-7fab0db40694",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Prazosin Strength",
        "uuid" : "94513b3b-b4e2-4f9c-9354-6399b6fd657c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "2 mg",
          "uuid" : "1515f6a8-3a5d-451f-8dc1-63d5ad42c0e5",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "5 mg",
          "uuid" : "e6bf6a8e-3c1a-430f-8f09-a9ada7adaf3f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "2.5 mg",
          "uuid" : "4c184f2c-a390-4a64-a999-95aae33078ee",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "1 mg",
          "uuid" : "0e54e7b0-5fd1-4c54-877f-0df349011e09",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "1.5 mg",
          "uuid" : "73be7a69-61bf-47c1-8f07-5ae9640bacec",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "0.5 mg",
          "uuid" : "f8f14021-6c09-45ac-b1d9-b4412fd741a9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 38.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Prazosin');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Prazosin tablet for how times per day",
      "uuid" : "b539cdc5-cba0-47d4-9ae9-a263213a0e88",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Prazosin tablet for how times per day",
        "uuid" : "b2d9f5a1-3483-4853-8d2e-27b0b03446ab",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 39.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Prazosin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Prazosin tablet for how many days",
      "uuid" : "c7b61bec-68b3-4ef5-a7b4-ded8845cb999",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Prazosin tablet for how many days",
        "uuid" : "38da7b7f-01e0-46c5-b6f5-860a1fc7b781",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 40.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Prazosin');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "B-complex Strength",
      "uuid" : "854417c2-58ce-4758-8b41-684988d11864",
      "keyValues" : [ ],
      "concept" : {
        "name" : "B-complex Strength",
        "uuid" : "a5ed1d52-4b5a-4c79-974b-0adf2bf9ccb5",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "1",
          "uuid" : "89c74357-1f8f-40bf-b090-e34a991cf49a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 41.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('B-complex');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "B-complex tablet for how times per day",
      "uuid" : "611966ae-454b-4962-819a-46f329e0793d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "B-complex tablet for how times per day",
        "uuid" : "8d0a9149-a1a6-4deb-89b9-dcbdfa21fa04",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 42.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('B-complex');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "B-complex tablet for how many days",
      "uuid" : "f66f8d86-7dc4-4bb6-bf87-4a2482c73cb2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "B-complex tablet for how many days",
        "uuid" : "e4fcbd27-8b23-46ba-a59e-1aed275f690b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 43.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('B-complex');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Becadex (multivitamin) Strength",
      "uuid" : "63ff282e-b225-4705-a4c0-2bb4b6fa8311",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Becadex (multivitamin) Strength",
        "uuid" : "6e96f709-dc8e-4e10-a79f-e908a790d719",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "1",
          "uuid" : "89c74357-1f8f-40bf-b090-e34a991cf49a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 44.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Becadex (multivitamin)');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Becadex (multivitamin) tablet for how times per day",
      "uuid" : "fd330a4a-f73d-4a1c-a43f-0afb2d241b58",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Becadex (multivitamin) tablet for how times per day",
        "uuid" : "9b8e1c45-8286-4ad3-b20e-bfae7d3e212e",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 45.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Becadex (multivitamin)');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Becadex (multivitamin) tablet for how many days",
      "uuid" : "ee21e470-184f-4a32-9c6f-7e540c7410b7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Becadex (multivitamin) tablet for how many days",
        "uuid" : "5bd89916-3af1-4af7-a79e-9fc795a7c475",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 46.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Becadex (multivitamin)');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Iron (Fersifol) Strength",
      "uuid" : "a83860d0-a446-4ffc-920a-f407d8fbbd4d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Iron (Fersifol) Strength",
        "uuid" : "524abcfb-d2b0-46e4-9c18-c5c380adb862",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "60 mg",
          "uuid" : "95c823e7-27e0-454e-8e51-fc5362c573bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "360 mg",
          "uuid" : "46360e77-0cae-4b03-aa2a-5390ecb56f0d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "160 mg",
          "uuid" : "b2279a5c-4a97-4348-bca8-3a040c1d185a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "200 mg",
          "uuid" : "42521250-beb8-4407-8a54-591736c499e7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "150 mg",
          "uuid" : "7ed903d7-4766-46e4-ae90-3cc00683ee53",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 47.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Iron (Fersifol)');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Iron (Fersifol) tablet for how times per day",
      "uuid" : "b64eaf01-19c7-475c-a73d-4d03d4814c1c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Iron (Fersifol) tablet for how times per day",
        "uuid" : "2e827b9e-76cb-45bd-8207-a85653d6f4af",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 48.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Iron (Fersifol)');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Iron (Fersifol) tablet for how many days",
      "uuid" : "cb43a6c7-f35c-4283-aa80-7737e7d5f355",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Iron (Fersifol) tablet for how many days",
        "uuid" : "c74fd564-30b7-4b4b-a7e7-b93cb189f359",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 49.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Iron (Fersifol)');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Paracetamol Strength",
      "uuid" : "46bafe20-fef2-4751-987c-560bdebc8494",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Paracetamol Strength",
        "uuid" : "6b3c1744-f643-499d-8581-8b0b4a4017bd",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "500 mg",
          "uuid" : "814dd7c5-9945-4be1-84a0-14f6577698c6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "1000 mg",
          "uuid" : "f52b5de1-63a5-4665-9fa2-be0ff018122a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "250 mg",
          "uuid" : "a8194f24-bbfd-4af2-b8e0-323b0fa37b12",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 50.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Paracetamol');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Paracetamol tablet for how times per day",
      "uuid" : "72465fc2-996f-41db-8e27-081b4f6fb001",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Paracetamol tablet for how times per day",
        "uuid" : "f91a06d7-69c5-443f-b97e-60bb981afca7",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 51.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Paracetamol');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Paracetamol tablet for how many days",
      "uuid" : "48167d78-8dcd-4a64-b803-90964f13bd34",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Paracetamol tablet for how many days",
        "uuid" : "4aab6b40-dfc4-4bcb-b413-36689b651a42",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 52.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Paracetamol');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Furosemide Strength",
      "uuid" : "4a62baed-5587-43a9-a813-cbd0df35a439",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Furosemide Strength",
        "uuid" : "feec4205-8f1e-4b8e-929f-f8c0664e34d4",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "80 mg",
          "uuid" : "d4e7f96f-ad03-4a39-85da-92ccd8baaab0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "40 mg",
          "uuid" : "39efffa4-84ab-4551-9bd8-527d262ff469",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "60 mg",
          "uuid" : "95c823e7-27e0-454e-8e51-fc5362c573bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 53.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Furoseide');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Furosemide tablet for how times per day",
      "uuid" : "f4bda123-6c21-473c-9db7-029888a2d64d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Furosemide tablet for how times per day",
        "uuid" : "42c7dc3a-8600-4a56-90b6-09d66ae06c8a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 54.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Furoseide');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Furosemide tablet for how many days",
      "uuid" : "96f234bc-aeac-401f-82ce-f22dae916e79",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Furosemide tablet for how many days",
        "uuid" : "8e7106bd-d9ab-48e4-8200-60707101f34f",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 55.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Furoseide');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Spironolactone Strength",
      "uuid" : "8f475d9f-b9ef-404d-94ab-cdadc1968cd6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Spironolactone Strength",
        "uuid" : "43ee5933-ba92-4a53-8d51-95423a293302",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "75 mg",
          "uuid" : "534aae61-ef77-4bd0-8fd4-8d6aefd4ec5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 56.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Spironolactone');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Spironolactone tablet for how times per day",
      "uuid" : "4a174a1b-1d96-496b-ab11-22c3d65af767",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Spironolactone tablet for how times per day",
        "uuid" : "0da77abb-d8ab-4aa1-9b4d-34ec2e81d14a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 57.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Spironolactone');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Spironolactone tablet for how many days",
      "uuid" : "4b5bbf61-d6b8-4072-88dd-8f43832ec304",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Spironolactone tablet for how many days",
        "uuid" : "b3ae0b19-a4b1-4a80-aba4-510bef92fc6b",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 58.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Spironolactone');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Calcium Strength",
      "uuid" : "7046d52a-6a75-4596-a378-1415a5c7da64",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Calcium Strength",
        "uuid" : "d6e1be9d-0937-4708-869f-19c816c11d7c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "1000 mg",
          "uuid" : "f52b5de1-63a5-4665-9fa2-be0ff018122a",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "500 mg",
          "uuid" : "814dd7c5-9945-4be1-84a0-14f6577698c6",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 59.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Calcium');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Calcium tablet for how times per day",
      "uuid" : "895b3f25-2ad8-4ac2-94f2-a534e86a7061",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Calcium tablet for how times per day",
        "uuid" : "d38544e2-77f3-4f83-ac43-db76e38593b6",
        "dataType" : "Numeric",
        "answers" : [ ],
        "lowAbsolute" : 0.0,
        "highAbsolute" : 3.0,
        "active" : true
      },
      "displayOrder" : 60.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Calcium');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Calcium tablet for how many days",
      "uuid" : "157b3357-cf19-4b25-97f5-c7f2cb26e026",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Calcium tablet for how many days",
        "uuid" : "95ca8c1b-c012-428b-83d8-c9a210e19d57",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "highNormal" : 31.0,
        "active" : true
      },
      "displayOrder" : 61.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Calcium');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Nefedipin taken since how many days?",
      "uuid" : "ef916443-a6d4-4e4e-873b-c245818f27c1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Nefedipin tablet for how many days?",
        "uuid" : "f89af677-d4c1-41e2-b04e-85fcb89c3d00",
        "dataType" : "Numeric",
        "answers" : [ ],
        "highAbsolute" : 31.0,
        "active" : true
      },
      "displayOrder" : 62.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Medicines taken').containsAnswerConceptName('Nefedipin');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Aspirin Strength",
      "uuid" : "e54c7549-0bcc-4b0e-a8d4-095baec73659",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin Strength",
        "uuid" : "e1fa78a9-5fea-4cda-858f-eda71d72e523",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "150 mg",
          "uuid" : "7ed903d7-4766-46e4-ae90-3cc00683ee53",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "125 mg",
          "uuid" : "75af0e15-71d0-4bca-a84c-a6360e560acb",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "175 mg",
          "uuid" : "ff8db129-41d5-4868-8748-7b81bc3c9f1c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "200 mg",
          "uuid" : "42521250-beb8-4407-8a54-591736c499e7",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "25 mg",
          "uuid" : "beadf3cf-f434-4015-9ad2-c84d438f6d90",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "100 mg",
          "uuid" : "632a7ca9-6296-4a57-9875-1d2679dc4a60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "75 mg",
          "uuid" : "534aae61-ef77-4bd0-8fd4-8d6aefd4ec5f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 63.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Medicines taken').containsAnswerConceptName('Aspirin');\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Aspirin tablet is for how many times per day?",
      "uuid" : "7748e06a-5f79-4917-beed-b703c42004a1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin tablet is for how many times per day?",
        "uuid" : "38489a0c-288a-48e5-b11b-f37dacb2ab2a",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 64.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Medicines taken').containsAnswerConceptName('Aspirin');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Aspirin tablet for how may days?",
      "uuid" : "dcf1e8a2-8229-4c9e-969e-663d676de4c1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Aspirin tablet is for how may days?",
        "uuid" : "f5f9be92-48af-48e7-864b-0fba6ddebcbd",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 65.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Medicines taken').containsAnswerConceptName('Aspirin');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Atorvastatin Strength",
      "uuid" : "89daab86-4fb7-44d1-84e4-a49a0d0a4d58",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin Strength",
        "uuid" : "a38c0c25-8525-49fe-b1aa-0550f3feaee6",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "30 mg",
          "uuid" : "aa2d5545-c37c-409f-93a0-98f39b1fed6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "70 mg",
          "uuid" : "ba980bb4-b0ae-4904-8f0f-6c590816d234",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true
        }, {
          "name" : "50 mg",
          "uuid" : "d2cc3b6c-bbde-4840-9ef9-bf76fe1f7fd0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "20 mg",
          "uuid" : "c7332542-ebac-41d1-baf4-e60089f5e46f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "80 mg",
          "uuid" : "d4e7f96f-ad03-4a39-85da-92ccd8baaab0",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "40 mg",
          "uuid" : "39efffa4-84ab-4551-9bd8-527d262ff469",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true
        }, {
          "name" : "60 mg",
          "uuid" : "95c823e7-27e0-454e-8e51-fc5362c573bd",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "10 mg",
          "uuid" : "2a51c67b-2726-42d1-bf8b-0bbbe0a8da6c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 66.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Medicines taken').containsAnswerConceptName('Atorvastatin');\n  return statusBuilder.build();\n};",
      "mandatory" : true,
      "voided" : true
    }, {
      "name" : "Atorvastatin tablet is for how many times per day?",
      "uuid" : "d9899884-cc94-43f4-a2d4-6a4ae0dea2a3",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin tablet is for how many times per day?",
        "uuid" : "dc0c8fed-5bad-43f4-af27-5c141850b169",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 67.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Medicines taken').containsAnswerConceptName('Atorvastatin');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Atorvastatin tablet for how many days?",
      "uuid" : "2a15c71c-f726-46ea-ac69-7c1b86b6f5a2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Atorvastatin tablet for how many days?",
        "uuid" : "f7c32b97-8223-46ad-806e-670b5841b7bc",
        "dataType" : "Numeric",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 68.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Medicines taken').containsAnswerConceptName('Atorvastatin');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Specify other medicine",
      "uuid" : "c7109c73-fac8-45c9-8fb3-1f216261b48f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "specify other medicine",
        "uuid" : "88d9c947-6dfb-4a6c-97ab-fbf24a71d086",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 69.0,
      "type" : "SingleSelect",
      "rule" : "//SAMPLE RULE EXAMPLE\n'use strict';\n({params, imports}) => {\n  const programEnrolment = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEnrolment, formElement});\n  statusBuilder.show().when.valueInEnrolment('Medicines taken').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    } ],
    "timed" : false
  }, {
    "uuid" : "842a98f6-b16b-448a-8a7c-0dccc7bdb3ae",
    "name" : "Counselling",
    "displayOrder" : 8.0,
    "display" : "Counselling",
    "formElements" : [ {
      "name" : "Counselling done",
      "uuid" : "3e934893-562b-4e46-9a09-100cb370e7eb",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Initial counselling done",
        "uuid" : "ce040acc-8cb2-4d31-990d-ffc52d90949c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Hypertension Counselling Points",
      "uuid" : "0d4b0fc4-0c48-4f74-a9ca-ed17467dfe5d",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Counselling point" ]
      } ],
      "concept" : {
        "name" : "Hypertension Enrolment Counselling Points",
        "uuid" : "7a5cbb66-f047-4a8a-b5e9-a40368e588af",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Counselling point",
          "uuid" : "38e42408-3f81-4e26-87dd-563a9718a6f8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Counselling Done",
      "uuid" : "2a757188-7939-420c-b540-616552c6f844",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Counselling Done",
        "uuid" : "fa031cca-7264-420a-b657-0d3d5fc58a9c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "9e852948-5535-4f1d-9ee5-6ad22a63d589",
    "name" : "Referral",
    "displayOrder" : 9.0,
    "display" : "Referral",
    "formElements" : [ {
      "name" : "Does patient require referral?",
      "uuid" : "324bc134-49c0-4f6c-9c9f-af35b79020ed",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Patient requires referral",
        "uuid" : "2f331b4a-4a15-4b97-96ba-689c69000046",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "No",
          "uuid" : "f88da2e8-6ab4-44b5-b762-233485cd25f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Yes",
          "uuid" : "57e20de7-10de-4391-b7ce-87b2f40d19a2",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Place of referral",
      "uuid" : "014a8b30-099d-4a91-84a7-e4612ffafb40",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Place of referral for NCD",
        "uuid" : "75b9819a-0725-4c7e-94c2-5b5e72e2a2e3",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "JSS subcenter",
          "uuid" : "b704eaf7-3cfb-4016-a884-456e1f0b7e62",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "JSS Mobile clinic",
          "uuid" : "af7205fb-a2c5-45cd-8738-5baec4c02c98",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "District Hospital",
          "uuid" : "602e1362-0c44-49d8-ac94-42a741c6273b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "Medical college",
          "uuid" : "3ab10f93-7267-4469-b81d-1f3d6c6bdc99",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "PHC",
          "uuid" : "43449534-1e2b-45de-8a5d-d99d13f3321f",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Ganiyari Hospital",
          "uuid" : "e9a08867-baca-43ea-85ac-34c06811190b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Community Health Centre",
          "uuid" : "9699d4fd-a67f-4f45-8d3c-df491f27db60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Patient requires referral').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Place of referral",
      "uuid" : "494a0fb1-2759-41c1-a759-ccb7e074ee43",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "VHW", "SHW" ]
      } ],
      "concept" : {
        "name" : "Place of referral",
        "uuid" : "80fccb06-a62f-43e8-92eb-358bdb600079",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "District Hospital",
          "uuid" : "602e1362-0c44-49d8-ac94-42a741c6273b",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 4.0,
          "active" : true
        }, {
          "name" : "Medical college",
          "uuid" : "3ab10f93-7267-4469-b81d-1f3d6c6bdc99",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "VHW",
          "uuid" : "355143bf-b812-4ec8-93e6-6795fe4f7dc9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 9.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Ganiyari",
          "uuid" : "41f067f3-48a0-4f95-aee5-dcee95a8b9de",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Community Health Centre",
          "uuid" : "9699d4fd-a67f-4f45-8d3c-df491f27db60",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 5.0,
          "active" : true
        }, {
          "name" : "SHW",
          "uuid" : "7ac0d9a2-ff82-41e6-9f38-134904d476f9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Sub Center",
          "uuid" : "31a0f7f1-7b23-4436-ae0a-0a982c11077c",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        }, {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        } ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Patient requires referral').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Other place of referral",
      "uuid" : "16b4bcaa-da69-4ed0-b1c5-a1735dbcec5e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other place of referral",
        "uuid" : "d169efa9-49af-4c84-ae09-b1b7296c62da",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Place of referral for NCD').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Referral reason",
      "uuid" : "40a8cd28-ea1c-458e-8d71-a64236f0524a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Reason for referral",
        "uuid" : "a8451bdd-0f65-4758-b6ab-6d9699f284b9",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Other",
          "uuid" : "798b7942-cf58-4d4e-a529-5972942e0a7e",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 8.0,
          "active" : true
        }, {
          "name" : "Annual check",
          "uuid" : "d8e670a1-55e2-4ea0-9a8e-73f1034fb947",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 2.0,
          "active" : true
        }, {
          "name" : "Lab and other investigation work up",
          "uuid" : "f02354c0-780a-4996-bb37-9cfbaa0fe931",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true
        }, {
          "name" : "Consultation with specialist at referral centre",
          "uuid" : "f1ecf77c-122f-4462-8bc8-812013c80fa3",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 3.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Admission",
          "uuid" : "397c8d3a-9711-4750-88cf-f709b54f8da8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 7.0,
          "active" : true
        }, {
          "name" : "Consultation with specialist",
          "uuid" : "da91746d-cc9b-4112-801f-ec3fec719886",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 6.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Doctors consultation",
          "uuid" : "6aa41619-2316-4f1a-b908-c07c04008f4d",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true
        } ],
        "active" : true
      },
      "displayOrder" : 5.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Patient requires referral').containsAnswerConceptName('Yes');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Other referral reason",
      "uuid" : "a91ce68d-75d1-4b98-a70e-4a68fe31de4d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other referral reason",
        "uuid" : "e048675e-eb86-41c2-a47b-aecfa9a3bb8c",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true,
        "keyValues" : [ ]
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Reason for referral').containsAnswerConceptName('Other');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "9eacaf6b-f381-4311-ba3a-d229c99ef28f",
    "name" : "Assessment",
    "displayOrder" : 10.0,
    "display" : "Assessment",
    "formElements" : [ {
      "name" : "Disease status",
      "uuid" : "ae118995-1fd5-4f82-99c2-97516e614635",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Disease status",
        "uuid" : "0af91ad2-4e0a-4be4-94d1-4567a5094e06",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n    const systolic = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Blood Pressure (systolic)\", programEncounter).getReadableValue();\n    const diastolic = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Blood Pressure (Diastolic)\", programEncounter).getReadableValue();\n   \n      \n    let displayText = 'Controlled';\n    \n    \n    if(programEncounter.programEnrolment.individual.getAgeInYears() < 60 ){  \n    \n    if(systolic >= 140 || diastolic >= 90){       \n       displayText = 'Not controlled';\n    }\n    \n       \n    }else if(programEncounter.programEnrolment.individual.getAgeInYears() > 60 ){  \n    \n    if(systolic >= 150 || diastolic >= 90){       \n       displayText = 'Not controlled';\n    }\n   \n    \n    }\n\n     \n    \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Disease status",
      "uuid" : "d3922fc6-81c6-4101-8921-dc55d1dadd59",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "Disease Status",
        "uuid" : "44f63b99-2a6a-47f3-a90c-639621c3339c",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Controlled",
          "uuid" : "6c5c489f-0d19-4207-aea2-08fd5c4dc7d9",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        }, {
          "name" : "Not controlled",
          "uuid" : "f1f315f7-7a1f-4e6e-9eae-8ae950b5ba86",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 1.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n    const systolic = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Blood Pressure (systolic)\", programEncounter).getReadableValue();\n    const diastolic = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Blood Pressure (Diastolic)\", programEncounter).getReadableValue();\n   \n      \n    let displayText = 'Controlled';\n    \n    \n    if(programEncounter.programEnrolment.individual.getAgeInYears() < 60 ){  \n    \n    if(systolic >= 140 || diastolic >= 90){       \n       displayText = 'Not controlled';\n    }\n    \n       \n    }else if(programEncounter.programEnrolment.individual.getAgeInYears() > 60 ){  \n    \n    if(systolic >= 150 || diastolic >= 90){       \n       displayText = 'Not controlled';\n    }\n   \n    \n    }\n\n     \n    \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false
    } ],
    "timed" : false
  }, {
    "uuid" : "ff8cf24b-06ad-4c15-af3b-333f9413fab3",
    "name" : "Next visit details",
    "displayOrder" : 11.0,
    "display" : "Next visit details",
    "formElements" : [ {
      "name" : "Disease status",
      "uuid" : "70938262-509a-48c6-b0b7-7501b81b3c68",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Disease status",
        "uuid" : "0af91ad2-4e0a-4be4-94d1-4567a5094e06",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \n    const systolic = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Blood Pressure (systolic)\", programEncounter).getReadableValue();\n    const diastolic = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(\"Blood Pressure (Diastolic)\", programEncounter).getReadableValue();\n   \n      \n    let displayText = 'Controlled';\n    console.log('systolic',systolic);\n    console.log('diastolic',diastolic);\n    \n    \n    if(programEncounter.programEnrolment.individual.getAgeInYears() < 60 ){  \n    \n    if(systolic >= 140 || diastolic >= 90){       \n       displayText = 'Not controlled';\n    }\n    \n    //else if (systolic && diastolic < 20){\n      // displayText = 'Partially controlled';\n    //}\n    \n    }else if(programEncounter.programEnrolment.individual.getAgeInYears() > 60 ){  \n    \n    if(systolic >= 150 || diastolic >= 90){       \n       displayText = 'Not controlled';\n    }\n    //else if (systolic && diastolic < 20){\n      // displayText = 'Partially controlled';\n    //}\n\n    \n    }\n\n     \n    \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, displayText);\n};",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Plan recall within a month for this patient!",
      "uuid" : "0454e3ed-bc0c-49d8-806d-adc5727c937e",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Counselling point" ]
      } ],
      "concept" : {
        "name" : "Plan recall within a month for this patient!",
        "uuid" : "7d2d0800-66c8-45bd-b0a5-5169fe2efb31",
        "dataType" : "Coded",
        "answers" : [ {
          "name" : "Counselling point",
          "uuid" : "38e42408-3f81-4e26-87dd-563a9718a6f8",
          "dataType" : "NA",
          "answers" : [ ],
          "order" : 0.0,
          "active" : true,
          "keyValues" : [ ]
        } ],
        "active" : true
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  \n  const status = programEncounter.getObservationReadableValue('Disease status');\n  console.log('status',status);\n  statusBuilder.show().whenItem(status == \"Not controlled\").is.truthy;\n  //,'Partially controlled'\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Notes",
      "uuid" : "2916f607-50ff-480a-af2d-75a64fe2246c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Notes for hypertension followup",
        "uuid" : "b13e083f-229f-4cca-b11a-aac63165c871",
        "dataType" : "Text",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Date of next visit",
      "uuid" : "b4bac8de-eabc-42a0-b060-62b61c5e0cb4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Date of next visit",
        "uuid" : "7a1d6893-f96b-4647-b274-bb78fd369185",
        "dataType" : "Date",
        "answers" : [ ],
        "active" : true
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const moment = imports.moment;\n  const formElement = params.formElement;\n  const _ = imports.lodash;\n  let visibility = true;\n  let value = null;\n  let answersToSkip = [];\n  let validationErrors = [];\n  \n  const condition11 = new imports.rulesConfig.RuleCondition({programEncounter, formElement}).when.valueInEncounter(\"7a1d6893-f96b-4647-b274-bb78fd369185\").lessThan(moment().startOf('day').toDate()).matches();\n  \n  if(condition11 ){\n    validationErrors.push(\"Date cannot be in the past\");  \n}\n  \n  return new imports.rulesConfig.FormElementStatus(formElement.uuid, visibility, value, answersToSkip, validationErrors);\n};",
      "mandatory" : true
    } ],
    "timed" : false
  } ],
  "decisionRule" : "'use strict';\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const decisions = params.decisions;\n    const _ = imports.lodash;\n\n    const latestCompComplicationsBuilder = new imports.rulesConfig.complicationsBuilder({\n        programEncounter: programEncounter,\n        complicationsConcept: 'Hypertension latest complications'\n    });\n\n    const newComplications = programEncounter.getObservationReadableValue('New htn complications');\n    const lastComplications = programEncounter.programEnrolment.findLatestObservationFromPreviousEncounters('New htn complications', programEncounter);\n\n    var compArr = [];\n    if (!_.isEmpty(lastComplications) && !_.includes(lastComplications.getReadableValue(), 'None')) {\n        if (lastComplications.getReadableValue())\n            compArr = _.uniq(_.concat(newComplications, lastComplications.getReadableValue()));\n    } else {\n        compArr = newComplications;\n    }\n\n    _.forEach(compArr, comp => {\n        latestCompComplicationsBuilder.addComplication(comp);\n    });\n\n    decisions.encounterDecisions.push(latestCompComplicationsBuilder.getComplications());\n\n\n    const medComplicationsBuilder = new imports.rulesConfig.complicationsBuilder({\n        programEncounter: programEncounter,\n        complicationsConcept: 'Medicines taken'\n    });\n    const medTaken = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment('Medicines taken');\n    _.forEach(medTaken.getReadableValue(), med => {\n        medComplicationsBuilder\n            .addComplication(med).when.valueInEncounter('Medicine status').containsAnswerConceptName('Continue same medicines');\n    });\n    decisions.encounterDecisions.push(medComplicationsBuilder.getComplications());\n\n    const isContinueSameMeds = new imports.rulesConfig.RuleCondition({programEncounter}).when.valueInEncounter('Medicine status').containsAnswerConceptName('Continue same medicines').matches();\n\n    function addConceptValueToDecision(conceptName) {\n        const observationValue = programEncounter.programEnrolment.findLatestObservationInEntireEnrolment(conceptName);\n        if (!_.isEmpty(observationValue) && isContinueSameMeds) {\n            decisions.encounterDecisions.push({name: conceptName, value: observationValue.getReadableValue()})\n        }\n    }\n\n    const medTakenDecisionConceptMap = {\n        'Amlodipin': ['Amlodipin Strength', 'Amlodipin tablets is for how many times per day?', 'Amlodipin tablet for how many days?'],\n        'Enalapril': ['Enalapril Strength', 'Enalapril tablets is for how many times per day?', 'Enalapril tablet for how many days?'],\n        'Hydrochlorothiazide (HCT)': ['Hydrochlorothiazide (HCT) Strength', 'Hydrochlorothiazide (HCT) tablet is for how many times per day?', 'Hydrochlorothiazide (HCT) tablet for how many days?'],\n        'Atenolol': ['Atenolol Strength', 'Atenolol tablet is for how many times per day?', 'Atenolol tablet is for how many days?'],\n        'Methyldopa': ['Methyldopa Strength', 'Methyldopa tablet is for how many times per day?', 'Methyldopa tablet for how many days?'],\n        'Nefedipin': ['Nefedipin Strength', 'Nefedipin tablet is for how many times per day?', 'Nefedipin tablet for how many days?'],\n        'Nefedipin SR': ['Nefedipin SR Strength', 'Nefedipin SR tablet is how many times per day?', 'Nefedipin SR for how many days?'],\n        'Ramipril': ['Ramipril Strength', 'Ramipril tablet for how times per day', 'Ramipril tablet for how many days'],\n        'Metoprolol': ['Metoprolol Strength', 'Metoprolol tablet for how times per day', 'Metoprolol tablet for how many days'],\n        'Clonidine': ['Clonidine Strength', 'Clonidine tablet for how times per day', 'Clonidine tablet for how many days'],\n        'Prazosin': ['Prazosin Strength', 'Prazosin tablet for how times per day', 'Prazosin tablet for how many days'],\n        'B-complex': ['B-complex Strength', 'B-complex tablet for how times per day', 'B-complex tablet for how many days'],\n        'Becadex (multivitamin)': ['Becadex (multivitamin) Strength', 'Becadex (multivitamin) tablet for how times per day', 'Becadex (multivitamin) tablet for how many days'],\n        'Iron (Fersifol)': ['Iron (Fersifol) Strength', 'Iron (Fersifol) tablet for how times per day', 'Iron (Fersifol) tablet for how many days'],\n        'Paracetamol': ['Paracetamol Strength', 'Paracetamol tablet for how times per day', 'Paracetamol tablet for how many days'],\n        'Furoseide': ['Furosemide Strength', 'Furosemide tablet for how times per day', 'Furosemide tablet for how many days'],\n        'Spironolactone': ['Spironolactone Strength', 'Spironolactone tablet for how times per day', 'Spironolactone tablet for how many days'],\n        'Calcium': ['Calcium Strength', 'Calcium tablet for how times per day', 'Calcium tablet for how many days']\n    };\n\n    _.forEach(medTakenDecisionConceptMap, (conceptNames, medName) => {\n        if (_.includes(medTaken.getReadableValue(), medName)) {\n            _.forEach(conceptNames, conceptName => addConceptValueToDecision(conceptName))\n        }\n    });\n\n    console.log('decisions', decisions);\n    return decisions;\n};\n",
  "visitScheduleRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n        programEncounter\n    });\n\n    const nextVisitDate = programEncounter.getObservationValue('Date of next visit');\n    const isReferralRequired = programEncounter.getObservationReadableValue('Patient requires referral');\n\n    scheduleBuilder\n        .add({\n            name: \"Hypertension Followup\",\n            encounterType: \"Hypertension Followup\",\n            earliestDate: imports.moment(nextVisitDate).toDate(),\n            maxDate: imports.moment(nextVisitDate).add(8, 'days').toDate()\n        }).whenItem(!_.isEmpty(nextVisitDate))\n        .is.not.truthy;\n\n    const encCount = programEncounter.programEnrolment.numberOfEncountersOfType('Hypertension Followup');\n  \n    if ((encCount % 12) === 0) {\n        scheduleBuilder\n            .add({\n                name: \"Lab test form\",\n                encounterType: \"Lab test\",\n                earliestDate: imports.moment(programEncounter.encounterDateTime).add(2, 'days').toDate(),\n                maxDate: imports.moment(programEncounter.encounterDateTime).add(7, 'days').toDate()\n            });\n    }\n\n    if (isReferralRequired) {\n        scheduleBuilder\n            .add({\n                name: \"Hypertension referral status-1\",\n                encounterType: \"Hypertension referral status\",\n                earliestDate: imports.moment(programEncounter.encounterDateTime).add(3, 'days').toDate(),\n                maxDate: imports.moment(programEncounter.encounterDateTime).add(5, 'days').toDate()\n            }).whenItem(isReferralRequired == 'Yes')\n            .is.truthy;\n    }\n\n\n    //add new visit schedule object to scheduleBuilder\n    return scheduleBuilder.getAll();\n};",
  "validationRule" : "",
  "checklistsRule" : "",
  "decisionConcepts" : [ ]
}