[ {
  "uuid" : "854c2f48-cf84-4265-8350-e08931c80cc4",
  "id" : 564,
  "name" : "New patients for Tuberculosis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Tuberculosis'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "753ec903-7f09-4bc9-a053-6d2f73231ff1",
  "id" : 568,
  "name" : "New patients for Mental Illness",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Mental Illness'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "6fc60081-c131-495e-9f53-b119a8804818",
  "id" : 560,
  "name" : "New patients for sickle cell disease",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Sickle cell'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "d440e5e0-3354-4b60-ad78-f5e6da477615",
  "id" : 565,
  "name" : "New patients for Hypertension",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries \n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Hypertension'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "ef185368-49f8-4411-b3d9-6473a6b6e8d0",
  "id" : 546,
  "name" : "Total no. of patients for TB - INH Prophylaxis.",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'TB - INH Prophylaxis' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'TB - INH Prophylaxis'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for TB - INH Prophylaxis.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "84ccada6-b9b5-4a63-90fa-a8e5c6ea7d7b",
  "id" : 569,
  "name" : "New patients for Thyroidism",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Thyroidism'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "674134d7-534b-4241-8470-c75ba1e86e29",
  "id" : 571,
  "name" : "New patients for Cancer",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Cancer'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "b03730c8-a748-4b6c-bbf7-0b0b38b78950",
  "id" : 542,
  "name" : "Total no. of patients for Hypertension",
  "query" : "//'use strict';\n//({params}) => {\n//    console.log(JSON.stringify(params.db.objects('Individual')));\n//    return params.db.objects('Individual');\n//};\n\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Hypertension' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Hypertension'  && enrolment.programExitDateTime == null))\n};",
  "description" : "",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "f0d443ab-054b-45d6-bb14-b944cb31499c",
  "id" : 561,
  "name" : "No of maternal deaths",
  "query" : "'use strict';\n({params, imports}) => {\n\nconst moment = imports.moment;\n\n    const dateOfDeath = (enrolment) => {\n\n        const dateOfMaternalDeathFromExit = enrolment.findExitObservation('Date of Death');\n\n        if ( moment().format('MM-YYYY') === moment(dateOfMaternalDeathFromExit.getReadableValue()).format('MM-YYYY') ) {\n            return true;\n        }\n\n    }\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Pregnancy' and  SUBQUERY($enrolment.programExitObservations, $observation, $observation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($observation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0 and $enrolment.voided = false and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && dateOfDeath(enrolment) && enrolment.programExitDateTime != null ))\n};",
  "description" : "No of maternal deaths recorded within the month",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "b8b674e0-4f1a-4950-9d98-17549dff76ef",
  "id" : 578,
  "name" : "Number of completed visits",
  "query" : "'use strict';\n({params, imports}) => {\n    const preg= (enrolment) => {\n        const encounters = enrolment.getEncounters(true);\n         const completedEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY') && e.cancelDateTime === null && e.encounterDateTime != null\n    );\n        return completedEncounters.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Pregnancy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.voided = false).@count > 0).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && preg(enrolment)))\n};",
  "description" : "",
  "color" : "#00ff43",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "714f70b0-2fa2-40b4-88b3-b232027ba044",
  "id" : 539,
  "name" : "No of births",
  "query" : "'use strict';\n({params, imports}) => {\n    const ChildBirth= (enrolment) => {\n        const ChildEnc = enrolment.getEncountersOfType('Child Birth');\n        const ChildEncThisMonth = ChildEnc \n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM'));\n          const ChildEncThisYear = ChildEnc \n    .filter((e) => imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY'));\n        return ChildEncThisYear.length > 0 && ChildEncThisMonth .length > 0 ? true : false;\n    };\n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Child Birth' and $encounter.voided = false).@count > 0).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Child' && ChildBirth(enrolment) && enrolment.programExitDateTime == null))\n};",
  "description" : "",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "5f778156-3fc9-426a-bfeb-fa706efe3daa",
  "id" : 621,
  "name" : "No. of cancelled visits for Hypertension",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\n\nconst canceledVisits= (enrolment) => {\n        const encounters = enrolment.getEncounters(false);\n         const cancelledEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.cancelDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.cancelDateTime).format('YYYY') && e.cancelDateTime != null && e.encounterDateTime === null\n    );\n        return cancelledEncounters.length > 0 ? true : false;\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Hypertension' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Hypertension Followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Hypertension' \n        && canceledVisits(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "1a5d5185-4358-4e6b-b055-33ecb5e60245",
  "id" : 537,
  "name" : "No of pregnant women",
  "query" : "'use strict';\n({params, imports}) => {\n   const deliveryCheck = (enrolment) => {\n        const deliveryEnc = enrolment.getEncountersOfType('Delivery');\n        const abortionEnc = enrolment.getEncountersOfType('Abortion');\n        return _.isEmpty(deliveryEnc) && _.isEmpty(abortionEnc);\n    }\n    return params.db.objects('Individual')\n                .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && deliveryCheck(enrolment) && enrolment.programExitDateTime == null))\n};\n",
  "description" : "Count of women enrolled in pregnancy program with no Delivery encounter filled for them",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "c0b3bc52-c54c-406a-a74d-1be5035fe05a",
  "id" : 552,
  "name" : "No of referrals.",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    const DeliveryCheck= (enrolment) => {\n        const deliveryEnc = enrolment.getEncountersOfType('Hypertension Followup');\n        return _.isMatch(deliveryEnc);\n    }\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Hypertension' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Hypertension Followup' and encounterDateTime > $0 and $encounter.voided = false).@count > 0).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Hypertension' && DeliveryCheck(enrolment) && enrolment.programExitDateTime == null ))\n};",
  "description" : "No of referrals for current month.",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : true
}, {
  "uuid" : "6932845d-fbdc-4280-b976-211d15f0be9a",
  "id" : 623,
  "name" : "No. of cancelled visits for Epilepsy",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst canceledVisits= (enrolment) => {\n        const encounters = enrolment.getEncounters(false);\n         const cancelledEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.cancelDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.cancelDateTime).format('YYYY') && e.cancelDateTime != null && e.encounterDateTime === null\n    );\n        return cancelledEncounters.length > 0 ? true : false;\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Epilepsy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Epilepsy followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Epilepsy' \n        && canceledVisits(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "649d4807-c2a4-4ee4-8266-fdd4789f7655",
  "id" : 563,
  "name" : "New patients for Epilepsy",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Epilepsy'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "12c5a81f-11f2-47c7-8e34-25218371ace1",
  "id" : 566,
  "name" : "New patients for TB - INH Prophylaxis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'TB - INH Prophylaxis'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "0a7823fd-fb2d-4ce0-8917-a866b682c11c",
  "id" : 553,
  "name" : "No of child deaths (all)",
  "query" : "'use strict';\n({params, imports}) => {\n\nconst moment = imports.moment;\n\n    const dateOfDeath = (enrolment) => {\n\n        const dateOfChildsDeathFromExit = enrolment.findExitObservation('Date of Death');\n\n        if ( moment().format('MM-YYYY') === moment(dateOfChildsDeathFromExit.getReadableValue()).format('MM-YYYY') ) {\n            return true;\n        }\n\n    }\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Child' and  SUBQUERY($enrolment.programExitObservations, $observation, $observation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($observation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0 and $enrolment.voided = false and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Child' && dateOfDeath(enrolment) && enrolment.programExitDateTime != null))\n};",
  "description" : "No of Children died in the month (within 5 years)",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "a69ee3f3-1bf2-4052-b541-096e0336f4bf",
  "id" : 576,
  "name" : "Number of cancelled visits",
  "query" : "'use strict';\n({params, imports}) => {\n    const preg= (enrolment) => {\n        const encounters = enrolment.getEncounters(false);\n         const cancelledEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.cancelDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.cancelDateTime).format('YYYY') && e.cancelDateTime != null && e.encounterDateTime === null\n    );\n        return cancelledEncounters.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Pregnancy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.voided = false).@count > 0).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && preg(enrolment)))\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "0c2da478-3ec9-494f-a723-2a6a58acc70c",
  "id" : 567,
  "name" : "New patients for Diabetes",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Diabetes'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "2d77b95b-18d7-4f1a-9c35-f2990d8c93da",
  "id" : 562,
  "name" : "Lab visits due",
  "query" : "'use strict';\n({params, imports}) => {\n    const preg= (enrolment) => {\n        const labENC= enrolment.scheduledEncountersOfType('Lab Investigations');\n         const labEncThisMonth = labENC\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.earliestVisitDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null\n    );\n       \n        return labEncThisMonth.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Pregnancy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Lab Investigations' and $encounter.cancelDateTime = null and  $encounter.voided = false).@count > 0).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && preg(enrolment)))\n};",
  "description" : "No of Lab visits due for month and not completed",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "5472e86a-8462-4e6f-a38c-8f98b0c0500e",
  "id" : 604,
  "name" : "No. of patients exited for Heart Disease",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Heart Disease'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "d9f4faea-46a9-461a-8185-427efbcd8826",
  "id" : 605,
  "name" : "No. of patients exited for Stroke",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Stroke'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "1cbd6d2a-413a-4148-93fe-f6ae6cc8e7f1",
  "id" : 610,
  "name" : "No. of referrals for Diabetes",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment().format('YYYY-MM') == imports.moment(e.encounterDateTime).format('YYYY-MM'))\n    .value();\nvar ansArray = [];\ncurrentMonthEnc.forEach((e) => {\n    const status = e.getObservationReadableValue('Does patient require referral');\n    if (status) {\n        if (status == \"Yes\") {\n            ansArray.push('Yes');\n        }else {\n           ansArray.push('NO');\n        }\n    }\n   });\n              \n        return ansArray ? (!_.includes( ansArray,'NO') && !_.isEmpty(ansArray)) : false;\n    };\n\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Diabetes' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Diabetes Followup' and $encounter.voided = false and SUBQUERY($encounter.observations, $observation, $observation.concept.uuid = '7583d0ca-15c6-4e4a-9cd3-acfaca7e7b6d').@count > 0).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Diabetes' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#1496bb",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "e3ab6f53-5fae-43fd-be42-ae295eafaa61",
  "id" : 633,
  "name" : "No of children - gained grade",
  "query" : "'use strict';\n({params, imports}) => {\n    const GradeGained= (enrolment) => {\n       const latestEncounter1 = _.chain(enrolment.getEncountersOfType('Growth Monitoring'))\n            .filter((e) => e.encounterDateTime)\n            .sortBy((e) => e.encounterDateTime, 'desc')\n            .nth(0)\n            .value();\n       console.log('latestEncounter1',latestEncounter1.getObservationReadableValue('Weight for age Grade'));\n       const latestEncounter2 = _.chain(enrolment.getEncountersOfType('Growth Monitoring'))\n            .filter((e) => e.encounterDateTime)\n            .sortBy((e) => e.encounterDateTime, 'desc')\n            .nth(1)\n            .value();\n            if(!_.isNil(latestEncounter1) && !_.isNil(latestEncounter2)){\n         const enc1Value = latestEncounter1.getObservationReadableValue('Weight for age Grade');\n       const enc2Value = latestEncounter2.getObservationReadableValue('Weight for age Grade');\n       return (enc2Value > enc1Value); \n       }\n       else          \n    return false;\n    \n    };\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Growth Monitoring' and $encounter.voided = false).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && GradeGained(enrolment)))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "62531360-ea1d-454c-b808-61b94886ae8f",
  "id" : 607,
  "name" : "No. of referrals for sickle cell",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment().format('YYYY-MM') == imports.moment(e.encounterDateTime).format('YYYY-MM'))\n    .value();\nvar ansArray = [];\ncurrentMonthEnc.forEach((e) => {\n    const status = e.getObservationReadableValue('Does patient require referral');\n    if (status) {\n        if (status == \"Yes\") {\n            ansArray.push('Yes');\n        }else {\n           ansArray.push('NO');\n        }\n    }\n   });\n              \n        return ansArray ? (!_.includes( ansArray,'NO') && !_.isEmpty(ansArray)) : false;\n    };\n\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Sickle cell' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Sickle cell followup' and $encounter.voided = false and SUBQUERY($encounter.observations, $observation, $observation.concept.uuid = '7583d0ca-15c6-4e4a-9cd3-acfaca7e7b6d').@count > 0).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Sickle cell' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#1496bb",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "d3c179d8-7e9e-4586-9122-11ca730c8b2b",
  "id" : 538,
  "name" : "No of deliveries",
  "query" : "'use strict';\n({params, imports}) => {\n    const DeliveryCheck = (enrolment) => {\n        const deliveryEnc = enrolment.getEncountersOfType('Delivery');\n        const deliveryEncThisMonth = deliveryEnc\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM'));\n    const deliveryEncThisYear = deliveryEnc\n    .filter((e) => imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY'));\n        return deliveryEncThisYear.length >  0 && deliveryEncThisMonth.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Pregnancy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Delivery' and $encounter.voided = false).@count > 0).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && DeliveryCheck(enrolment) && enrolment.programExitDateTime == null))\n};",
  "description" : "",
  "color" : "#1496bb",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "de331278-bb9a-43fa-9226-c9b08bcce400",
  "id" : 634,
  "name" : "No of children in the same grade",
  "query" : "'use strict';\n({params, imports}) => {\n    const SameGrade= (enrolment) => {\n       const latestEncounter1 = _.chain(enrolment.getEncountersOfType('Growth Monitoring'))\n            .filter((e) => e.encounterDateTime)\n            .sortBy((e) => e.encounterDateTime, 'desc')\n            .nth(0)\n            .value();\n       console.log('latestEncounter1',latestEncounter1.getObservationReadableValue('Weight for age Grade'));\n       const latestEncounter2 = _.chain(enrolment.getEncountersOfType('Growth Monitoring'))\n            .filter((e) => e.encounterDateTime)\n            .sortBy((e) => e.encounterDateTime, 'desc')\n            .nth(1)\n            .value();\n            if(!_.isNil(latestEncounter1) && !_.isNil(latestEncounter2)){\n         const enc1Value = latestEncounter1.getObservationReadableValue('Weight for age Grade');\n       const enc2Value = latestEncounter2.getObservationReadableValue('Weight for age Grade');\n       return (enc2Value == enc1Value); \n       }\n       else          \n    return false;\n    \n    };\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Growth Monitoring' and $encounter.voided = false).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && SameGrade(enrolment)))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "3782cd68-addc-4490-b41f-80dc32f5cd2e",
  "id" : 635,
  "name" : "No of children went into lower grade",
  "query" : "'use strict';\n({params, imports}) => {\n    const LowerGrade= (enrolment) => {\n       const latestEncounter1 = _.chain(enrolment.getEncountersOfType('Growth Monitoring'))\n            .filter((e) => e.encounterDateTime)\n            .sortBy((e) => e.encounterDateTime, 'desc')\n            .nth(0)\n            .value();\n       console.log('latestEncounter1',latestEncounter1.getObservationReadableValue('Weight for age Grade'));\n       const latestEncounter2 = _.chain(enrolment.getEncountersOfType('Growth Monitoring'))\n            .filter((e) => e.encounterDateTime)\n            .sortBy((e) => e.encounterDateTime, 'desc')\n            .nth(1)\n            .value();\n            if(!_.isNil(latestEncounter1) && !_.isNil(latestEncounter2)){\n         const enc1Value = latestEncounter1.getObservationReadableValue('Weight for age Grade');\n       const enc2Value = latestEncounter2.getObservationReadableValue('Weight for age Grade');\n       return (enc1Value < enc2Value); \n       }\n       else          \n    return false;\n    \n    };\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Growth Monitoring' and $encounter.voided = false).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && LowerGrade(enrolment)))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "50b185ae-206c-4cf6-98c6-a33aad07fdb8",
  "id" : 543,
  "name" : "Total no. of patients for Sickle cell",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Sickle cell' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Sickle cell'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Sickle cell",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "b570afa0-6e2e-48df-9890-8594b1354393",
  "id" : 592,
  "name" : "No. of patients exited for sickle cell",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Sickle cell'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};    ",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "0eba1b5b-5ae4-44f3-aa67-052cd6e6bcad",
  "id" : 574,
  "name" : "New patients for Heart Disease",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Heart Disease'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "cf51b682-a1c8-415b-9d3c-ffb851da5e21",
  "id" : 615,
  "name" : "Children in grade II",
  "query" : "'use strict';\n({params, imports}) => {\n    const GradeII= (enrolment) => {\n      let score = enrolment.findLatestObservationInEntireEnrolment('Weight for age Grade');\n      return !_.isNil(score) ? score.getValue() === 2 : false;\n    };\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Growth Monitoring' and $encounter.voided = false).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && GradeII(enrolment)))\n};",
  "description" : "Total number of Children in Grade II",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "183098dc-513d-4a80-a3bf-30e6d3bb4bc5",
  "id" : 613,
  "name" : "No. of cancelled visits for sickle cell",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst canceledVisits= (enrolment) => {\n        const encounters = enrolment.getEncounters(false);\n         const cancelledEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.cancelDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.cancelDateTime).format('YYYY') && e.cancelDateTime != null && e.encounterDateTime === null\n    );\n        return cancelledEncounters.length > 0 ? true : false;\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Sickle cell' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Sickle cell followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Sickle cell' \n        && canceledVisits(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "cfc073a1-69c5-47d5-a1ba-3d039d6fe7a3",
  "id" : 544,
  "name" : "Total no. of patients for Epilepsy.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Epilepsy' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Epilepsy'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Epilepsy.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "33cf3b20-e4ad-4906-96ca-bb7dac2e9374",
  "id" : 548,
  "name" : "Total no. of patients for Mental Illness.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Mental Illness' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Mental Illness'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Mental Illness.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "9e1817d0-67b0-470c-957a-dec569ddfcf3",
  "id" : 558,
  "name" : "Total no. of patients for Stroke.",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Stroke' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Stroke'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Stroke.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "1c593b2a-cec3-4097-b581-a33afb572fc5",
  "id" : 549,
  "name" : "Total no. of patients for Thyroidism.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Thyroidism' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Thyroidism'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Thyroidism.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "2aff9b9d-605e-4caa-9938-93999368b4db",
  "id" : 557,
  "name" : "Total no. of patients for Heart Disease.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Heart Disease' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Heart Disease'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Heart Disease.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "c1831c7f-93d9-40e2-b84b-83d199f2180f",
  "id" : 602,
  "name" : "No. of patients exited for COPD",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'COPD'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "72dac2cc-6996-4feb-8d06-86503d559d09",
  "id" : 595,
  "name" : "No. of patients exited for Hypertension",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Hypertension'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "9ff927de-e8ee-4477-9d80-8d23e785bf2d",
  "id" : 596,
  "name" : "No. of patients exited for TB - INH Prophylaxis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'TB - INH Prophylaxis'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "07d5855f-9511-4d30-a781-2ecf70dc8454",
  "id" : 540,
  "name" : "No of children for post natal visits",
  "query" : "'use strict';\n({params, imports}) => {\n    const ChildBirth= (enrolment) => {\n        const ChildEnc = enrolment.getEncountersOfType('Child PNC');\n        const ChildEncThisMonth = ChildEnc \n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM'));\n    const ChildEncThisYear = ChildEnc \n    .filter((e) => imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY'));\n        return ChildEncThisYear.length > 0 && ChildEncThisMonth.length > 0 ? true : false;\n    };\n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Child' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Child PNC' and $encounter.voided = false).@count > 0).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Child' && ChildBirth(enrolment) && enrolment.programExitDateTime == null))\n};",
  "description" : "Number of Child PNC completed in the month",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "6ef7c3de-d13d-4c97-95c7-6c2c653cdf60",
  "id" : 545,
  "name" : "Total no. of patients for Tuberculosis.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Tuberculosis' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Tuberculosis'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Tuberculosis.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "0ca1dba1-a4c7-4edf-a517-95848de4f71d",
  "id" : 598,
  "name" : "No. of patients exited for Mental Illness",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Mental Illness'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "b6f9836c-df88-4ad9-bdf7-dbe123c33cad",
  "id" : 616,
  "name" : "Children in grade III",
  "query" : "'use strict';\n({params, imports}) => {\n    const GradeIII= (enrolment) => {\n      let score = enrolment.findLatestObservationInEntireEnrolment('Weight for age Grade');\n      return !_.isNil(score) ? score.getValue() === 3 : false;\n    };\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Growth Monitoring' and $encounter.voided = false).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && GradeIII(enrolment)))\n};",
  "description" : "Total number of Children in Grade III",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "652e1c49-78b6-439b-946a-7d983fab839b",
  "id" : 541,
  "name" : "No of mothers for post partum visits",
  "query" : "'use strict';\n({params, imports}) => {\n    const MotherPnc= (enrolment) => {\n        const deliveryEnc = enrolment.getEncountersOfType('Mother PNC');\n          const deliveryEncThisMonth = deliveryEnc\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM'));\n            const deliveryEncThisYear = deliveryEnc\n    .filter((e) => imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY'));\n        return deliveryEncThisYear .length > 0 && deliveryEncThisMonth.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Pregnancy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Mother PNC' and $encounter.voided = false).@count > 0).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && MotherPnc(enrolment) && enrolment.programExitDateTime == null))\n};",
  "description" : "Number of Mother PNCs completed in the month",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "1b481da4-53c1-49d5-b4c6-19104538b9ac",
  "id" : 554,
  "name" : "ANC visits due",
  "query" : "'use strict';\n({params, imports}) => {\n    const preg= (enrolment) => {\n        const ancENC= enrolment.scheduledEncountersOfType('ANC Clinic Visit');\n         const ancEncThisMonth = ancENC\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.earliestVisitDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null\n    );\n       \n        return ancEncThisMonth.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Pregnancy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'ANC Clinic Visit' and $encounter.cancelDateTime = null and  $encounter.voided = false).@count > 0).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Pregnancy' && preg(enrolment)))\n};",
  "description" : "No of ANC visits scheduled for month",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "0125e8b9-4556-4367-95bd-31bd7d10c5f1",
  "id" : 622,
  "name" : "No. of cancelled visits for Diabetes",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment().isSameOrAfter(imports.moment(e.cancelDateTime).format('YYYY-MM-DD')))\n    .value();\n\n        return !_.isEmpty(currentMonthEnc)\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Diabetes' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Diabetes Followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Diabetes' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "79008668-9943-4a95-b2c3-3f6686294192",
  "id" : 547,
  "name" : "Total no. of patients for Diabetes.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Diabetes' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Diabetes'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Diabetes.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "8107e159-5369-428d-ad64-3e4637430612",
  "id" : 550,
  "name" : "Total no. of patients for Arthritis.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Arthritis' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Arthritis'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Arthritis.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "6d5e93de-d417-4f8c-9c29-82ec516429f4",
  "id" : 555,
  "name" : "Total no. of patients for COPD.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'COPD' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'COPD'  && enrolment.programExitDateTime == null))\n};",
  "description" : "",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "7242c61a-9996-402b-8583-644731365bfd",
  "id" : 624,
  "name" : "No. of cancelled visits for Tuberculosis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst canceledVisits= (enrolment) => {\n        const encounters = enrolment.getEncounters(false);\n         const cancelledEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.cancelDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.cancelDateTime).format('YYYY') && e.cancelDateTime != null && e.encounterDateTime === null\n    );\n        return cancelledEncounters.length > 0 ? true : false;\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Tuberculosis' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'TB Followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Tuberculosis' \n        && canceledVisits(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "0532f87d-ebf9-4d59-8fc7-1a9e44c6d308",
  "id" : 551,
  "name" : "Total no. of patients for Cancer.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Cancer' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Cancer'  && enrolment.programExitDateTime == null))\n};",
  "description" : "Total no. of patients for Cancer.",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "56846115-a55c-4fb6-b09a-925d852edd3d",
  "id" : 590,
  "name" : "No. of deaths due to Heart Disease",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Heart Disease' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "aabe39bc-b0de-460f-95dd-49c2a471c70c",
  "id" : 587,
  "name" : "No. of deaths due to Cancer",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Cancer' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "e645dcfb-0604-4b04-8446-b2841091c30b",
  "id" : 591,
  "name" : "No. of deaths due to Stroke",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Stroke' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "7c041866-b474-4bdb-b1bd-01d917cfa5a3",
  "id" : 577,
  "name" : "No. of deaths due to Sickle cell disease",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n\n// This is the query for finding number of deaths due to sickle cell disease for the current month and year.\n// Reason for exit --> '9518f70d-351a-44f0-b3f8-9af412db74af'\n// Anwer to the above question is \"Death\" --> 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8'\n\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Sickle cell' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};\n\n",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "9f473ac8-d88e-4349-a9d8-e027dccfd309",
  "id" : 573,
  "name" : "New patients for Asthma",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Asthma'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "ce748329-e7ff-45fc-9adc-96d9fbc08c1f",
  "id" : 556,
  "name" : "Total no. of patients for Asthma.",
  "query" : "'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Asthma' and $enrolment.programExitDateTime = null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Asthma'  && enrolment.programExitDateTime == null))\n};",
  "description" : "",
  "color" : "#093145",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "f14f5bd4-3ffe-43c3-be27-d6d754d2e940",
  "id" : 584,
  "name" : "No. of deaths due to Mental Illness",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Mental Illness' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "f3142e6c-de7f-4184-9365-e3e40585cb41",
  "id" : 629,
  "name" : "Growth monitoring visits",
  "query" : "({params, imports}) => {\n    const ChildGrowth= (enrolment) => {\n        const ChildGrowthEnc = enrolment.getEncountersOfType('Growth Monitoring');\n        const ChildGrowthEncThisMonth = ChildGrowthEnc \n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY'));\n        return ChildGrowthEncThisMonth .length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Growth Monitoring' and $encounter.voided = false).@count > 0).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && ChildGrowth(enrolment) && enrolment.programExitDateTime == null))\n};",
  "description" : "Number of visits scheduled for growth monitoring in the month",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "8912ff1a-17d7-4524-bd24-91b165bdae63",
  "id" : 586,
  "name" : "No. of deaths due to Arthritis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Arthritis' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "46e45568-0860-4f37-a91d-24f9e7c0d1e7",
  "id" : 630,
  "name" : "Albendazole",
  "query" : "({params, imports}) => {\n    const Albenda = (enrolment) => {\n        const AlbendaEnc = enrolment.getEncountersOfType('Albendazole');\n        const AlbendaEncThisMonth = AlbendaEnc \n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY'));\n        return AlbendaEncThisMonth.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Albendazole' and $encounter.voided = false).@count > 0).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && Albenda(enrolment) && enrolment.programExitDateTime == null))\n};",
  "description" : "Number of visits Albendazole visits scheduled for the month",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "61cba681-abe9-4096-a000-06edd8d80095",
  "id" : 611,
  "name" : "No. of referrals for Tuberculosis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment().format('YYYY-MM') == imports.moment(e.encounterDateTime).format('YYYY-MM'))\n    .value();\nvar ansArray = [];\ncurrentMonthEnc.forEach((e) => {\n    const status = e.getObservationReadableValue('Does patient require referral');\n    if (status) {\n        if (status == \"Yes\") {\n            ansArray.push('Yes');\n        }else {\n           ansArray.push('NO');\n        }\n    }\n   });\n              \n        return ansArray ? (!_.includes( ansArray,'NO') && !_.isEmpty(ansArray)) : false;\n    };\n\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Tuberculosis' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'TB Followup' and $encounter.voided = false and SUBQUERY($encounter.observations, $observation, $observation.concept.uuid = '7583d0ca-15c6-4e4a-9cd3-acfaca7e7b6d').@count > 0).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Tuberculosis' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#1496bb",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "a306c0ec-e784-4eaa-b7ba-b35345f8db77",
  "id" : 631,
  "name" : "No of cancelled visits",
  "query" : "'use strict';\n({params, imports}) => {\n    const Phul = (enrolment) => {\n        const encounters = enrolment.getEncounters(false);\n         const cancelledEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.cancelDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.cancelDateTime).format('YYYY') && e.cancelDateTime != null && e.encounterDateTime === null\n    );\n        return cancelledEncounters.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.voided = false).@count > 0).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && Phul(enrolment)))\n};",
  "description" : "Number of total visits canceled in the month",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "737e9151-69ef-4155-bbe2-396612d88e5d",
  "id" : 572,
  "name" : "New patients for COPD",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'COPD'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "1caece16-d79e-47a3-b433-8e7fb6cc0ef8",
  "id" : 582,
  "name" : "No. of deaths due to TB - INH Prophylaxis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'TB - INH Prophylaxis' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "b885e838-05c4-4f47-b2be-a390b85028d1",
  "id" : 583,
  "name" : "No. of deaths due to Diabetes",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Diabetes' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "8273fcb7-e396-426e-8b73-a0f74ccf0319",
  "id" : 585,
  "name" : "No. of deaths due to Thyroidism",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Thyroidism' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "bf31a98c-59a7-4ec9-a937-7b28be5f28e4",
  "id" : 589,
  "name" : "No. of deaths due to Asthma",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Asthma' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "3f303c6c-39f1-4219-85a9-6fa41aa8144e",
  "id" : 570,
  "name" : "New patients for Arthritis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Arthritis'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "52e52939-3e95-4435-9c24-6137a1f76793",
  "id" : 575,
  "name" : "New patients for Stroke",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Stroke'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.enrolmentDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#d3b53d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "d676d1f3-f587-4826-ad98-c9f9feb6c480",
  "id" : 620,
  "name" : "No of Follow-up visits due for Tuberculosis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst moment = imports.moment;\n  \nconst currentMonthReferralCheck = (enrolment) => {\n    const currentEnc = enrolment.scheduledEncountersOfType('TB followup');\n    \n    const currentMonthEnc = currentEnc\n    .filter((e) => moment().format('MMM') === moment(e.earliestVisitDateTime).format('MMM') &&\n    moment().format('YYYY') === moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null );\n    \n    return currentMonthEnc.length > 0 ? true : false;\n    \n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Tuberculosis' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'TB followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Tuberculosis' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "f4cd4fe1-2bc5-4094-a07c-843ad7fd05db",
  "id" : 588,
  "name" : "No. of deaths due to COPD",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'COPD' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "edb02b8a-6cb7-458c-bd73-e0db744e51f4",
  "id" : 606,
  "name" : "Children in grade I",
  "query" : "'use strict';\n({params, imports}) => {\n    const GradeI= (enrolment) => {\n      let score = enrolment.findLatestObservationInEntireEnrolment('Weight for age Grade');\n      return !_.isNil(score) ? score.getValue() === 1 : false;\n    };\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Growth Monitoring' and $encounter.voided = false).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && GradeI(enrolment)))\n};",
  "description" : "Total number of Children in Grade I",
  "color" : "#ff0000",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "0cdf349e-f990-41ce-81ea-a6daf40f0b87",
  "id" : 579,
  "name" : "No. of deaths due to Epilepsy",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Epilepsy' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "a86fddc5-cf83-4f48-b7cd-47eeba6ee9b6",
  "id" : 594,
  "name" : "No. of patients exited for Tuberculosis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Tuberculosis'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "f5fecd5a-00f5-4435-9360-3643c5a43105",
  "id" : 597,
  "name" : "No. of patients exited for Diabetes",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Diabetes'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "4b4cd81c-2006-4dd9-b596-263a0918143f",
  "id" : 599,
  "name" : "No. of patients exited for Thyroidism",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Thyroidism'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "a96ce5fa-f54c-4215-8fbe-eae04becd29f",
  "id" : 600,
  "name" : "No. of patients exited for Arthritis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Arthritis'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "697cd956-77d4-4f72-b228-0a46a3012090",
  "id" : 603,
  "name" : "No. of patients exited for Asthma",
  "query" : "'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Asthma'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "38bd2fd0-59b8-4c9b-b3a6-18772b276173",
  "id" : 580,
  "name" : "No. of deaths due to Tuberculosis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Tuberculosis' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '8cc66da0-b652-4587-bdb8-ea8b8bd8f28c' and ($programExitObservation.valueJSON contains 'd5db8603-1099-4ae5-a8f2-12181753debe')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "eeef0262-c617-44ea-8c23-09de64e076a3",
  "id" : 581,
  "name" : "No. of deaths due to Hypertension",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`voided = false AND individual.voided = false AND program.name = 'Hypertension' and SUBQUERY(individual.enrolments.programExitObservations, $programExitObservation, $programExitObservation.concept.uuid = '9518f70d-351a-44f0-b3f8-9af412db74af' and ($programExitObservation.valueJSON contains 'c125eec0-2bc4-4add-b1d0-7531e5ffa9c8')).@count > 0`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#c02f1d",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "ea14603d-337f-44f4-aa1f-fc7dcde4d6d6",
  "id" : 609,
  "name" : "No. of referrals for Hypertension",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment().format('YYYY-MM') == imports.moment(e.encounterDateTime).format('YYYY-MM'))\n    .value();\nvar ansArray = [];\ncurrentMonthEnc.forEach((e) => {\n    const status = e.getObservationReadableValue('Patient requires referral');\n    if (status) {\n        if (status == \"Yes\") {\n            ansArray.push('Yes');\n        }else {\n           ansArray.push('NO');\n        }\n    }\n   });\n              \n        return ansArray ? (!_.includes( ansArray,'NO') && !_.isEmpty(ansArray)) : false;\n    };\n\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Hypertension' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Hypertension Followup' and $encounter.voided = false and SUBQUERY($encounter.observations, $observation, $observation.concept.uuid = '2f331b4a-4a15-4b97-96ba-689c69000046').@count > 0).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Hypertension' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#1496bb",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "7ced3386-737d-478f-a871-34a218fbe2fc",
  "id" : 626,
  "name" : "No. of completed visits for Diabetes",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment(imports.moment().format('YYYY-MM')).isSameOrBefore(imports.moment(e.encounterDateTime).format('YYYY-MM')))\n    .value();\n\n        return !_.isEmpty(currentMonthEnc)\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Diabetes' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Diabetes Followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Diabetes' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#107896",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "3a0159bf-0f03-4a5a-bb05-f2c0a0983538",
  "id" : 627,
  "name" : "No. of completed visits for Epilepsy",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment(imports.moment().format('YYYY-MM')).isSameOrBefore(imports.moment(e.encounterDateTime).format('YYYY-MM')))\n    .value();\n\n        return !_.isEmpty(currentMonthEnc)\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Epilepsy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Epilepsy followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Epilepsy' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#107896",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "8b1a43fd-48e0-4e26-857d-8f95331931d6",
  "id" : 593,
  "name" : "No. of patients exited for Epilepsy",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n    \n    return params.db.objects('Individual')\n    .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Epilepsy' and $enrolment.programExitDateTime != null and $enrolment.voided = false).@count > 0`)\n    .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Epilepsy' && enrolment.programExitDateTime != null ))\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "01e23c94-c0be-4260-9bb9-5d06e5be44cf",
  "id" : 601,
  "name" : "No. of patients exited for Cancer",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {    \n    return params.db.objects('ProgramEnrolment')\n    .filtered(`programExitDateTime != null and individual.voided = false and voided = false and program.name = 'Cancer'`)\n    .filter(enl => imports.moment().format('YYYY-MM') === imports.moment(enl.programExitDateTime).format('YYYY-MM'))\n    .map(enl => enl.individual)\n};",
  "description" : "",
  "color" : "#f26d21",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "3e30c318-c5e0-4cd4-bff9-ec93b2990dd3",
  "id" : 614,
  "name" : "No. of completed visits for sickle cell",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment(imports.moment().format('YYYY-MM')).isSameOrBefore(imports.moment(e.encounterDateTime).format('YYYY-MM')))\n    .value();\n\n        return !_.isEmpty(currentMonthEnc)\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Sickle cell' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Sickle cell followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Sickle cell' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#107896",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "8b5a8d92-2261-4a54-b846-da202e4ea117",
  "id" : 628,
  "name" : "No. of completed visits for Tuberculosis",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment(imports.moment().format('YYYY-MM')).isSameOrBefore(imports.moment(e.encounterDateTime).format('YYYY-MM')))\n    .value();\n\n        return !_.isEmpty(currentMonthEnc)\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Tuberculosis' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'TB followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Tuberculosis' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#107896",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "84d0fc77-9d5b-4a63-9587-c02c73972aef",
  "id" : 608,
  "name" : "No. of referrals for epilepsy",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment().format('YYYY-MM') == imports.moment(e.encounterDateTime).format('YYYY-MM'))\n    .value();\nvar ansArray = [];\ncurrentMonthEnc.forEach((e) => {\n    const status = e.getObservationReadableValue('Does patient require referral');\n    if (status) {\n        if (status == \"Yes\") {\n            ansArray.push('Yes');\n        }else {\n           ansArray.push('NO');\n        }\n    }\n   });\n              \n        return ansArray ? (!_.includes( ansArray,'NO') && !_.isEmpty(ansArray)) : false;\n    };\n\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Epilepsy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Epilepsy followup' and $encounter.voided = false and SUBQUERY($encounter.observations, $observation, $observation.concept.uuid = '7583d0ca-15c6-4e4a-9cd3-acfaca7e7b6d').@count > 0).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Epilepsy' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#1496bb",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "44ccb000-c6b0-4614-9bed-0fd604aaef27",
  "id" : 632,
  "name" : "No of follow up visits completed",
  "query" : "'use strict';\n({params, imports}) => {\n    const Phul = (enrolment) => {\n        const encounters = enrolment.getEncounters(true);\n         const completedEncounters = encounters\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.encounterDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.encounterDateTime).format('YYYY') && e.cancelDateTime === null && e.encounterDateTime != null\n    );\n        return completedEncounters.length > 0 ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Phulwari' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.voided = false).@count > 0).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Phulwari' && Phul(enrolment)))\n};",
  "description" : "Total number of follow-up visits completed in the month",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "8dc59921-c018-4f49-9614-cb0ad048f0ad",
  "id" : 625,
  "name" : "No. of completed visits for Hypertension",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentMonthEnc = _.chain(enrolment.getEncounters(true))\n    .filter((e) => imports.moment(imports.moment().format('YYYY-MM')).isSameOrBefore(imports.moment(e.encounterDateTime).format('YYYY-MM')))\n    .value();\n\n        return !_.isEmpty(currentMonthEnc)\n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Hypertension' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Hypertension Followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Hypertension' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#107896",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "9c72eb10-84f6-4aee-8c6e-4a42ba83e874",
  "id" : 619,
  "name" : "No of Follow-up visits due for Diabetes",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst moment = imports.moment;\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentEnc = enrolment.scheduledEncountersOfType('Diabetes Followup');\n    \n    const currentMonthEnc = currentEnc\n    .filter((e) => moment().format('MMM') === moment(e.earliestVisitDateTime).format('MMM') &&\n    moment().format('YYYY') === moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null );\n    \n    return currentMonthEnc.length > 0 ? true : false;\n    \n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Diabetes' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Diabetes Followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Diabetes' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "2ffcd69b-ca50-4f51-b041-32c6c27e9bab",
  "id" : 617,
  "name" : "No of Follow-up visits due for Epilepsy followup",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst moment = imports.moment;\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentEnc = enrolment.scheduledEncountersOfType('Epilepsy followup');\n    \n    const currentMonthEnc = currentEnc\n    .filter((e) => moment().format('MMM') === moment(e.earliestVisitDateTime).format('MMM') &&\n    moment().format('YYYY') === moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null );\n    \n    return currentMonthEnc.length > 0 ? true : false;\n    \n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Epilepsy' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Epilepsy followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Epilepsy' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "c969cd59-f044-462a-86f7-6ddaa044e7c2",
  "id" : 612,
  "name" : "No of Follow-up visits due for sickle cell",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst moment = imports.moment;\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentEnc = enrolment.scheduledEncountersOfType('Sickle cell followup');\n    \n    const currentMonthEnc = currentEnc\n    .filter((e) => moment().format('MMM') === moment(e.earliestVisitDateTime).format('MMM') &&\n    moment().format('YYYY') === moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null );\n    \n    return currentMonthEnc.length > 0 ? true : false;\n    \n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Sickle cell' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Sickle cell followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Sickle cell' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "64b11b19-c8ec-4be7-8863-112cea42bc3d",
  "id" : 618,
  "name" : "No of Follow-up visits due for Hypertension",
  "query" : "// Documentation - https://docs.mongodb.com/realm-legacy/docs/javascript/latest/index.html#queries\n\n'use strict';\n({params, imports}) => {\nconst _ = imports.lodash;\nconst moment = imports.moment;\n\nconst currentMonthReferralCheck = (enrolment) => {\n    const currentEnc = enrolment.scheduledEncountersOfType('Hypertension Followup');\n    \n    const currentMonthEnc = currentEnc\n    .filter((e) => moment().format('MMM') === moment(e.earliestVisitDateTime).format('MMM') &&\n    moment().format('YYYY') === moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null );\n    \n    return currentMonthEnc.length > 0 ? true : false;\n    \n    };\n\n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.program.name = 'Hypertension' and $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.encounterType.name = 'Hypertension Followup' and $encounter.voided = false ).@count > 0 and voided = false).@count > 0`)\n        .filter((individual) => individual.voided === false  && _.some(individual.enrolments, enrolment => enrolment.program.name === 'Hypertension' \n        && currentMonthReferralCheck(enrolment)\n        ))\n};",
  "description" : "",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
}, {
  "uuid" : "7a87002b-4d06-441d-988a-0e872090744e",
  "id" : 559,
  "name" : "PNC visits due",
  "query" : "'use strict';\n({params, imports}) => {\n    const child = (enrolment) => {\n        const pncENC= enrolment.scheduledEncountersOfType('Child PNC');\n        const motherPncENC= enrolment.scheduledEncountersOfType('Mother PNC');\n        \n         const childPNCEncThisMonth = pncENC\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.earliestVisitDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null\n    );\n        const motherPNCEncThisMonth = motherPncENC\n    .filter((e) => imports.moment().format('MMM') === imports.moment(e.earliestVisitDateTime).format('MMM') &&\n    imports.moment().format('YYYY') === imports.moment(e.earliestVisitDateTime).format('YYYY') &&\n    e.cancelDateTime === null && e.encounterDateTime === null\n    );\n       \n        return (childPNCEncThisMonth.length > 0 || motherPNCEncThisMonth.length > 0) ? true : false;\n    };\n    \n    return params.db.objects('Individual')\n        .filtered(`SUBQUERY(enrolments, $enrolment, $enrolment.programExitDateTime = null and $enrolment.voided = false and SUBQUERY($enrolment.encounters, $encounter, $encounter.cancelDateTime = null and  $encounter.voided = false).@count > 0).@count > 0`)\n        .filter((individual) => individual.voided === false && _.some(individual.enrolments, enrolment => child(enrolment)))\n};",
  "description" : "No of PNC visits scheduled for month and not completed for child and pregnancy program",
  "color" : "#93a661",
  "iconFileS3Key" : "",
  "nested" : false,
  "count" : 1,
  "voided" : false
} ]